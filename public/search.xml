<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>Git常用命令汇集</title>
      <link href="/2019/05/25/Git%E5%B8%B8%E7%94%A8%E5%91%BD%E4%BB%A4%E6%B1%87%E9%9B%86/"/>
      <url>/2019/05/25/Git%E5%B8%B8%E7%94%A8%E5%91%BD%E4%BB%A4%E6%B1%87%E9%9B%86/</url>
      
        <content type="html"><![CDATA[<blockquote><p>开发中常用到的Git命令大集合</p></blockquote><a id="more"></a><h1 id="一张图大致了解最基础的Git命令流程"><a href="#一张图大致了解最基础的Git命令流程" class="headerlink" title="一张图大致了解最基础的Git命令流程"></a>一张图大致了解最基础的Git命令流程</h1><p><img src="https://raw.githubusercontent.com/chung567115/chung567115.github.io/hexo-blog/blog-img/Git命令.jpg" alt="Git命令"></p><p>&emsp;&emsp;图中名词解释</p><ul><li>Workspace: 工作区</li><li>Stage: 暂存区</li><li>Local: 本地仓库</li><li>Remote: 远程仓库</li></ul><h1 id="最基础的命令"><a href="#最基础的命令" class="headerlink" title="最基础的命令"></a>最基础的命令</h1><div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="false"data-rel="BASH"><figure class="iseeu highlight /bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 初始化git仓库，将会创建.git文件夹</span></span><br><span class="line">git init</span><br><span class="line"></span><br><span class="line"><span class="comment"># 克隆simaple项目</span></span><br><span class="line">git <span class="built_in">clone</span>  user@server:path/repo.git</span><br><span class="line">git <span class="built_in">clone</span> https://server/path/simpale</span><br><span class="line"></span><br><span class="line"><span class="comment"># 将指定文件文件加入本地仓库</span></span><br><span class="line">git add simple-file</span><br><span class="line"></span><br><span class="line"><span class="comment"># 将当前目录所有文件加入本地仓库</span></span><br><span class="line">git add [file]</span><br><span class="line"></span><br><span class="line"><span class="comment"># 将所有文件加入本地仓库</span></span><br><span class="line">git add -A</span><br><span class="line">git add --all</span><br><span class="line"></span><br><span class="line"><span class="comment"># 从远仓库指定分支拉取并合并最新代码,默认为merge方式，可选用rebase参数</span></span><br><span class="line">git pull [remote] [branch] [--rebase]</span><br><span class="line"></span><br><span class="line"><span class="comment"># 提交文件到本地仓库,并附加备注信息msg</span></span><br><span class="line">git commit -m [msg]</span><br><span class="line"></span><br><span class="line"><span class="comment"># 提交文件到远程仓库指定分支,变基之后需要force参数才能正常提交</span></span><br><span class="line">git push [remote] [branch] [--force]</span><br><span class="line"></span><br><span class="line"><span class="comment"># 从远程仓库更新代码</span></span><br><span class="line">git fetch [remote]</span><br><span class="line"></span><br><span class="line"><span class="comment"># 合并远程或指定branch分支到当前分支</span></span><br><span class="line">git merge [branch]</span><br><span class="line"></span><br><span class="line"><span class="comment"># 相比于merge，多人同分支开发时可用rebase避免多次merge commit</span></span><br><span class="line">git rebase [branch]</span><br><span class="line"></span><br><span class="line"><span class="comment"># 解决冲突后继续处理</span></span><br><span class="line">git rebase --<span class="built_in">continue</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 检出远程分支sample2到本地并命名为sample1</span></span><br><span class="line">git checkout -b featrues/sample1 origin/featrues/sample2</span><br></pre></td></tr></table></figure></div><h1 id="其他基础命令"><a href="#其他基础命令" class="headerlink" title="其他基础命令"></a>其他基础命令</h1><div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="false"data-rel="BASH"><figure class="iseeu highlight /bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 添加一个新的远程git仓库,此后便可以用字符串origin代替整个url</span></span><br><span class="line">git remote add [origin] [url]</span><br><span class="line"></span><br><span class="line">git remote [-v]                   <span class="comment"># 查看远程服务器</span></span><br><span class="line">git status                        <span class="comment"># 查看当前状态</span></span><br><span class="line">git <span class="built_in">log</span>                           <span class="comment"># 查看当前分支版本历史</span></span><br><span class="line">git diff                          <span class="comment"># 查看工作区和缓存区的不同</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 撤回上一个commit操作,软删除,代码还在</span></span><br><span class="line">git reset --soft HEAD~1</span><br><span class="line"></span><br><span class="line"><span class="comment"># 恢复[commit]修改前</span></span><br><span class="line">git revert [commit]</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">############################分支###########################</span></span><br><span class="line">git branch                                <span class="comment"># 查看本地分支</span></span><br><span class="line">git branch -r                             <span class="comment"># 查看远程分支</span></span><br><span class="line">git branch -a                             <span class="comment"># 查看所有分支</span></span><br><span class="line">git branch -d [branch-name]               <span class="comment"># 删除本地指定分支</span></span><br><span class="line">git branch [branch-name]                  <span class="comment"># 新建本地分支</span></span><br><span class="line">git checkout [branch-name]                <span class="comment"># 切换到分支</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 删除远程指定分支</span></span><br><span class="line">$ git push origin --delete [branch]</span><br><span class="line">$ git branch -dr [remote/branch]</span><br><span class="line"><span class="comment">###########################################################</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">######################从远程master新建分支##################</span></span><br><span class="line">git checout master                   <span class="comment"># 切换到本地master</span></span><br><span class="line">git pull                             <span class="comment"># 更新本地master</span></span><br><span class="line">git checkout -b featrues/sample      <span class="comment"># 新建并切换到分支sample</span></span><br><span class="line">git push origin featrues/sample      <span class="comment"># 提交sample分支到远程</span></span><br><span class="line"><span class="comment">###########################################################</span></span><br></pre></td></tr></table></figure></div><h1 id="常用的进阶命令"><a href="#常用的进阶命令" class="headerlink" title="常用的进阶命令"></a>常用的进阶命令</h1><p>&emsp;&emsp;工作中经常遇到需要临时改其他分支代码的场景，而此时本分支的改动尚不能提交，此时<code>stash</code>命令就派上了大用场。<br><div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="false"data-rel="BASH"><figure class="iseeu highlight /bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">git stash                            <span class="comment"># 缓存入栈</span></span><br><span class="line">git pop                              <span class="comment"># 缓存出栈</span></span><br><span class="line">git stash list                       <span class="comment"># 查看所有缓存栈</span></span><br><span class="line">git stash save [msg]                 <span class="comment"># 缓存入栈保存</span></span><br><span class="line">git stash apply stash@&#123;n&#125;            <span class="comment"># 应用版本n缓存(不删除缓存)</span></span><br><span class="line">git stash pop stash@&#123;n&#125;              <span class="comment"># 版本n缓存出栈(删除缓存)</span></span><br><span class="line">git stash drop stash@&#123;n&#125;             <span class="comment"># 删除版本n缓存</span></span><br></pre></td></tr></table></figure></div></p><!-- more -->]]></content>
      
      
      <categories>
          
          <category> 开发工具 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Git </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>2019杭州(准)独角兽名单</title>
      <link href="/2019/03/15/2019%E6%9D%AD%E5%B7%9E(%E5%87%86)%E7%8B%AC%E8%A7%92%E5%85%BD%E5%90%8D%E5%8D%95/"/>
      <url>/2019/03/15/2019%E6%9D%AD%E5%B7%9E(%E5%87%86)%E7%8B%AC%E8%A7%92%E5%85%BD%E5%90%8D%E5%8D%95/</url>
      
        <content type="html"><![CDATA[<blockquote><p>茫茫大海，如何选择心仪的公司，啊哈哈</p></blockquote><a id="more"></a><h1 id="2019创投协会和微链发布的-准-独角兽名单"><a href="#2019创投协会和微链发布的-准-独角兽名单" class="headerlink" title="2019创投协会和微链发布的(准)独角兽名单"></a>2019创投协会和微链发布的(准)独角兽名单</h1><hr><p><img src="https://raw.githubusercontent.com/chung567115/chung567115.github.io/hexo-blog/blog-img/2019杭州独角兽.png" alt="杭州独角兽"></p>]]></content>
      
      
      <categories>
          
          <category> 业余知识 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 独角兽 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>使用Hexo在GitHub上搭建私人博客</title>
      <link href="/2019/03/15/%E4%BD%BF%E7%94%A8Hexo%E5%9C%A8GitHub%E4%B8%8A%E6%90%AD%E5%BB%BA%E7%A7%81%E4%BA%BA%E5%8D%9A%E5%AE%A2/"/>
      <url>/2019/03/15/%E4%BD%BF%E7%94%A8Hexo%E5%9C%A8GitHub%E4%B8%8A%E6%90%AD%E5%BB%BA%E7%A7%81%E4%BA%BA%E5%8D%9A%E5%AE%A2/</url>
      
        <content type="html"><![CDATA[<blockquote><p>利用好GitHub Pages，让你免费光速搭建私人博客，<a href="http://zhangchong.xin">点击查看效果预览</a></p></blockquote><a id="more"></a><h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>&emsp;&emsp;一般故事的开始，都要有好多准备工作，在使用Hexo之前，你要做好如下准备：</p><ol><li>注册GitHub账号</li><li>电脑安装<code>node.js</code>、<code>npm</code>或<code>cnpm</code></li><li>电脑安装git</li></ol><h1 id="GitHub上的操作"><a href="#GitHub上的操作" class="headerlink" title="GitHub上的操作"></a>GitHub上的操作</h1><h2 id="创建博客仓库"><a href="#创建博客仓库" class="headerlink" title="创建博客仓库"></a>创建博客仓库</h2><ol><li>新建仓库<code>username.github.io</code>，其中username必须是你的github用户名</li><li>在仓库Settings页面找到GitHub Pages页面，Choose a theme并保存</li><li>此时访问<code>username.github.io</code>，就可以看到你的博客页面了</li></ol><h2 id="绑定域名"><a href="#绑定域名" class="headerlink" title="绑定域名"></a>绑定域名</h2><ol><li>还是在仓库Settings页面找到GitHub Pages页面，Custom domain输入框内输入你的域名</li><li>为自己的域名添加DNS解析，一般有两种类型<ul><li>CNAME：将你自己的域名指向另一个域名，也就是<code>username.github.io</code></li><li>A：将你自己的域名指向一个ip（可以ping <code>username.github.io</code>的ip）</li></ul></li></ol><h1 id="配置SSH"><a href="#配置SSH" class="headerlink" title="配置SSH"></a>配置SSH</h1><ol><li>在git bash窗口中输入命令<code>cd ~/.ssh</code></li><li>如果提示<code>No such file or directory</code>，则执行命令<code>h-keygen -t rsa -C &quot;your github email&quot;</code></li><li>连续按三次回车</li><li>在C盘本用户目录文件夹下打开<code>.ssh\id_rsa.pub</code>文件，复制所有内容</li><li>打开GitHub，点击右上角头像，选择Settings</li><li>选择<code>SSH and GPG keys</code>，点击<code>New SSH key</code></li><li>链贴刚才复制的内容，并取一个名字(随意)</li></ol><h2 id="测试SSH"><a href="#测试SSH" class="headerlink" title="测试SSH"></a>测试SSH</h2><div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="false"data-rel="BASH"><figure class="iseeu highlight /bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ssh -T git@github.com <span class="comment"># 注意邮箱地址不用改</span></span><br></pre></td></tr></table></figure></div><p>&emsp;&emsp;如果提示<code>Are you sure you want to continue connecting (yes/no)?</code>，输入yes，然后会看到：<code>Hi XXX! You&#39;ve successfully authenticated, but GitHub does not provide shell access.</code></p><p>&emsp;&emsp;看到这个信息说明SSH已配置成功！此时你还需要配置：<br><div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="false"data-rel="BASH"><figure class="iseeu highlight /bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">git config --global user.name <span class="string">"youusername"</span>// 你的github用户名，非昵称</span><br><span class="line">git config --global user.email  <span class="string">"xxx@xx.xxx"</span>// 填写你的github注册邮箱</span><br></pre></td></tr></table></figure></div></p><h1 id="使用Hexo"><a href="#使用Hexo" class="headerlink" title="使用Hexo"></a>使用Hexo</h1><h2 id="安装Hexo"><a href="#安装Hexo" class="headerlink" title="安装Hexo"></a>安装Hexo</h2><ol><li>新建你博客的本地文件夹</li><li>在文件夹根目录内右键打开git bash窗口</li><li>按顺序执行以下三条命令（可用cnpm代替npm可以加速）</li></ol><div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="false"data-rel="BASH"><figure class="iseeu highlight /bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">npm install hexo-cli -g</span><br><span class="line"></span><br><span class="line">hexo init</span><br><span class="line"></span><br><span class="line">npm install</span><br></pre></td></tr></table></figure></div><p>&emsp;&emsp;新建完成后，指定文件夹的目录如下：<br><div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="false"data-rel="PLAIN"><figure class="iseeu highlight /plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">.</span><br><span class="line">├── _config.yml</span><br><span class="line">├── package.json</span><br><span class="line">├── scaffolds</span><br><span class="line">├── source</span><br><span class="line">|   ├── _drafts</span><br><span class="line">|   └── _posts</span><br><span class="line">└── themes</span><br></pre></td></tr></table></figure></div></p><p>&emsp;&emsp;此时按顺序执行以下两条命令，其中第一条用来生成静态文件，第二条用来启动本地服务器。在浏览器访问<code>http://localhost:4000/</code>，可以预览当前博客的效果。<br><div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="false"data-rel="BASH"><figure class="iseeu highlight /bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">hexo g</span><br><span class="line"></span><br><span class="line">hexo s</span><br></pre></td></tr></table></figure></div></p><h2 id="上传到github"><a href="#上传到github" class="headerlink" title="上传到github"></a>上传到github</h2><p>&emsp;&emsp;配置<kbd>站点配置文件</kbd><code>_config.yml</code>中有关deploy的部分，其中<code>username</code>改为自己的github用户名。<br><div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="false"data-rel="YML"><figure class="iseeu highlight /yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">deploy:</span></span><br><span class="line"><span class="attr">  type:</span> <span class="string">git</span></span><br><span class="line"><span class="attr">  repository:</span> <span class="string">git@github.com:username/username.github.io.git</span></span><br><span class="line"><span class="attr">  branch:</span> <span class="string">master</span></span><br></pre></td></tr></table></figure></div></p><p>&emsp;&emsp;在博客本地文件夹的<code>source</code>子文件夹内，新建<code>CNAME</code>文件，注意不要后缀名，文件内容填写你自己绑定github.io的那个域名。</p><p>&emsp;&emsp;按顺序执行以下命令：<br><div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="false"data-rel="BASH"><figure class="iseeu highlight /bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">npm install hexo-deployer-git --save</span><br><span class="line">hexo g -d</span><br></pre></td></tr></table></figure></div></p><h2 id="查看博客"><a href="#查看博客" class="headerlink" title="查看博客"></a>查看博客</h2><p>&emsp;&emsp;现在在浏览器打开你自己的域名，就可以看到Hexo为你渲染的博客啦。</p><blockquote><p>自定义主题配置，可参考其他教程，也可以download我的github仓库查看（注意在hexo-blog分支下）。<a href="https://github.com/chung567115/chung567115.github.io" target="_blank" rel="noopener">点击访问</a></p></blockquote><h2 id="常用hexo命令"><a href="#常用hexo命令" class="headerlink" title="常用hexo命令"></a>常用hexo命令</h2><div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="false"data-rel="BASH"><figure class="iseeu highlight /bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">hexo g -d <span class="comment">#一键生成并部署，最常用</span></span><br><span class="line">hexo new <span class="string">"postName"</span> <span class="comment">#新建文章</span></span><br><span class="line">hexo new page <span class="string">"pageName"</span> <span class="comment">#新建页面</span></span><br><span class="line">hexo g <span class="comment">#生成静态页面至public目录</span></span><br><span class="line">hexo s <span class="comment">#开启预览访问端口（默认端口4000，'ctrl + c'关闭server）</span></span><br><span class="line">hexo d <span class="comment">#部署到GitHub</span></span><br><span class="line">hexo clean <span class="comment">#清理旧文件</span></span><br></pre></td></tr></table></figure></div><blockquote><p>注意新建的博客markdown文件都在<code>source</code>文件夹下的<code>_posts</code>子文件夹中</p></blockquote>]]></content>
      
      
      <categories>
          
          <category> 建站运维 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Hexo </tag>
            
            <tag> GitHub </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>责任链模式</title>
      <link href="/2019/03/01/%E4%BB%A3%E7%A0%81%E8%AF%A6%E8%A7%A3%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F--%E8%B4%A3%E4%BB%BB%E9%93%BE%E6%A8%A1%E5%BC%8F/"/>
      <url>/2019/03/01/%E4%BB%A3%E7%A0%81%E8%AF%A6%E8%A7%A3%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F--%E8%B4%A3%E4%BB%BB%E9%93%BE%E6%A8%A1%E5%BC%8F/</url>
      
        <content type="html"><![CDATA[<blockquote><p><kbd>责任链模式</kbd>为请求创建了一个接收者对象的链。这种模式给予请求的类型，对请求的发送者和接收者进行解耦。</p></blockquote><a id="more"></a><ul><li>优点</li></ul><ol><li>降低耦合度。它将请求的发送者和接收者解耦；</li><li>简化了对象。使得对象不需要知道链的结构；</li><li>增强给对象指派职责的灵活性。通过改变链内的成员或者调动它们的次序，允许动态地新增或者删除责任；</li><li>增加新的请求处理类很方便。</li></ol><ul><li>缺点</li></ul><ol><li>不能保证请求一定被接收；</li><li>系统性能将受到一定影响，而且在进行代码调试时不太方便，可能会造成循环调用；</li><li>可能不容易观察运行时的特征，有碍于除错。</li></ol><p><img src="https://raw.githubusercontent.com/chung567115/chung567115.github.io/hexo-blog/blog-img/责任链模式.png" alt="UML"></p><div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="false"data-rel="JAVA"><figure class="iseeu highlight /java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 记录器抽象类</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="class"><span class="keyword">class</span> <span class="title">AbstractLogger</span> </span>&#123;</span><br><span class="line">   <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">int</span> INFO = <span class="number">1</span>;</span><br><span class="line">   <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">int</span> WARN = <span class="number">2</span>;</span><br><span class="line">   <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">int</span> ERROR = <span class="number">3</span>;</span><br><span class="line">   <span class="keyword">protected</span> <span class="keyword">int</span> level;</span><br><span class="line"> </span><br><span class="line">   <span class="comment">//责任链中的下一个元素</span></span><br><span class="line">   <span class="keyword">protected</span> AbstractLogger nextLogger;</span><br><span class="line"> </span><br><span class="line">   <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setNextLogger</span><span class="params">(AbstractLogger nextLogger)</span></span>&#123;</span><br><span class="line">      <span class="keyword">this</span>.nextLogger = nextLogger;</span><br><span class="line">   &#125;</span><br><span class="line"> </span><br><span class="line">   <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">logMessage</span><span class="params">(<span class="keyword">int</span> level, String message)</span></span>&#123;</span><br><span class="line">      <span class="keyword">if</span>(<span class="keyword">this</span>.level &lt;= level)&#123;</span><br><span class="line">         write(message);</span><br><span class="line">      &#125;</span><br><span class="line">      <span class="keyword">if</span>(nextLogger != <span class="keyword">null</span>)&#123;</span><br><span class="line">         nextLogger.logMessage(level, message);</span><br><span class="line">      &#125;</span><br><span class="line">   &#125;</span><br><span class="line">   <span class="function"><span class="keyword">abstract</span> <span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">write</span><span class="params">(String message)</span></span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 信息打印器</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">InfoLogger</span> <span class="keyword">extends</span> <span class="title">AbstractLogger</span> </span>&#123;</span><br><span class="line">   <span class="function"><span class="keyword">public</span> <span class="title">InfoLogger</span><span class="params">(<span class="keyword">int</span> level)</span></span>&#123;</span><br><span class="line">      <span class="keyword">this</span>.level = level;</span><br><span class="line">   &#125;</span><br><span class="line"> </span><br><span class="line">   <span class="meta">@Override</span></span><br><span class="line">   <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">write</span><span class="params">(String message)</span> </span>&#123;    </span><br><span class="line">      System.out.println(<span class="string">"INFO: "</span> + message);</span><br><span class="line">   &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 警告打印器</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">WarnLogger</span> <span class="keyword">extends</span> <span class="title">AbstractLogger</span> </span>&#123;</span><br><span class="line">   <span class="function"><span class="keyword">public</span> <span class="title">WarnLogger</span><span class="params">(<span class="keyword">int</span> level)</span></span>&#123;</span><br><span class="line">      <span class="keyword">this</span>.level = level;</span><br><span class="line">   &#125;</span><br><span class="line"> </span><br><span class="line">   <span class="meta">@Override</span></span><br><span class="line">   <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">write</span><span class="params">(String message)</span> </span>&#123;    </span><br><span class="line">      System.out.println(<span class="string">"WARN: "</span> + message);</span><br><span class="line">   &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 错误打印器</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ErrorLogger</span> <span class="keyword">extends</span> <span class="title">AbstractLogger</span> </span>&#123;</span><br><span class="line">   <span class="function"><span class="keyword">public</span> <span class="title">ErrorLogger</span><span class="params">(<span class="keyword">int</span> level)</span></span>&#123;</span><br><span class="line">      <span class="keyword">this</span>.level = level;</span><br><span class="line">   &#125;</span><br><span class="line"> </span><br><span class="line">   <span class="meta">@Override</span></span><br><span class="line">   <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">write</span><span class="params">(String message)</span> </span>&#123;    </span><br><span class="line">      System.out.println(<span class="string">"ERROR: "</span> + message);</span><br><span class="line">   &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 使用示例</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Demo</span> </span>&#123;</span><br><span class="line">   <span class="function"><span class="keyword">private</span> <span class="keyword">static</span> AbstractLogger <span class="title">getChainOfLoggers</span><span class="params">()</span></span>&#123;</span><br><span class="line">      AbstractLogger infoLogger = <span class="keyword">new</span> ConsoleLogger(AbstractLogger.INFO);</span><br><span class="line">      AbstractLogger warnLogger = <span class="keyword">new</span> WarnLogger(AbstractLogger.WARN);</span><br><span class="line">      AbstractLogger errorLogger = <span class="keyword">new</span> ErrorLogger(AbstractLogger.ERROR);</span><br><span class="line">      errorLogger.setNextLogger(warnLogger);</span><br><span class="line">      warnLogger.setNextLogger(infoLogger);</span><br><span class="line">      <span class="keyword">return</span> errorLogger;    </span><br><span class="line">   &#125;</span><br><span class="line"> </span><br><span class="line">   <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">      AbstractLogger loggerChain = getChainOfLoggers();</span><br><span class="line">      loggerChain.logMessage(AbstractLogger.INFO, <span class="string">"信息日志"</span>);</span><br><span class="line">      loggerChain.logMessage(AbstractLogger.WARN, <span class="string">"警告日志"</span>);</span><br><span class="line">      loggerChain.logMessage(AbstractLogger.ERROR, <span class="string">"错误日志"</span>);</span><br><span class="line">   &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>]]></content>
      
      
      <categories>
          
          <category> 设计模式 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Java </tag>
            
            <tag> 设计模式 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>中介者模式</title>
      <link href="/2019/03/01/%E4%BB%A3%E7%A0%81%E8%AF%A6%E8%A7%A3%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F--%E4%B8%AD%E4%BB%8B%E8%80%85%E6%A8%A1%E5%BC%8F/"/>
      <url>/2019/03/01/%E4%BB%A3%E7%A0%81%E8%AF%A6%E8%A7%A3%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F--%E4%B8%AD%E4%BB%8B%E8%80%85%E6%A8%A1%E5%BC%8F/</url>
      
        <content type="html"><![CDATA[<blockquote><p><kbd>中介者模式</kbd>是用来降低多个对象和类之间的通信复杂性。这种模式提供了一个中介类，该类通常处理不同类之间的通信，并支持松耦合，使代码易于维护。</p></blockquote><a id="more"></a><ul><li>优点</li></ul><ol><li>降低了类的复杂度，将一对多转化成了一对一；</li><li>各个类之间的解耦；</li><li>符合迪米特原则。</li></ol><ul><li>缺点</li></ul><ol><li>中介者会庞大，变得复杂难以维护。</li></ol><div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="false"data-rel="JAVA"><figure class="iseeu highlight /java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 聊天室</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ChatRoom</span> </span>&#123;</span><br><span class="line">   <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">showMessage</span><span class="params">(User user, String message)</span></span>&#123;</span><br><span class="line">      System.out.println(<span class="string">"["</span> + user.getName() +<span class="string">"]："</span> + message);</span><br><span class="line">   &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Data</span></span><br><span class="line"><span class="meta">@AllArgsConstructor</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">User</span> </span>&#123;</span><br><span class="line">   <span class="keyword">private</span> String name;</span><br><span class="line"> </span><br><span class="line">   <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">sendMessage</span><span class="params">(String message)</span></span>&#123;</span><br><span class="line">      ChatRoom.showMessage(<span class="keyword">this</span>, message);</span><br><span class="line">   &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 使用示例</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Demo</span> </span>&#123;</span><br><span class="line">   <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">      User robert = <span class="keyword">new</span> User(<span class="string">"Robert"</span>);</span><br><span class="line">      User john = <span class="keyword">new</span> User(<span class="string">"John"</span>);</span><br><span class="line"> </span><br><span class="line">      robert.sendMessage(<span class="string">"Hi! John!"</span>);</span><br><span class="line">      john.sendMessage(<span class="string">"Hello! Robert!"</span>);</span><br><span class="line">   &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>]]></content>
      
      
      <categories>
          
          <category> 设计模式 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Java </tag>
            
            <tag> 设计模式 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>建造者模式</title>
      <link href="/2019/03/01/%E4%BB%A3%E7%A0%81%E8%AF%A6%E8%A7%A3%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F--%E5%BB%BA%E9%80%A0%E8%80%85%E6%A8%A1%E5%BC%8F/"/>
      <url>/2019/03/01/%E4%BB%A3%E7%A0%81%E8%AF%A6%E8%A7%A3%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F--%E5%BB%BA%E9%80%A0%E8%80%85%E6%A8%A1%E5%BC%8F/</url>
      
        <content type="html"><![CDATA[<blockquote><p><kbd>建造者模式</kbd>使用多个简单的对象一步一步构建成一个复杂的对象。</p></blockquote><a id="more"></a><ul><li>优点</li></ul><ol><li>建造者独立，易扩展；</li><li>便于控制细节风险。</li></ol><ul><li>缺点</li></ul><ol><li>产品必须有共同点，范围有限制；</li><li>如内部变化复杂，会有很多的建造类。</li></ol><p><img src="https://raw.githubusercontent.com/chung567115/chung567115.github.io/hexo-blog/blog-img/建造者模式.png" alt="UML"></p><div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="false"data-rel="JAVA"><figure class="iseeu highlight /java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 点单</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">Item</span> </span>&#123;</span><br><span class="line">   <span class="function"><span class="keyword">public</span> String <span class="title">name</span><span class="params">()</span></span>;</span><br><span class="line">   <span class="function"><span class="keyword">public</span> Packing <span class="title">packing</span><span class="params">()</span></span>;</span><br><span class="line">   <span class="function"><span class="keyword">public</span> <span class="keyword">float</span> <span class="title">price</span><span class="params">()</span></span>;    </span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 打包</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">Packing</span> </span>&#123;</span><br><span class="line">   <span class="function"><span class="keyword">public</span> String <span class="title">pack</span><span class="params">()</span></span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 包装纸</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Wrapper</span> <span class="keyword">implements</span> <span class="title">Packing</span> </span>&#123;</span><br><span class="line">   <span class="meta">@Override</span></span><br><span class="line">   <span class="function"><span class="keyword">public</span> String <span class="title">pack</span><span class="params">()</span> </span>&#123;</span><br><span class="line">      <span class="keyword">return</span> <span class="string">"Wrapper"</span>;</span><br><span class="line">   &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 瓶子</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Bottle</span> <span class="keyword">implements</span> <span class="title">Packing</span> </span>&#123;</span><br><span class="line">   <span class="meta">@Override</span></span><br><span class="line">   <span class="function"><span class="keyword">public</span> String <span class="title">pack</span><span class="params">()</span> </span>&#123;</span><br><span class="line">      <span class="keyword">return</span> <span class="string">"Bottle"</span>;</span><br><span class="line">   &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 汉堡</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="class"><span class="keyword">class</span> <span class="title">Burger</span> <span class="keyword">implements</span> <span class="title">Item</span> </span>&#123;</span><br><span class="line">   <span class="meta">@Override</span></span><br><span class="line">   <span class="function"><span class="keyword">public</span> Packing <span class="title">packing</span><span class="params">()</span> </span>&#123;</span><br><span class="line">      <span class="keyword">return</span> <span class="keyword">new</span> Wrapper();</span><br><span class="line">   &#125;</span><br><span class="line"> </span><br><span class="line">   <span class="meta">@Override</span></span><br><span class="line">   <span class="function"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="keyword">float</span> <span class="title">price</span><span class="params">()</span></span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 冷饮</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="class"><span class="keyword">class</span> <span class="title">ColdDrink</span> <span class="keyword">implements</span> <span class="title">Item</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Packing <span class="title">packing</span><span class="params">()</span> </span>&#123;</span><br><span class="line">       <span class="keyword">return</span> <span class="keyword">new</span> Bottle();</span><br><span class="line">    &#125;</span><br><span class="line"> </span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="keyword">float</span> <span class="title">price</span><span class="params">()</span></span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 素食汉堡</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">VegBurger</span> <span class="keyword">extends</span> <span class="title">Burger</span> </span>&#123;</span><br><span class="line">   <span class="meta">@Override</span></span><br><span class="line">   <span class="function"><span class="keyword">public</span> <span class="keyword">float</span> <span class="title">price</span><span class="params">()</span> </span>&#123;</span><br><span class="line">      <span class="keyword">return</span> <span class="number">25.0f</span>;</span><br><span class="line">   &#125;</span><br><span class="line"> </span><br><span class="line">   <span class="meta">@Override</span></span><br><span class="line">   <span class="function"><span class="keyword">public</span> String <span class="title">name</span><span class="params">()</span> </span>&#123;</span><br><span class="line">      <span class="keyword">return</span> <span class="string">"Veg Burger"</span>;</span><br><span class="line">   &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 鸡肉汉堡</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ChickenBurger</span> <span class="keyword">extends</span> <span class="title">Burger</span> </span>&#123;</span><br><span class="line">   <span class="meta">@Override</span></span><br><span class="line">   <span class="function"><span class="keyword">public</span> <span class="keyword">float</span> <span class="title">price</span><span class="params">()</span> </span>&#123;</span><br><span class="line">      <span class="keyword">return</span> <span class="number">50.5f</span>;</span><br><span class="line">   &#125;</span><br><span class="line"> </span><br><span class="line">   <span class="meta">@Override</span></span><br><span class="line">   <span class="function"><span class="keyword">public</span> String <span class="title">name</span><span class="params">()</span> </span>&#123;</span><br><span class="line">      <span class="keyword">return</span> <span class="string">"Chicken Burger"</span>;</span><br><span class="line">   &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 可口可乐</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Coke</span> <span class="keyword">extends</span> <span class="title">ColdDrink</span> </span>&#123;</span><br><span class="line">   <span class="meta">@Override</span></span><br><span class="line">   <span class="function"><span class="keyword">public</span> <span class="keyword">float</span> <span class="title">price</span><span class="params">()</span> </span>&#123;</span><br><span class="line">      <span class="keyword">return</span> <span class="number">30.0f</span>;</span><br><span class="line">   &#125;</span><br><span class="line"> </span><br><span class="line">   <span class="meta">@Override</span></span><br><span class="line">   <span class="function"><span class="keyword">public</span> String <span class="title">name</span><span class="params">()</span> </span>&#123;</span><br><span class="line">      <span class="keyword">return</span> <span class="string">"Coke"</span>;</span><br><span class="line">   &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 百事可乐</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Pepsi</span> <span class="keyword">extends</span> <span class="title">ColdDrink</span> </span>&#123;</span><br><span class="line">   <span class="meta">@Override</span></span><br><span class="line">   <span class="function"><span class="keyword">public</span> <span class="keyword">float</span> <span class="title">price</span><span class="params">()</span> </span>&#123;</span><br><span class="line">      <span class="keyword">return</span> <span class="number">35.0f</span>;</span><br><span class="line">   &#125;</span><br><span class="line"> </span><br><span class="line">   <span class="meta">@Override</span></span><br><span class="line">   <span class="function"><span class="keyword">public</span> String <span class="title">name</span><span class="params">()</span> </span>&#123;</span><br><span class="line">      <span class="keyword">return</span> <span class="string">"Pepsi"</span>;</span><br><span class="line">   &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 快餐</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Meal</span> </span>&#123;</span><br><span class="line">   <span class="keyword">private</span> List&lt;Item&gt; items = <span class="keyword">new</span> ArrayList&lt;Item&gt;();    </span><br><span class="line">    </span><br><span class="line">   <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">addItem</span><span class="params">(Item item)</span></span>&#123;</span><br><span class="line">      items.add(item);</span><br><span class="line">   &#125;</span><br><span class="line"> </span><br><span class="line">   <span class="function"><span class="keyword">public</span> <span class="keyword">float</span> <span class="title">getCost</span><span class="params">()</span></span>&#123;</span><br><span class="line">      <span class="keyword">float</span> cost = <span class="number">0.0f</span>;</span><br><span class="line">      <span class="keyword">for</span> (Item item : items) &#123;</span><br><span class="line">         cost += item.price();</span><br><span class="line">      &#125;        </span><br><span class="line">      <span class="keyword">return</span> cost;</span><br><span class="line">   &#125;</span><br><span class="line"> </span><br><span class="line">   <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">showItems</span><span class="params">()</span></span>&#123;</span><br><span class="line">      <span class="keyword">for</span> (Item item : items) &#123;</span><br><span class="line">         System.out.print(<span class="string">"Item : "</span>+item.name());</span><br><span class="line">         System.out.print(<span class="string">", Packing : "</span>+item.packing().pack());</span><br><span class="line">         System.out.println(<span class="string">", Price : "</span>+item.price());</span><br><span class="line">      &#125;        </span><br><span class="line">   &#125;    </span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 快餐建造者</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MealBuilder</span> </span>&#123;</span><br><span class="line">   <span class="function"><span class="keyword">public</span> Meal <span class="title">prepareVegMeal</span> <span class="params">()</span></span>&#123;</span><br><span class="line">      Meal meal = <span class="keyword">new</span> Meal();</span><br><span class="line">      meal.addItem(<span class="keyword">new</span> VegBurger());</span><br><span class="line">      meal.addItem(<span class="keyword">new</span> Coke());</span><br><span class="line">      <span class="keyword">return</span> meal;</span><br><span class="line">   &#125;   </span><br><span class="line"> </span><br><span class="line">   <span class="function"><span class="keyword">public</span> Meal <span class="title">prepareNonVegMeal</span> <span class="params">()</span></span>&#123;</span><br><span class="line">      Meal meal = <span class="keyword">new</span> Meal();</span><br><span class="line">      meal.addItem(<span class="keyword">new</span> ChickenBurger());</span><br><span class="line">      meal.addItem(<span class="keyword">new</span> Pepsi());</span><br><span class="line">      <span class="keyword">return</span> meal;</span><br><span class="line">   &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 使用示例</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Demo</span> </span>&#123;</span><br><span class="line">   <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">      MealBuilder mealBuilder = <span class="keyword">new</span> MealBuilder();</span><br><span class="line"> </span><br><span class="line">      Meal vegMeal = mealBuilder.prepareVegMeal();</span><br><span class="line">      System.out.println(<span class="string">"Veg Meal"</span>);</span><br><span class="line">      vegMeal.showItems();</span><br><span class="line">      System.out.println(<span class="string">"Total Cost: "</span> +vegMeal.getCost());</span><br><span class="line"> </span><br><span class="line">      Meal nonVegMeal = mealBuilder.prepareNonVegMeal();</span><br><span class="line">      System.out.println(<span class="string">"Non-Veg Meal"</span>);</span><br><span class="line">      nonVegMeal.showItems();</span><br><span class="line">      System.out.println(<span class="string">"Total Cost: "</span> +nonVegMeal.getCost());</span><br><span class="line">   &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>]]></content>
      
      
      <categories>
          
          <category> 设计模式 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Java </tag>
            
            <tag> 设计模式 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>观察者模式</title>
      <link href="/2019/03/01/%E4%BB%A3%E7%A0%81%E8%AF%A6%E8%A7%A3%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F--%E8%A7%82%E5%AF%9F%E8%80%85%E6%A8%A1%E5%BC%8F/"/>
      <url>/2019/03/01/%E4%BB%A3%E7%A0%81%E8%AF%A6%E8%A7%A3%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F--%E8%A7%82%E5%AF%9F%E8%80%85%E6%A8%A1%E5%BC%8F/</url>
      
        <content type="html"><![CDATA[<blockquote><p><kbd>观察者模式</kbd>中，当一个对象被修改时，会自动通知它的依赖对象。</p></blockquote><a id="more"></a><ul><li>优点： </li></ul><ol><li>观察者和被观察者是抽象耦合的；</li><li>建立了一套触发机制。</li></ol><ul><li>缺点： </li></ul><ol><li>如果一个被观察者对象有很多的直接和间接的观察者的话，将所有的观察者都通知到会花费很多时间。</li><li>如果在观察者和观察目标之间有循环依赖的话，观察目标会触发它们之间进行循环调用，可能导致系统崩溃。</li></ol><p><img src="https://raw.githubusercontent.com/chung567115/chung567115.github.io/hexo-blog/blog-img/观察者模式.png" alt="UML"></p><div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="false"data-rel="JAVA"><figure class="iseeu highlight /java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 被观察者</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Subject</span> </span>&#123;</span><br><span class="line">   <span class="keyword">private</span> List&lt;Observer&gt; observers = <span class="keyword">new</span> ArrayList&lt;Observer&gt;();</span><br><span class="line">   <span class="keyword">private</span> <span class="keyword">int</span> state;</span><br><span class="line"> </span><br><span class="line">   <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">getState</span><span class="params">()</span> </span>&#123;</span><br><span class="line">      <span class="keyword">return</span> state;</span><br><span class="line">   &#125;</span><br><span class="line"> </span><br><span class="line">   <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setState</span><span class="params">(<span class="keyword">int</span> state)</span> </span>&#123;</span><br><span class="line">      <span class="keyword">this</span>.state = state;</span><br><span class="line">      notifyAllObservers();</span><br><span class="line">   &#125;</span><br><span class="line"> </span><br><span class="line">   <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">attach</span><span class="params">(Observer observer)</span></span>&#123;</span><br><span class="line">      observers.add(observer);      </span><br><span class="line">   &#125;</span><br><span class="line"> </span><br><span class="line">   <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">notifyAllObservers</span><span class="params">()</span></span>&#123;</span><br><span class="line">      <span class="keyword">for</span> (Observer observer : observers) &#123;</span><br><span class="line">         observer.update();</span><br><span class="line">      &#125;</span><br><span class="line">   &#125;  </span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 观察者抽象类</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="class"><span class="keyword">class</span> <span class="title">Observer</span> </span>&#123;</span><br><span class="line">   <span class="keyword">protected</span> Subject subject;</span><br><span class="line">   <span class="function"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="keyword">void</span> <span class="title">update</span><span class="params">()</span></span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 二进制观察者实体类</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">BinaryObserver</span> <span class="keyword">extends</span> <span class="title">Observer</span></span>&#123;</span><br><span class="line">   <span class="function"><span class="keyword">public</span> <span class="title">BinaryObserver</span><span class="params">(Subject subject)</span></span>&#123;</span><br><span class="line">      <span class="keyword">this</span>.subject = subject;</span><br><span class="line">      <span class="keyword">this</span>.subject.attach(<span class="keyword">this</span>);</span><br><span class="line">   &#125;</span><br><span class="line"> </span><br><span class="line">   <span class="meta">@Override</span></span><br><span class="line">   <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">update</span><span class="params">()</span> </span>&#123;</span><br><span class="line">      System.out.println(Integer.toBinaryString(subject.getState())); </span><br><span class="line">   &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 八进制观察者实体类</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">OctalObserver</span> <span class="keyword">extends</span> <span class="title">Observer</span></span>&#123;</span><br><span class="line">   <span class="function"><span class="keyword">public</span> <span class="title">OctalObserver</span><span class="params">(Subject subject)</span></span>&#123;</span><br><span class="line">      <span class="keyword">this</span>.subject = subject;</span><br><span class="line">      <span class="keyword">this</span>.subject.attach(<span class="keyword">this</span>);</span><br><span class="line">   &#125;</span><br><span class="line"> </span><br><span class="line">   <span class="meta">@Override</span></span><br><span class="line">   <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">update</span><span class="params">()</span> </span>&#123;</span><br><span class="line">      System.out.println(Integer.toOctalString(subject.getState())); </span><br><span class="line">   &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 使用示例</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Demo</span> </span>&#123;</span><br><span class="line">   <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">      Subject subject = <span class="keyword">new</span> Subject();</span><br><span class="line">      <span class="keyword">new</span> BinaryObserver(subject);</span><br><span class="line">      <span class="keyword">new</span> OctalObserver(subject);</span><br><span class="line">       </span><br><span class="line">      subject.setState(<span class="number">15</span>); </span><br><span class="line">      subject.setState(<span class="number">10</span>);</span><br><span class="line">   &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>]]></content>
      
      
      <categories>
          
          <category> 设计模式 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Java </tag>
            
            <tag> 设计模式 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>装饰器模式</title>
      <link href="/2019/02/12/%E4%BB%A3%E7%A0%81%E8%AF%A6%E8%A7%A3%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F--%E8%A3%85%E9%A5%B0%E5%99%A8%E6%A8%A1%E5%BC%8F/"/>
      <url>/2019/02/12/%E4%BB%A3%E7%A0%81%E8%AF%A6%E8%A7%A3%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F--%E8%A3%85%E9%A5%B0%E5%99%A8%E6%A8%A1%E5%BC%8F/</url>
      
        <content type="html"><![CDATA[<blockquote><p><kbd>装饰器模式</kbd>允许向一个现有的对象添加新的功能，同时又不改变其结构。</p></blockquote><a id="more"></a><p><img src="https://raw.githubusercontent.com/chung567115/chung567115.github.io/hexo-blog/blog-img/装饰器模式.png" alt="UML"></p><div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="false"data-rel="JAVA"><figure class="iseeu highlight /java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 形状接口</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">Shape</span> </span>&#123;</span><br><span class="line">   <span class="function"><span class="keyword">void</span> <span class="title">draw</span><span class="params">()</span></span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 圆形</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Circle</span> <span class="keyword">implements</span> <span class="title">Shape</span> </span>&#123;</span><br><span class="line">   <span class="meta">@Override</span></span><br><span class="line">   <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">draw</span><span class="params">()</span> </span>&#123;</span><br><span class="line">      System.out.println(<span class="string">"画圆"</span>);</span><br><span class="line">   &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 方形</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Square</span> <span class="keyword">implements</span> <span class="title">Shape</span> </span>&#123;</span><br><span class="line">   <span class="meta">@Override</span></span><br><span class="line">   <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">draw</span><span class="params">()</span> </span>&#123;</span><br><span class="line">      System.out.println(<span class="string">"画方"</span>);</span><br><span class="line">   &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 形状装饰器</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="class"><span class="keyword">class</span> <span class="title">ShapeDecorator</span> <span class="keyword">implements</span> <span class="title">Shape</span> </span>&#123;</span><br><span class="line">   <span class="keyword">protected</span> Shape decoratedShape;</span><br><span class="line"> </span><br><span class="line">   <span class="function"><span class="keyword">public</span> <span class="title">ShapeDecorator</span><span class="params">(Shape decoratedShape)</span></span>&#123;</span><br><span class="line">      <span class="keyword">this</span>.decoratedShape = decoratedShape;</span><br><span class="line">   &#125;</span><br><span class="line"> </span><br><span class="line">   <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">draw</span><span class="params">()</span></span>&#123;</span><br><span class="line">      decoratedShape.draw();</span><br><span class="line">   &#125;  </span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 红色装饰器</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">RedShapeDecorator</span> <span class="keyword">extends</span> <span class="title">ShapeDecorator</span> </span>&#123;</span><br><span class="line">   <span class="function"><span class="keyword">public</span> <span class="title">RedShapeDecorator</span><span class="params">(Shape decoratedShape)</span> </span>&#123;</span><br><span class="line">      <span class="keyword">super</span>(decoratedShape);     </span><br><span class="line">   &#125;</span><br><span class="line"> </span><br><span class="line">   <span class="meta">@Override</span></span><br><span class="line">   <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">draw</span><span class="params">()</span> </span>&#123;</span><br><span class="line">      decoratedShape.draw();         </span><br><span class="line">      setRedBorder(decoratedShape);</span><br><span class="line">   &#125;</span><br><span class="line"> </span><br><span class="line">   <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">setRedBorder</span><span class="params">(Shape decoratedShape)</span></span>&#123;</span><br><span class="line">      System.out.println(<span class="string">"外观颜色: 红色"</span>);</span><br><span class="line">   &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 使用示例</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Demo</span> </span>&#123;</span><br><span class="line">   <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">      Shape circle = <span class="keyword">new</span> Circle();</span><br><span class="line">      Shape square = <span class="keyword">new</span> Square();</span><br><span class="line">      Shape redCircle = <span class="keyword">new</span> RedShapeDecorator(<span class="keyword">new</span> Circle());</span><br><span class="line">      Shape redSquare = <span class="keyword">new</span> RedShapeDecorator(<span class="keyword">new</span> Square());</span><br><span class="line">       </span><br><span class="line">      circle.draw();</span><br><span class="line">      square.draw();</span><br><span class="line">      redCircle.draw();</span><br><span class="line">      redSquare.draw();</span><br><span class="line">   &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>]]></content>
      
      
      <categories>
          
          <category> 设计模式 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Java </tag>
            
            <tag> 设计模式 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>过滤器模式</title>
      <link href="/2019/02/12/%E4%BB%A3%E7%A0%81%E8%AF%A6%E8%A7%A3%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F--%E8%BF%87%E6%BB%A4%E5%99%A8%E6%A8%A1%E5%BC%8F/"/>
      <url>/2019/02/12/%E4%BB%A3%E7%A0%81%E8%AF%A6%E8%A7%A3%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F--%E8%BF%87%E6%BB%A4%E5%99%A8%E6%A8%A1%E5%BC%8F/</url>
      
        <content type="html"><![CDATA[<blockquote><p><kbd>过滤器模式</kbd>允许开发人员使用不同的标准来过滤一组对象，通过逻辑运算以解耦的方式把它们连接起来。最常见的应用如MyBatis中。</p></blockquote><a id="more"></a><p><img src="https://raw.githubusercontent.com/chung567115/chung567115.github.io/hexo-blog/blog-img/过滤器模式.png" alt="UML"></p><div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="false"data-rel="JAVA"><figure class="iseeu highlight /java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 实体</span></span><br><span class="line"><span class="meta">@Data</span></span><br><span class="line"><span class="meta">@AllArgsConstructor</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Person</span> </span>&#123;</span><br><span class="line">   <span class="keyword">private</span> String name;</span><br><span class="line">   <span class="keyword">private</span> String gender;</span><br><span class="line">   <span class="keyword">private</span> String maritalStatus;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 条件接口</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">Criteria</span> </span>&#123;</span><br><span class="line">   <span class="function"><span class="keyword">public</span> List&lt;Person&gt; <span class="title">filter</span><span class="params">(List&lt;Person&gt; persons)</span></span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 男性条件</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MaleCriteria</span> <span class="keyword">implements</span> <span class="title">Criteria</span> </span>&#123;</span><br><span class="line">   <span class="meta">@Override</span></span><br><span class="line">   <span class="function"><span class="keyword">public</span> List&lt;Person&gt; <span class="title">filter</span><span class="params">(List&lt;Person&gt; persons)</span> </span>&#123;</span><br><span class="line">      List&lt;Person&gt; malePersons = <span class="keyword">new</span> ArrayList&lt;Person&gt;(); </span><br><span class="line">      <span class="keyword">for</span> (Person person : persons) &#123;</span><br><span class="line">         <span class="keyword">if</span>(person.getGender().equalsIgnoreCase(<span class="string">"MALE"</span>))&#123;</span><br><span class="line">            malePersons.add(person);</span><br><span class="line">         &#125;</span><br><span class="line">      &#125;</span><br><span class="line">      <span class="keyword">return</span> malePersons;</span><br><span class="line">   &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 女性条件</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">FemaleCriteria</span> <span class="keyword">implements</span> <span class="title">Criteria</span> </span>&#123;</span><br><span class="line">   <span class="meta">@Override</span></span><br><span class="line">   <span class="function"><span class="keyword">public</span> List&lt;Person&gt; <span class="title">filter</span><span class="params">(List&lt;Person&gt; persons)</span> </span>&#123;</span><br><span class="line">      List&lt;Person&gt; femalePersons = <span class="keyword">new</span> ArrayList&lt;Person&gt;(); </span><br><span class="line">      <span class="keyword">for</span> (Person person : persons) &#123;</span><br><span class="line">         <span class="keyword">if</span>(person.getGender().equalsIgnoreCase(<span class="string">"FEMALE"</span>))&#123;</span><br><span class="line">            femalePersons.add(person);</span><br><span class="line">         &#125;</span><br><span class="line">      &#125;</span><br><span class="line">      <span class="keyword">return</span> femalePersons;</span><br><span class="line">   &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 单身条件</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SingleCriteria</span> <span class="keyword">implements</span> <span class="title">Criteria</span> </span>&#123;</span><br><span class="line">   <span class="meta">@Override</span></span><br><span class="line">   <span class="function"><span class="keyword">public</span> List&lt;Person&gt; <span class="title">filter</span><span class="params">(List&lt;Person&gt; persons)</span> </span>&#123;</span><br><span class="line">      List&lt;Person&gt; singlePersons = <span class="keyword">new</span> ArrayList&lt;Person&gt;(); </span><br><span class="line">      <span class="keyword">for</span> (Person person : persons) &#123;</span><br><span class="line">         <span class="keyword">if</span>(person.getMaritalStatus().equalsIgnoreCase(<span class="string">"SINGLE"</span>))&#123;</span><br><span class="line">            singlePersons.add(person);</span><br><span class="line">         &#125;</span><br><span class="line">      &#125;</span><br><span class="line">      <span class="keyword">return</span> singlePersons;</span><br><span class="line">   &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 与条件</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">AndCriteria</span> <span class="keyword">implements</span> <span class="title">Criteria</span> </span>&#123;</span><br><span class="line">   <span class="keyword">private</span> Criteria criteria;</span><br><span class="line">   <span class="keyword">private</span> Criteria otherCriteria;</span><br><span class="line"> </span><br><span class="line">   <span class="function"><span class="keyword">public</span> <span class="title">AndCriteria</span><span class="params">(Criteria criteria, Criteria otherCriteria)</span> </span>&#123;</span><br><span class="line">      <span class="keyword">this</span>.criteria = criteria;</span><br><span class="line">      <span class="keyword">this</span>.otherCriteria = otherCriteria; </span><br><span class="line">   &#125;</span><br><span class="line"> </span><br><span class="line">   <span class="meta">@Override</span></span><br><span class="line">   <span class="function"><span class="keyword">public</span> List&lt;Person&gt; <span class="title">filter</span><span class="params">(List&lt;Person&gt; persons)</span> </span>&#123;</span><br><span class="line">      List&lt;Person&gt; firstCriteriaPersons = criteria.filter(persons);     </span><br><span class="line">      <span class="keyword">return</span> otherCriteria.filter(firstCriteriaPersons);</span><br><span class="line">   &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 或条件</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">OrCriteria</span> <span class="keyword">implements</span> <span class="title">Criteria</span> </span>&#123;</span><br><span class="line">   <span class="keyword">private</span> Criteria criteria;</span><br><span class="line">   <span class="keyword">private</span> Criteria otherCriteria;</span><br><span class="line"> </span><br><span class="line">   <span class="function"><span class="keyword">public</span> <span class="title">OrCriteria</span><span class="params">(Criteria criteria, Criteria otherCriteria)</span> </span>&#123;</span><br><span class="line">      <span class="keyword">this</span>.criteria = criteria;</span><br><span class="line">      <span class="keyword">this</span>.otherCriteria = otherCriteria; </span><br><span class="line">   &#125;</span><br><span class="line"> </span><br><span class="line">   <span class="meta">@Override</span></span><br><span class="line">   <span class="function"><span class="keyword">public</span> List&lt;Person&gt; <span class="title">filter</span><span class="params">(List&lt;Person&gt; persons)</span> </span>&#123;</span><br><span class="line">      List&lt;Person&gt; firstCriteriaItems = criteria.filter(persons);</span><br><span class="line">      List&lt;Person&gt; otherCriteriaItems = otherCriteria.filter(persons);</span><br><span class="line"> </span><br><span class="line">      <span class="keyword">for</span> (Person person : otherCriteriaItems) &#123;</span><br><span class="line">         <span class="keyword">if</span>(!firstCriteriaItems.contains(person))&#123;</span><br><span class="line">           firstCriteriaItems.add(person);</span><br><span class="line">         &#125;</span><br><span class="line">      &#125;  </span><br><span class="line">      <span class="keyword">return</span> firstCriteriaItems;</span><br><span class="line">   &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 使用示例</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Demo</span> </span>&#123;</span><br><span class="line">   <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">      List&lt;Person&gt; persons = <span class="keyword">new</span> ArrayList&lt;Person&gt;();</span><br><span class="line">      persons.add(<span class="keyword">new</span> Person(<span class="string">"Robert"</span>,<span class="string">"Male"</span>, <span class="string">"Single"</span>));</span><br><span class="line">      persons.add(<span class="keyword">new</span> Person(<span class="string">"John"</span>,<span class="string">"Male"</span>, <span class="string">"Married"</span>));</span><br><span class="line">      persons.add(<span class="keyword">new</span> Person(<span class="string">"Laura"</span>,<span class="string">"Female"</span>, <span class="string">"Married"</span>));</span><br><span class="line">      persons.add(<span class="keyword">new</span> Person(<span class="string">"Diana"</span>,<span class="string">"Female"</span>, <span class="string">"Single"</span>));</span><br><span class="line">      persons.add(<span class="keyword">new</span> Person(<span class="string">"Mike"</span>,<span class="string">"Male"</span>, <span class="string">"Single"</span>));</span><br><span class="line">      persons.add(<span class="keyword">new</span> Person(<span class="string">"Bobby"</span>,<span class="string">"Male"</span>, <span class="string">"Single"</span>));</span><br><span class="line"> </span><br><span class="line">      Criteria male = <span class="keyword">new</span> MaleCriteria();</span><br><span class="line">      Criteria female = <span class="keyword">new</span> FemaleCriteria();</span><br><span class="line">      Criteria single = <span class="keyword">new</span> SingleCriteria();</span><br><span class="line">      Criteria singleMale = <span class="keyword">new</span> AndCriteria(single, male);</span><br><span class="line">      Criteria singleOrFemale = <span class="keyword">new</span> OrCriteria(single, female);</span><br><span class="line"> </span><br><span class="line">      System.out.println(<span class="string">"Males: "</span>);</span><br><span class="line">      printPersons(male.filter(persons));</span><br><span class="line"> </span><br><span class="line">      System.out.println(<span class="string">"Females: "</span>);</span><br><span class="line">      printPersons(female.filter(persons));</span><br><span class="line"> </span><br><span class="line">      System.out.println(<span class="string">"Single Males: "</span>);</span><br><span class="line">      printPersons(singleMale.filter(persons));</span><br><span class="line"> </span><br><span class="line">      System.out.println(<span class="string">"Single Or Females: "</span>);</span><br><span class="line">      printPersons(singleOrFemale.filter(persons));</span><br><span class="line">   &#125;</span><br><span class="line"> </span><br><span class="line">   <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">printPersons</span><span class="params">(List&lt;Person&gt; persons)</span></span>&#123;</span><br><span class="line">      <span class="keyword">for</span> (Person person : persons) &#123;</span><br><span class="line">         System.out.println(person.toString());</span><br><span class="line">      &#125;</span><br><span class="line">   &#125;      </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>]]></content>
      
      
      <categories>
          
          <category> 设计模式 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Java </tag>
            
            <tag> 设计模式 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>适配器模式</title>
      <link href="/2019/02/12/%E4%BB%A3%E7%A0%81%E8%AF%A6%E8%A7%A3%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F--%E9%80%82%E9%85%8D%E5%99%A8%E6%A8%A1%E5%BC%8F/"/>
      <url>/2019/02/12/%E4%BB%A3%E7%A0%81%E8%AF%A6%E8%A7%A3%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F--%E9%80%82%E9%85%8D%E5%99%A8%E6%A8%A1%E5%BC%8F/</url>
      
        <content type="html"><![CDATA[<blockquote><p><kbd>适配器模式</kbd>作为两个不兼容的接口之间的桥梁，结合了两个独立接口的功能。</p></blockquote><a id="more"></a><ul><li>优点</li></ul><ol><li>可以让任何两个没有关联的类一起运行。</li><li>提高了类的复用。</li><li>增加了类的透明度。</li><li>灵活性好。</li></ol><ul><li>缺点</li></ul><ol start="5"><li>过多地使用适配器，会让系统非常零乱，不易整体进行把握。</li></ol><p><img src="https://raw.githubusercontent.com/chung567115/chung567115.github.io/hexo-blog/blog-img/适配器模式.png" alt="UML"></p><div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="false"data-rel="JAVA"><figure class="iseeu highlight /java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 播放器接口</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">MediaPlayer</span> </span>&#123;</span><br><span class="line">   <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">play</span><span class="params">(String audioType, String fileName)</span></span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 拓展播放器接口</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">AdvancedMediaPlayer</span> </span>&#123; </span><br><span class="line">   <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">playFlv</span><span class="params">(String fileName)</span></span>;</span><br><span class="line">   <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">playMp4</span><span class="params">(String fileName)</span></span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// FLV播放器</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">FlvPlayer</span> <span class="keyword">implements</span> <span class="title">AdvancedMediaPlayer</span></span>&#123;</span><br><span class="line">   <span class="meta">@Override</span></span><br><span class="line">   <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">playFlv</span><span class="params">(String fileName)</span> </span>&#123;</span><br><span class="line">      System.out.println(<span class="string">"播放FLV文件: "</span>+ fileName);      </span><br><span class="line">   &#125;</span><br><span class="line"> </span><br><span class="line">   <span class="meta">@Override</span></span><br><span class="line">   <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">playMp4</span><span class="params">(String fileName)</span> </span>&#123;</span><br><span class="line">      <span class="comment">//什么也不做</span></span><br><span class="line">   &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// MP4播放器</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Mp4Player</span> <span class="keyword">implements</span> <span class="title">AdvancedMediaPlayer</span></span>&#123;</span><br><span class="line">   <span class="meta">@Override</span></span><br><span class="line">   <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">playFlv</span><span class="params">(String fileName)</span> </span>&#123;</span><br><span class="line">      <span class="comment">//什么也不做</span></span><br><span class="line">   &#125;</span><br><span class="line"> </span><br><span class="line">   <span class="meta">@Override</span></span><br><span class="line">   <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">playMp4</span><span class="params">(String fileName)</span> </span>&#123;</span><br><span class="line">      System.out.println(<span class="string">"播放MP4文件: "</span>+ fileName);      </span><br><span class="line">   &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 播放器适配器</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MediaAdapter</span> <span class="keyword">implements</span> <span class="title">MediaPlayer</span> </span>&#123;</span><br><span class="line">   AdvancedMediaPlayer advancedMusicPlayer;</span><br><span class="line"> </span><br><span class="line">   <span class="function"><span class="keyword">public</span> <span class="title">MediaAdapter</span><span class="params">(String audioType)</span></span>&#123;</span><br><span class="line">      <span class="keyword">if</span>(audioType.equalsIgnoreCase(<span class="string">"FLV"</span>) )&#123;</span><br><span class="line">         advancedMusicPlayer = <span class="keyword">new</span> FlvPlayer();       </span><br><span class="line">      &#125; <span class="keyword">else</span> <span class="keyword">if</span> (audioType.equalsIgnoreCase(<span class="string">"MP4"</span>))&#123;</span><br><span class="line">         advancedMusicPlayer = <span class="keyword">new</span> Mp4Player();</span><br><span class="line">      &#125;  </span><br><span class="line">   &#125;</span><br><span class="line"> </span><br><span class="line">   <span class="meta">@Override</span></span><br><span class="line">   <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">play</span><span class="params">(String audioType, String fileName)</span> </span>&#123;</span><br><span class="line">      <span class="keyword">if</span>(audioType.equalsIgnoreCase(<span class="string">"FLV"</span>))&#123;</span><br><span class="line">         advancedMusicPlayer.playFlv(fileName);</span><br><span class="line">      &#125; <span class="keyword">else</span> <span class="keyword">if</span>(audioType.equalsIgnoreCase(<span class="string">"MP4"</span>))&#123;</span><br><span class="line">         advancedMusicPlayer.playMp4(fileName);</span><br><span class="line">      &#125;</span><br><span class="line">   &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 音频播放器</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">AudioPlayer</span> <span class="keyword">implements</span> <span class="title">MediaPlayer</span> </span>&#123;</span><br><span class="line">   MediaAdapter mediaAdapter; </span><br><span class="line"> </span><br><span class="line">   <span class="meta">@Override</span></span><br><span class="line">   <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">play</span><span class="params">(String audioType, String fileName)</span> </span>&#123;</span><br><span class="line">      <span class="comment">// mediaAdapter 提供了播放其他文件格式的支持</span></span><br><span class="line">      <span class="keyword">if</span>(audioType.equalsIgnoreCase(<span class="string">"FLV"</span>) || audioType.equalsIgnoreCase(<span class="string">"MP4"</span>))&#123;</span><br><span class="line">         mediaAdapter = <span class="keyword">new</span> MediaAdapter(audioType);</span><br><span class="line">         mediaAdapter.play(audioType, fileName);</span><br><span class="line">      &#125; <span class="keyword">else</span> <span class="keyword">if</span>(audioType.equalsIgnoreCase(<span class="string">"MP3"</span>))&#123;</span><br><span class="line">         <span class="comment">// 内置支持MP3文件</span></span><br><span class="line">         System.out.println(<span class="string">"播放MP3文件: "</span>+ fileName); </span><br><span class="line">      &#125; <span class="keyword">else</span>&#123;</span><br><span class="line">         System.out.println(<span class="string">"不支持文件格式："</span> + audioType);</span><br><span class="line">      &#125;</span><br><span class="line">   &#125;   </span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 使用示例</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Demo</span> </span>&#123;</span><br><span class="line">   <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">      AudioPlayer audioPlayer = <span class="keyword">new</span> AudioPlayer();</span><br><span class="line">      audioPlayer.play(<span class="string">"mp3"</span>, <span class="string">"a.mp3"</span>);</span><br><span class="line">      audioPlayer.play(<span class="string">"mp4"</span>, <span class="string">"b.mp4"</span>);</span><br><span class="line">      audioPlayer.play(<span class="string">"flv"</span>, <span class="string">"c.flv"</span>);</span><br><span class="line">      audioPlayer.play(<span class="string">"avi"</span>, <span class="string">"d.avi"</span>);</span><br><span class="line">   &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>]]></content>
      
      
      <categories>
          
          <category> 设计模式 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Java </tag>
            
            <tag> 设计模式 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>策略模式</title>
      <link href="/2019/02/12/%E4%BB%A3%E7%A0%81%E8%AF%A6%E8%A7%A3%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F--%E7%AD%96%E7%95%A5%E6%A8%A1%E5%BC%8F/"/>
      <url>/2019/02/12/%E4%BB%A3%E7%A0%81%E8%AF%A6%E8%A7%A3%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F--%E7%AD%96%E7%95%A5%E6%A8%A1%E5%BC%8F/</url>
      
        <content type="html"><![CDATA[<blockquote><p><kbd>策略模式</kbd>定义一系列的算法,把它们一个个封装起来，并且使这些算法可以在运行时根据不同需要调整。</p></blockquote><a id="more"></a><ul><li>优点：</li></ul><ol><li>算法可以自由切换。 </li><li>避免使用多重条件判断。 </li><li>扩展性良好。</li></ol><ul><li>缺点：</li></ul><ol><li>策略类会增多。 </li><li>所有策略类都需要对外暴露。</li></ol><p><img src="https://raw.githubusercontent.com/chung567115/chung567115.github.io/hexo-blog/blog-img/策略模式.png" alt="UML"></p><div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="false"data-rel="JAVA"><figure class="iseeu highlight /java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 策略</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">Strategy</span> </span>&#123;</span><br><span class="line">   <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">doOperation</span><span class="params">(<span class="keyword">int</span> num1, <span class="keyword">int</span> num2)</span></span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 加策略</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Plus</span> <span class="keyword">implements</span> <span class="title">Strategy</span></span>&#123;</span><br><span class="line">   <span class="meta">@Override</span></span><br><span class="line">   <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">doOperation</span><span class="params">(<span class="keyword">int</span> num1, <span class="keyword">int</span> num2)</span> </span>&#123;</span><br><span class="line">      <span class="keyword">return</span> num1 + num2;</span><br><span class="line">   &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 减策略</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Substract</span> <span class="keyword">implements</span> <span class="title">Strategy</span></span>&#123;</span><br><span class="line">   <span class="meta">@Override</span></span><br><span class="line">   <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">doOperation</span><span class="params">(<span class="keyword">int</span> num1, <span class="keyword">int</span> num2)</span> </span>&#123;</span><br><span class="line">      <span class="keyword">return</span> num1 - num2;</span><br><span class="line">   &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 策略context</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Context</span> </span>&#123;</span><br><span class="line">   <span class="keyword">private</span> Strategy strategy;</span><br><span class="line"> </span><br><span class="line">   <span class="function"><span class="keyword">public</span> <span class="title">Context</span><span class="params">(Strategy strategy)</span></span>&#123;</span><br><span class="line">      <span class="keyword">this</span>.strategy = strategy;</span><br><span class="line">   &#125;</span><br><span class="line"> </span><br><span class="line">   <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">executeStrategy</span><span class="params">(<span class="keyword">int</span> num1, <span class="keyword">int</span> num2)</span></span>&#123;</span><br><span class="line">      <span class="keyword">return</span> strategy.doOperation(num1, num2);</span><br><span class="line">   &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 使用示例</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Demo</span> </span>&#123;</span><br><span class="line">   <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">      Context context1 = <span class="keyword">new</span> Context(<span class="keyword">new</span> OperationAdd());    </span><br><span class="line">      System.out.println(<span class="string">"10 + 5 = "</span> + context.executeStrategy(<span class="number">10</span>, <span class="number">5</span>));</span><br><span class="line"> </span><br><span class="line">      Context context2 = <span class="keyword">new</span> Context(<span class="keyword">new</span> OperationSubstract());      </span><br><span class="line">      System.out.println(<span class="string">"10 - 5 = "</span> + context.executeStrategy(<span class="number">10</span>, <span class="number">5</span>));</span><br><span class="line">   &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>]]></content>
      
      
      <categories>
          
          <category> 设计模式 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Java </tag>
            
            <tag> 设计模式 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>模板模式</title>
      <link href="/2019/01/04/%E4%BB%A3%E7%A0%81%E8%AF%A6%E8%A7%A3%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F--%E6%A8%A1%E6%9D%BF%E6%A8%A1%E5%BC%8F/"/>
      <url>/2019/01/04/%E4%BB%A3%E7%A0%81%E8%AF%A6%E8%A7%A3%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F--%E6%A8%A1%E6%9D%BF%E6%A8%A1%E5%BC%8F/</url>
      
        <content type="html"><![CDATA[<blockquote><p>一个抽象类公开定义了执行方法的<kbd>模板</kbd>，它的子类可以按需要重写方法实现，但调用将以抽象类中定义的方式进行。</p></blockquote><a id="more"></a><ul><li>优点：</li></ul><ol><li>封装不变部分，扩展可变部分。 </li><li>提取公共代码，便于维护。 </li><li>行为由父类控制，子类实现。</li></ol><ul><li>缺点：</li></ul><ol><li>每个不同实现都需要一个子类来实现。<br><img src="https://raw.githubusercontent.com/chung567115/chung567115.github.io/hexo-blog/blog-img/模板模式.png" alt="UML"><div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="false"data-rel="JAVA"><figure class="iseeu highlight /java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//游戏模板类</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="class"><span class="keyword">class</span> <span class="title">Game</span> </span>&#123;</span><br><span class="line">   <span class="function"><span class="keyword">abstract</span> <span class="keyword">void</span> <span class="title">initialize</span><span class="params">()</span></span>;</span><br><span class="line">   <span class="function"><span class="keyword">abstract</span> <span class="keyword">void</span> <span class="title">startPlay</span><span class="params">()</span></span>;</span><br><span class="line">   <span class="function"><span class="keyword">abstract</span> <span class="keyword">void</span> <span class="title">endPlay</span><span class="params">()</span></span>;</span><br><span class="line"> </span><br><span class="line">   <span class="comment">//模板</span></span><br><span class="line">   <span class="function"><span class="keyword">public</span> <span class="keyword">final</span> <span class="keyword">void</span> <span class="title">play</span><span class="params">()</span></span>&#123;</span><br><span class="line">      <span class="comment">//初始化游戏</span></span><br><span class="line">      initialize();</span><br><span class="line">      <span class="comment">//开始游戏</span></span><br><span class="line">      startPlay();</span><br><span class="line">      <span class="comment">//结束游戏</span></span><br><span class="line">      endPlay();</span><br><span class="line">   &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 足球游戏</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Football</span> <span class="keyword">extends</span> <span class="title">Game</span> </span>&#123;</span><br><span class="line">   <span class="meta">@Override</span></span><br><span class="line">   <span class="function"><span class="keyword">void</span> <span class="title">initialize</span><span class="params">()</span> </span>&#123;</span><br><span class="line">      System.out.println(<span class="string">"准备足球"</span>);</span><br><span class="line">   &#125;</span><br><span class="line"> </span><br><span class="line">   <span class="meta">@Override</span></span><br><span class="line">   <span class="function"><span class="keyword">void</span> <span class="title">startPlay</span><span class="params">()</span> </span>&#123;</span><br><span class="line">      System.out.println(<span class="string">"踢足球"</span>);</span><br><span class="line">   &#125;</span><br><span class="line">   </span><br><span class="line">   <span class="meta">@Override</span></span><br><span class="line">   <span class="function"><span class="keyword">void</span> <span class="title">endPlay</span><span class="params">()</span> </span>&#123;</span><br><span class="line">      System.out.println(<span class="string">"收拾足球"</span>);</span><br><span class="line">   &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//篮球游戏</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Basketball</span> <span class="keyword">extends</span> <span class="title">Game</span> </span>&#123;</span><br><span class="line">   <span class="meta">@Override</span></span><br><span class="line">   <span class="function"><span class="keyword">void</span> <span class="title">initialize</span><span class="params">()</span> </span>&#123;</span><br><span class="line">      System.out.println(<span class="string">"准备篮球"</span>);</span><br><span class="line">   &#125;</span><br><span class="line"> </span><br><span class="line">   <span class="meta">@Override</span></span><br><span class="line">   <span class="function"><span class="keyword">void</span> <span class="title">startPlay</span><span class="params">()</span> </span>&#123;</span><br><span class="line">      System.out.println(<span class="string">"打篮球"</span>);</span><br><span class="line">   &#125;</span><br><span class="line">   </span><br><span class="line">   <span class="meta">@Override</span></span><br><span class="line">   <span class="function"><span class="keyword">void</span> <span class="title">endPlay</span><span class="params">()</span> </span>&#123;</span><br><span class="line">      System.out.println(<span class="string">"收拾篮球"</span>);</span><br><span class="line">   &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//使用示例</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Demo</span> </span>&#123;</span><br><span class="line">   <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">      <span class="comment">// 足球</span></span><br><span class="line">      Game game1 = <span class="keyword">new</span> Football();</span><br><span class="line">      game1.play();</span><br><span class="line">      </span><br><span class="line">      <span class="comment">// 篮球</span></span><br><span class="line">      Game game2 = <span class="keyword">new</span> Basketball();</span><br><span class="line">      game2.play();      </span><br><span class="line">   &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div></li></ol>]]></content>
      
      
      <categories>
          
          <category> 设计模式 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Java </tag>
            
            <tag> 设计模式 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>代理模式</title>
      <link href="/2019/01/04/%E4%BB%A3%E7%A0%81%E8%AF%A6%E8%A7%A3%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F--%E4%BB%A3%E7%90%86%E6%A8%A1%E5%BC%8F/"/>
      <url>/2019/01/04/%E4%BB%A3%E7%A0%81%E8%AF%A6%E8%A7%A3%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F--%E4%BB%A3%E7%90%86%E6%A8%A1%E5%BC%8F/</url>
      
        <content type="html"><![CDATA[<blockquote><p><kbd>代理模式</kbd>是为了向其他对象提供一种控制本对象访问的途径。</p></blockquote><a id="more"></a><ul><li>优点：</li></ul><ol><li>职责清晰。 </li><li>高扩展性。 </li><li>智能化。</li></ol><ul><li>缺点：</li></ul><ol><li>由于增加了代理对象，可能会造成请求的处理速度变慢。 </li><li>实现代理模式需要额外的工作。<br><img src="https://raw.githubusercontent.com/chung567115/chung567115.github.io/hexo-blog/blog-img/代理模式.png" alt="UML"><div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="false"data-rel="JAVA"><figure class="iseeu highlight /java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">Image</span> </span>&#123;</span><br><span class="line">   <span class="function"><span class="keyword">void</span> <span class="title">display</span><span class="params">()</span></span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">RealImage</span> <span class="keyword">implements</span> <span class="title">Image</span> </span>&#123;</span><br><span class="line">   <span class="keyword">private</span> String fileName;</span><br><span class="line"> </span><br><span class="line">   <span class="function"><span class="keyword">public</span> <span class="title">RealImage</span><span class="params">(String fileName)</span></span>&#123;</span><br><span class="line">      <span class="keyword">this</span>.fileName = fileName;</span><br><span class="line">      loadFromDisk(fileName);</span><br><span class="line">   &#125;</span><br><span class="line"> </span><br><span class="line">   <span class="meta">@Override</span></span><br><span class="line">   <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">display</span><span class="params">()</span> </span>&#123;</span><br><span class="line">      System.out.println(<span class="string">"展示图片："</span> + fileName);</span><br><span class="line">   &#125;</span><br><span class="line"> </span><br><span class="line">   <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">loadFromDisk</span><span class="params">(String fileName)</span></span>&#123;</span><br><span class="line">      System.out.println(<span class="string">"加载图片："</span> + fileName);</span><br><span class="line">   &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//代理</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ProxyImage</span> <span class="keyword">implements</span> <span class="title">Image</span></span>&#123;</span><br><span class="line">   <span class="keyword">private</span> RealImage realImage;</span><br><span class="line">   <span class="keyword">private</span> String fileName;</span><br><span class="line"> </span><br><span class="line">   <span class="function"><span class="keyword">public</span> <span class="title">ProxyImage</span><span class="params">(String fileName)</span></span>&#123;</span><br><span class="line">      <span class="keyword">this</span>.fileName = fileName;</span><br><span class="line">   &#125;</span><br><span class="line"> </span><br><span class="line">   <span class="meta">@Override</span></span><br><span class="line">   <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">display</span><span class="params">()</span> </span>&#123;</span><br><span class="line">      <span class="keyword">if</span>(realImage == <span class="keyword">null</span>)&#123;</span><br><span class="line">         realImage = <span class="keyword">new</span> RealImage(fileName);</span><br><span class="line">      &#125;</span><br><span class="line">      realImage.display();</span><br><span class="line">   &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//使用示例</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Demo</span> </span>&#123;</span><br><span class="line">   <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">      Image image = <span class="keyword">new</span> ProxyImage(<span class="string">"test.jpg"</span>);</span><br><span class="line"> </span><br><span class="line">      <span class="comment">// 图像将从磁盘加载</span></span><br><span class="line">      image.display();</span><br><span class="line">   &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div></li></ol>]]></content>
      
      
      <categories>
          
          <category> 设计模式 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Java </tag>
            
            <tag> 设计模式 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>单例模式</title>
      <link href="/2019/01/04/%E4%BB%A3%E7%A0%81%E8%AF%A6%E8%A7%A3%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F--%E5%8D%95%E4%BE%8B%E6%A8%A1%E5%BC%8F/"/>
      <url>/2019/01/04/%E4%BB%A3%E7%A0%81%E8%AF%A6%E8%A7%A3%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F--%E5%8D%95%E4%BE%8B%E6%A8%A1%E5%BC%8F/</url>
      
        <content type="html"><![CDATA[<blockquote><p><kbd>单例模式</kbd>的目的是：保证一个类仅有一个实例，并提供一个访问它的全局访问点。</p></blockquote><a id="more"></a><ul><li>优点： </li></ul><ol><li>在内存里只有一个实例，减少了内存的开销，尤其是频繁的创建和销毁实例。</li><li>避免对资源的多重占用。</li></ol><ul><li>缺点：</li></ul><ol><li>没有接口，不能继承，与单一职责原则冲突。<h1 id="懒汉式"><a href="#懒汉式" class="headerlink" title="懒汉式"></a>懒汉式</h1><div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="false"data-rel="JAVA"><figure class="iseeu highlight /java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Singleton</span> </span>&#123;  </span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> Singleton instance;  </span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="title">Singleton</span> <span class="params">()</span></span>&#123;&#125;  </span><br><span class="line">  </span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> [<span class="keyword">synchronized</span>] <span class="function">Singleton <span class="title">getInstance</span><span class="params">()</span> </span>&#123;  </span><br><span class="line">        <span class="keyword">if</span> (instance == <span class="keyword">null</span>) &#123;  </span><br><span class="line">            instance = <span class="keyword">new</span> Singleton();  </span><br><span class="line">        &#125;  </span><br><span class="line">        <span class="keyword">return</span> instance;  </span><br><span class="line">    &#125;  </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div></li></ol><blockquote><p>本方式中，用synchronized修饰时是线程安全的</p></blockquote><h1 id="饿汉式-线程安全"><a href="#饿汉式-线程安全" class="headerlink" title="饿汉式 [线程安全]"></a>饿汉式 [线程安全]</h1><div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="false"data-rel="JAVA"><figure class="iseeu highlight /java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Singleton</span> </span>&#123;  </span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> Singleton instance = <span class="keyword">new</span> Singleton();  </span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="title">Singleton</span> <span class="params">()</span></span>&#123;&#125;</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> Singleton <span class="title">getInstance</span><span class="params">()</span> </span>&#123;  </span><br><span class="line">    <span class="keyword">return</span> instance;  </span><br><span class="line">    &#125;  </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div><h1 id="双检锁-线程安全"><a href="#双检锁-线程安全" class="headerlink" title="双检锁 [线程安全]"></a>双检锁 [线程安全]</h1><div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="false"data-rel="JAVA"><figure class="iseeu highlight /java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Singleton</span> </span>&#123;  </span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">volatile</span> <span class="keyword">static</span> Singleton instance;  </span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="title">Singleton</span> <span class="params">()</span></span>&#123;&#125;</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> Singleton <span class="title">getInstance</span><span class="params">()</span> </span>&#123;  </span><br><span class="line">        <span class="keyword">if</span> (instance == <span class="keyword">null</span>) &#123;  <span class="comment">//第一次检查</span></span><br><span class="line">            <span class="keyword">synchronized</span> (Singleton.class) &#123;  </span><br><span class="line">                <span class="keyword">if</span> (instance == <span class="keyword">null</span>) &#123;  <span class="comment">//第二次检查</span></span><br><span class="line">                    instance = <span class="keyword">new</span> Singleton();  </span><br><span class="line">                &#125;  </span><br><span class="line">            &#125;  </span><br><span class="line">        &#125;  </span><br><span class="line">        <span class="keyword">return</span> instance;  </span><br><span class="line">    &#125;  </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div><blockquote><p>双重检查加锁机制：并不是每次进入getInstance方法都需要同步，而是先检查实例是否存在，如果不存在才进入下面的同步块，这是第一重检查。进入同步块过后，再次检查实例是否存在，如果不存在，就在同步的情况下创建一个实例，这是第二重检查。这样一来减少了多次在同步情况下进行判断所浪费的时间。</p></blockquote><h1 id="静态内部类-线程安全"><a href="#静态内部类-线程安全" class="headerlink" title="静态内部类 [线程安全]"></a>静态内部类 [线程安全]</h1><div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="false"data-rel="JAVA"><figure class="iseeu highlight /java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Singleton</span> </span>&#123;  </span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="title">Singleton</span> <span class="params">()</span></span>&#123;&#125;  </span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> Singleton <span class="title">getInstance</span><span class="params">()</span> </span>&#123;  </span><br><span class="line">    <span class="keyword">return</span> SingletonHolder.INSTANCE;  </span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="class"><span class="keyword">class</span> <span class="title">SingletonHolder</span> </span>&#123;  </span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> Singleton INSTANCE = <span class="keyword">new</span> Singleton();  </span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div><h1 id="枚举类-线程安全"><a href="#枚举类-线程安全" class="headerlink" title="枚举类 [线程安全]"></a>枚举类 [线程安全]</h1><div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="false"data-rel="JAVA"><figure class="iseeu highlight /java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">enum</span> Singleton &#123;  </span><br><span class="line">    INSTANCE;  </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">whateverMethod</span><span class="params">()</span> </span>&#123;  </span><br><span class="line">    &#125;  </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>]]></content>
      
      
      <categories>
          
          <category> 设计模式 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Java </tag>
            
            <tag> 设计模式 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>抽象工厂模式</title>
      <link href="/2019/01/04/%E4%BB%A3%E7%A0%81%E8%AF%A6%E8%A7%A3%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F--%E6%8A%BD%E8%B1%A1%E5%B7%A5%E5%8E%82%E6%A8%A1%E5%BC%8F/"/>
      <url>/2019/01/04/%E4%BB%A3%E7%A0%81%E8%AF%A6%E8%A7%A3%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F--%E6%8A%BD%E8%B1%A1%E5%B7%A5%E5%8E%82%E6%A8%A1%E5%BC%8F/</url>
      
        <content type="html"><![CDATA[<blockquote><p>实例：除了上篇简单工厂模式画形状的功能，我们还需要给形状涂色，所以还需要有<kbd>颜色</kbd>工厂。此时我们将所有工厂抽象出来设计成<kbd>抽象工厂</kbd>，并建立一个<kbd>工厂生产器</kbd>。</p></blockquote><a id="more"></a><ul><li>优点：能保证客户端始终只使用某一个既定的工厂。</li><li>缺点：工厂扩展非常困难，要增加一个工厂，既要在抽象工厂里加代码，又要在具体工厂生产器里加代码。<br><img src="https://raw.githubusercontent.com/chung567115/chung567115.github.io/hexo-blog/blog-img/抽象工厂模式.png" alt="UML"><div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="false"data-rel="JAVA"><figure class="iseeu highlight /java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//形状</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">Shape</span> </span>&#123;</span><br><span class="line">   <span class="function"><span class="keyword">void</span> <span class="title">draw</span><span class="params">()</span></span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//圆形</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Circle</span> <span class="keyword">implements</span> <span class="title">Shape</span> </span>&#123;</span><br><span class="line">   <span class="meta">@Override</span></span><br><span class="line">   <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">draw</span><span class="params">()</span> </span>&#123;</span><br><span class="line">      System.out.println(<span class="string">"画圆"</span>);</span><br><span class="line">   &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//方形</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Square</span> <span class="keyword">implements</span> <span class="title">Shape</span> </span>&#123;</span><br><span class="line">   <span class="meta">@Override</span></span><br><span class="line">   <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">draw</span><span class="params">()</span> </span>&#123;</span><br><span class="line">      System.out.println(<span class="string">"画方"</span>);</span><br><span class="line">   &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//颜色</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">Color</span> </span>&#123;</span><br><span class="line">   <span class="function"><span class="keyword">void</span> <span class="title">fill</span><span class="params">()</span></span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//红色</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Red</span> <span class="keyword">implements</span> <span class="title">Color</span> </span>&#123;</span><br><span class="line">   <span class="meta">@Override</span></span><br><span class="line">   <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">fill</span><span class="params">()</span> </span>&#123;</span><br><span class="line">      System.out.println(<span class="string">"涂红"</span>);</span><br><span class="line">   &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//绿色</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Green</span> <span class="keyword">implements</span> <span class="title">Color</span> </span>&#123;</span><br><span class="line">   <span class="meta">@Override</span></span><br><span class="line">   <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">fill</span><span class="params">()</span> </span>&#123;</span><br><span class="line">      System.out.println(<span class="string">"涂绿"</span>);</span><br><span class="line">   &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//抽象工厂</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="class"><span class="keyword">class</span> <span class="title">AbstractFactory</span> </span>&#123;</span><br><span class="line">   <span class="function"><span class="keyword">public</span> <span class="keyword">abstract</span> Color <span class="title">getColor</span><span class="params">(String color)</span></span>;</span><br><span class="line">   <span class="function"><span class="keyword">public</span> <span class="keyword">abstract</span> Shape <span class="title">getShape</span><span class="params">(String shape)</span> </span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//形状工厂</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ShapeFactory</span> <span class="keyword">extends</span> <span class="title">AbstractFactory</span> </span>&#123;</span><br><span class="line">   <span class="meta">@Override</span></span><br><span class="line">   <span class="function"><span class="keyword">public</span> Shape <span class="title">getShape</span><span class="params">(String shapeType)</span></span>&#123;</span><br><span class="line">      <span class="keyword">if</span>(shapeType == <span class="keyword">null</span>)&#123;</span><br><span class="line">         <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">      &#125;        </span><br><span class="line">      <span class="keyword">if</span>(shapeType.equalsIgnoreCase(<span class="string">"CIRCLE"</span>))&#123;</span><br><span class="line">         <span class="keyword">return</span> <span class="keyword">new</span> Circle();</span><br><span class="line">      &#125; <span class="keyword">else</span> <span class="keyword">if</span>(shapeType.equalsIgnoreCase(<span class="string">"SQUARE"</span>))&#123;</span><br><span class="line">         <span class="keyword">return</span> <span class="keyword">new</span> Square();</span><br><span class="line">      &#125;</span><br><span class="line">      <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">   &#125;</span><br><span class="line">   </span><br><span class="line">   <span class="meta">@Override</span></span><br><span class="line">   <span class="function"><span class="keyword">public</span> Color <span class="title">getColor</span><span class="params">(String color)</span> </span>&#123;</span><br><span class="line">      <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">   &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//颜色工厂</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ColorFactory</span> <span class="keyword">extends</span> <span class="title">AbstractFactory</span> </span>&#123;</span><br><span class="line">   <span class="meta">@Override</span></span><br><span class="line">   <span class="function"><span class="keyword">public</span> Shape <span class="title">getShape</span><span class="params">(String shapeType)</span></span>&#123;</span><br><span class="line">      <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">   &#125;</span><br><span class="line">   </span><br><span class="line">   <span class="meta">@Override</span></span><br><span class="line">   <span class="function"><span class="keyword">public</span> Color <span class="title">getColor</span><span class="params">(String color)</span> </span>&#123;</span><br><span class="line">      <span class="keyword">if</span>(color == <span class="keyword">null</span>)&#123;</span><br><span class="line">         <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">      &#125;        </span><br><span class="line">      <span class="keyword">if</span>(color.equalsIgnoreCase(<span class="string">"RED"</span>))&#123;</span><br><span class="line">         <span class="keyword">return</span> <span class="keyword">new</span> Red();</span><br><span class="line">      &#125; <span class="keyword">else</span> <span class="keyword">if</span>(color.equalsIgnoreCase(<span class="string">"GREEN"</span>))&#123;</span><br><span class="line">         <span class="keyword">return</span> <span class="keyword">new</span> Green();</span><br><span class="line">      &#125;</span><br><span class="line">      <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">   &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//工厂生产器</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">FactoryProducer</span> </span>&#123;</span><br><span class="line">   <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> AbstractFactory <span class="title">getFactory</span><span class="params">(String choice)</span></span>&#123;</span><br><span class="line">      <span class="keyword">if</span>(choice.equalsIgnoreCase(<span class="string">"SHAPE"</span>))&#123;</span><br><span class="line">         <span class="keyword">return</span> <span class="keyword">new</span> ShapeFactory();</span><br><span class="line">      &#125; <span class="keyword">else</span> <span class="keyword">if</span>(choice.equalsIgnoreCase(<span class="string">"COLOR"</span>))&#123;</span><br><span class="line">         <span class="keyword">return</span> <span class="keyword">new</span> ColorFactory();</span><br><span class="line">      &#125;</span><br><span class="line">      <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">   &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//使用示例</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Demo</span> </span>&#123;</span><br><span class="line">   <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">      <span class="comment">//获取形状工厂</span></span><br><span class="line">      AbstractFactory shapeFactory = FactoryProducer.getFactory(<span class="string">"SHAPE"</span>);</span><br><span class="line"> </span><br><span class="line">      <span class="comment">//获取形状为 Circle 的对象</span></span><br><span class="line">      Shape shape1 = shapeFactory.getShape(<span class="string">"CIRCLE"</span>);</span><br><span class="line">      shape1.draw();</span><br><span class="line">      </span><br><span class="line">      <span class="comment">//获取形状为 Square 的对象</span></span><br><span class="line">      Shape shape2 = shapeFactory.getShape(<span class="string">"SQUARE"</span>);</span><br><span class="line">      shape2.draw();</span><br><span class="line"> </span><br><span class="line">      <span class="comment">//获取颜色工厂</span></span><br><span class="line">      AbstractFactory colorFactory = FactoryProducer.getFactory(<span class="string">"COLOR"</span>);</span><br><span class="line"> </span><br><span class="line">      <span class="comment">//获取颜色为 Red 的对象</span></span><br><span class="line">      Color color1 = colorFactory.getColor(<span class="string">"RED"</span>);</span><br><span class="line">      color1.fill();</span><br><span class="line"> </span><br><span class="line">      <span class="comment">//获取颜色为 Green 的对象</span></span><br><span class="line">      Color color2 = colorFactory.getColor(<span class="string">"GREEN"</span>);</span><br><span class="line">      color2.fill();</span><br><span class="line">   &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div></li></ul>]]></content>
      
      
      <categories>
          
          <category> 设计模式 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Java </tag>
            
            <tag> 设计模式 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>【置顶】代码详解设计模式汇总</title>
      <link href="/2018/12/28/%E4%BB%A3%E7%A0%81%E8%AF%A6%E8%A7%A3%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F%E6%B1%87%E6%80%BB/"/>
      <url>/2018/12/28/%E4%BB%A3%E7%A0%81%E8%AF%A6%E8%A7%A3%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F%E6%B1%87%E6%80%BB/</url>
      
        <content type="html"><![CDATA[<blockquote><p>从今天开始，小博将撰写设计模式系列博客</p></blockquote><a id="more"></a><h1 id="小博Spring-Boot快速入门GitChat"><a href="#小博Spring-Boot快速入门GitChat" class="headerlink" title="小博Spring Boot快速入门GitChat"></a>小博Spring Boot快速入门GitChat</h1><p><a href="https://gitbook.cn/gitchat/activity/5a444c451f6ee91a25846ac1" target="_blank" rel="noopener">https://gitbook.cn/gitchat/activity/5a444c451f6ee91a25846ac1</a></p><h1 id="小博代码详解设计模式"><a href="#小博代码详解设计模式" class="headerlink" title="小博代码详解设计模式"></a>小博代码详解设计模式</h1><table><thead><tr><th>篇章</th><th>博客地址</th></tr></thead><tbody><tr><td>简单工厂模式</td><td><a href="http://zhangchong.xin/2018/12/28/%E4%BB%A3%E7%A0%81%E8%AF%A6%E8%A7%A3%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F--%E7%AE%80%E5%8D%95%E5%B7%A5%E5%8E%82%E6%A8%A1%E5%BC%8F/">点击跳转</a></td></tr><tr><td>抽象工厂模式</td><td><a href="http://zhangchong.xin/2019/01/04/%E4%BB%A3%E7%A0%81%E8%AF%A6%E8%A7%A3%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F--%E6%8A%BD%E8%B1%A1%E5%B7%A5%E5%8E%82%E6%A8%A1%E5%BC%8F/">点击跳转</a></td></tr><tr><td>单例模式</td><td><a href="http://zhangchong.xin/2019/01/04/%E4%BB%A3%E7%A0%81%E8%AF%A6%E8%A7%A3%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F--%E5%8D%95%E4%BE%8B%E6%A8%A1%E5%BC%8F/">点击跳转</a></td></tr><tr><td>代理模式</td><td><a href="http://zhangchong.xin/2019/01/04/%E4%BB%A3%E7%A0%81%E8%AF%A6%E8%A7%A3%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F--%E4%BB%A3%E7%90%86%E6%A8%A1%E5%BC%8F/">点击跳转</a></td></tr><tr><td>模板模式</td><td><a href="http://zhangchong.xin/2019/01/04/%E4%BB%A3%E7%A0%81%E8%AF%A6%E8%A7%A3%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F--%E6%A8%A1%E6%9D%BF%E6%A8%A1%E5%BC%8F/">点击跳转</a></td></tr><tr><td>策略模式</td><td><a href="http://zhangchong.xin/2019/02/12/%E4%BB%A3%E7%A0%81%E8%AF%A6%E8%A7%A3%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F--%E7%AD%96%E7%95%A5%E6%A8%A1%E5%BC%8F/">点击跳转</a></td></tr><tr><td>适配器模式</td><td><a href="http://zhangchong.xin/2019/02/12/%E4%BB%A3%E7%A0%81%E8%AF%A6%E8%A7%A3%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F--%E9%80%82%E9%85%8D%E5%99%A8%E6%A8%A1%E5%BC%8F/">点击跳转</a></td></tr><tr><td>过滤器模式</td><td><a href="http://zhangchong.xin/2019/02/12/%E4%BB%A3%E7%A0%81%E8%AF%A6%E8%A7%A3%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F--%E8%BF%87%E6%BB%A4%E5%99%A8%E6%A8%A1%E5%BC%8F/">点击跳转</a></td></tr><tr><td>装饰器模式</td><td><a href="http://zhangchong.xin/2019/02/12/%E4%BB%A3%E7%A0%81%E8%AF%A6%E8%A7%A3%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F--%E8%A3%85%E9%A5%B0%E5%99%A8%E6%A8%A1%E5%BC%8F/">点击跳转</a></td></tr><tr><td>观察者模式</td><td><a href="http://zhangchong.xin/2019/03/01/%E4%BB%A3%E7%A0%81%E8%AF%A6%E8%A7%A3%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F--%E8%A7%82%E5%AF%9F%E8%80%85%E6%A8%A1%E5%BC%8F/">点击跳转</a></td></tr><tr><td>建造者模式</td><td><a href="http://zhangchong.xin/2019/03/01/%E4%BB%A3%E7%A0%81%E8%AF%A6%E8%A7%A3%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F--%E5%BB%BA%E9%80%A0%E8%80%85%E6%A8%A1%E5%BC%8F/">点击跳转</a></td></tr><tr><td>中介者模式</td><td><a href="http://zhangchong.xin/2019/03/01/%E4%BB%A3%E7%A0%81%E8%AF%A6%E8%A7%A3%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F--%E4%B8%AD%E4%BB%8B%E8%80%85%E6%A8%A1%E5%BC%8F/">点击跳转</a></td></tr><tr><td>责任链模式</td><td><a href="http://zhangchong.xin/2019/03/01/%E4%BB%A3%E7%A0%81%E8%AF%A6%E8%A7%A3%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F--%E8%B4%A3%E4%BB%BB%E9%93%BE%E6%A8%A1%E5%BC%8F/">点击跳转</a></td></tr></tbody></table>]]></content>
      
      
      <categories>
          
          <category> 设计模式 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Java </tag>
            
            <tag> 设计模式 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>简单工厂模式</title>
      <link href="/2018/12/28/%E4%BB%A3%E7%A0%81%E8%AF%A6%E8%A7%A3%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F--%E7%AE%80%E5%8D%95%E5%B7%A5%E5%8E%82%E6%A8%A1%E5%BC%8F/"/>
      <url>/2018/12/28/%E4%BB%A3%E7%A0%81%E8%AF%A6%E8%A7%A3%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F--%E7%AE%80%E5%8D%95%E5%B7%A5%E5%8E%82%E6%A8%A1%E5%BC%8F/</url>
      
        <content type="html"><![CDATA[<blockquote><p>实例：创建一个<kbd>形状</kbd>接口和实现该接口的<kbd>圆形</kbd>和<kbd>方形</kbd>，然后定义<kbd>形状工厂</kbd>。Demo演示类使用工厂来获取不同的形状对象。</p></blockquote><a id="more"></a><ul><li>优点： </li></ul><ol><li>屏蔽产品的具体实现，调用者只关心产品的接口。</li><li>扩展性高，如果想增加一个产品，只要扩展一个工厂类就可以。 </li></ol><ul><li>缺点：</li></ul><ol><li>每增加一个形状，都需要增加一个具体类和工厂的 if / else 分支。</li><li>在一定程度上增加了系统的复杂度，同时也增加了系统具体类的依赖。</li></ol><p><img src="https://raw.githubusercontent.com/chung567115/chung567115.github.io/hexo-blog/blog-img/简单工厂模式.png" alt="UML"><br><div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="false"data-rel="JAVA"><figure class="iseeu highlight /java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//形状</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">Shape</span> </span>&#123;</span><br><span class="line">   <span class="function"><span class="keyword">void</span> <span class="title">draw</span><span class="params">()</span></span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//圆形</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Circle</span> <span class="keyword">implements</span> <span class="title">Shape</span> </span>&#123;</span><br><span class="line">   <span class="meta">@Override</span></span><br><span class="line">   <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">draw</span><span class="params">()</span> </span>&#123;</span><br><span class="line">      System.out.println(<span class="string">"画圆"</span>);</span><br><span class="line">   &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//方形</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Square</span> <span class="keyword">implements</span> <span class="title">Shape</span> </span>&#123;</span><br><span class="line">   <span class="meta">@Override</span></span><br><span class="line">   <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">draw</span><span class="params">()</span> </span>&#123;</span><br><span class="line">      System.out.println(<span class="string">"画方"</span>);</span><br><span class="line">   &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 简单工厂</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ShapeFactory</span> </span>&#123;</span><br><span class="line">   <span class="comment">//使用 getShape 方法获取形状类型的对象</span></span><br><span class="line">   <span class="function"><span class="keyword">public</span> Shape <span class="title">getShape</span><span class="params">(String shapeType)</span></span>&#123;</span><br><span class="line">      <span class="keyword">if</span>(shapeType == <span class="keyword">null</span>)&#123;</span><br><span class="line">         <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">      &#125;        </span><br><span class="line">      <span class="keyword">if</span>(shapeType.equalsIgnoreCase(<span class="string">"CIRCLE"</span>))&#123;</span><br><span class="line">         <span class="keyword">return</span> <span class="keyword">new</span> Circle();</span><br><span class="line">      &#125; <span class="keyword">else</span> <span class="keyword">if</span>(shapeType.equalsIgnoreCase(<span class="string">"SQUARE"</span>))&#123;</span><br><span class="line">         <span class="keyword">return</span> <span class="keyword">new</span> Square();</span><br><span class="line">      &#125;</span><br><span class="line">      <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">   &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//使用示例</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Demo</span> </span>&#123;</span><br><span class="line">   <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">      ShapeFactory shapeFactory = <span class="keyword">new</span> ShapeFactory();</span><br><span class="line">       </span><br><span class="line">      <span class="comment">//获取 Circle 的对象，并调用它的 draw 方法</span></span><br><span class="line">      Shape shape1 = shapeFactory.getShape(<span class="string">"CIRCLE"</span>);</span><br><span class="line">      shape1.draw();</span><br><span class="line">       </span><br><span class="line">      <span class="comment">//获取 Square 的对象，并调用它的 draw 方法</span></span><br><span class="line">      Shape shape2 = shapeFactory.getShape(<span class="string">"SQUARE"</span>);</span><br><span class="line">      shape2.draw();</span><br><span class="line">   &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div></p>]]></content>
      
      
      <categories>
          
          <category> 设计模式 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Java </tag>
            
            <tag> 设计模式 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>【置顶】Spring Cloud学习纪要汇总</title>
      <link href="/2018/12/11/Spring%20Cloud%E5%AD%A6%E4%B9%A0%E7%BA%AA%E8%A6%81%E6%B1%87%E6%80%BB/"/>
      <url>/2018/12/11/Spring%20Cloud%E5%AD%A6%E4%B9%A0%E7%BA%AA%E8%A6%81%E6%B1%87%E6%80%BB/</url>
      
        <content type="html"><![CDATA[<blockquote><p>从今天开始，小博将撰写Spring Cloud系列博客</p></blockquote><a id="more"></a><h1 id="小博Spring-Boot快速入门GitChat"><a href="#小博Spring-Boot快速入门GitChat" class="headerlink" title="小博Spring Boot快速入门GitChat"></a>小博Spring Boot快速入门GitChat</h1><p><a href="https://gitbook.cn/gitchat/activity/5a444c451f6ee91a25846ac1" target="_blank" rel="noopener">https://gitbook.cn/gitchat/activity/5a444c451f6ee91a25846ac1</a></p><h1 id="小博Spring-Cloud学习纪要"><a href="#小博Spring-Cloud学习纪要" class="headerlink" title="小博Spring Cloud学习纪要"></a>小博Spring Cloud学习纪要</h1><table><thead><tr><th>篇章</th><th>博客地址</th></tr></thead><tbody><tr><td>Spring Cloud Eureka (服务治理)</td><td><a href="http://zhangchong.xin/2018/11/20/Spring%20Cloud%20%E5%AD%A6%E4%B9%A0%E7%BA%AA%E8%A6%81%E4%B8%80%EF%BC%9AEureka/">点击跳转</a>   </td></tr><tr><td>Spring Cloud Feign (服务通信)</td><td><a href="http://zhangchong.xin/2018/11/20/Spring%20Cloud%20%E5%AD%A6%E4%B9%A0%E7%BA%AA%E8%A6%81%E4%BA%8C%EF%BC%9AFeign/">点击跳转</a> </td></tr><tr><td>Spring Cloud Ribbon (负载均衡)</td><td><a href="http://zhangchong.xin/2018/11/20/Spring%20Cloud%20%E5%AD%A6%E4%B9%A0%E7%BA%AA%E8%A6%81%E4%B8%89%EF%BC%9ARibbon/">点击跳转</a>     </td></tr><tr><td>Spring Cloud Config (配置中心)</td><td><a href="http://zhangchong.xin/2018/11/22/Spring%20Cloud%20%E5%AD%A6%E4%B9%A0%E7%BA%AA%E8%A6%81%E5%9B%9B%EF%BC%9AConfig/">点击跳转</a>    </td></tr><tr><td>Spring Cloud Bus (消息总线)</td><td><a href="http://zhangchong.xin/2018/11/24/Spring%20Cloud%20%E5%AD%A6%E4%B9%A0%E7%BA%AA%E8%A6%81%E4%BA%94%EF%BC%9ABus/">点击跳转</a>   </td></tr><tr><td>Spring Cloud Stream (消息驱动)</td><td><a href="http://zhangchong.xin/2018/11/24/Spring%20Cloud%20%E5%AD%A6%E4%B9%A0%E7%BA%AA%E8%A6%81%E5%85%AD%EF%BC%9AStream/">点击跳转</a>   </td></tr><tr><td>Spring Cloud Zuul (统一网关)</td><td><a href="http://zhangchong.xin/2018/11/25/Spring%20Cloud%20%E5%AD%A6%E4%B9%A0%E7%BA%AA%E8%A6%81%E4%B8%83%EF%BC%9AZuul/">点击跳转</a>   </td></tr><tr><td>Spring Cloud Hystrix (熔断降级)</td><td><a href="http://zhangchong.xin/2018/11/26/Spring%20Cloud%20%E5%AD%A6%E4%B9%A0%E7%BA%AA%E8%A6%81%E5%85%AB%EF%BC%9AHystrix/">点击跳转</a>     </td></tr><tr><td>Spring Cloud Sleuth (链路跟踪)</td><td><a href="http://zhangchong.xin/2018/11/26/Spring%20Cloud%20%E5%AD%A6%E4%B9%A0%E7%BA%AA%E8%A6%81%E4%B9%9D%EF%BC%9ASleuth/">点击跳转</a>    </td></tr></tbody></table>]]></content>
      
      
      <categories>
          
          <category> Spring Cloud </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Java </tag>
            
            <tag> 微服务 </tag>
            
            <tag> Spring Cloud </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Spring Cloud Sleuth</title>
      <link href="/2018/11/26/Spring%20Cloud%20%E5%AD%A6%E4%B9%A0%E7%BA%AA%E8%A6%81%E4%B9%9D%EF%BC%9ASleuth/"/>
      <url>/2018/11/26/Spring%20Cloud%20%E5%AD%A6%E4%B9%A0%E7%BA%AA%E8%A6%81%E4%B9%9D%EF%BC%9ASleuth/</url>
      
        <content type="html"><![CDATA[<blockquote><p><kbd>Spring Cloud Sleuth</kbd>链路跟踪组件是一种分布式追踪解决方案，它兼容Zipkin。微服务架构由于服务单元数量众多、调用关系杂乱、业务复杂，如果出现了错误和异常很难去定位，所以微服务架构中，必须实现分布式链路追踪，去跟进一个请求到底有哪些服务参与，参与的顺序又是怎样的，让每个请求步骤直观可见，而 Sleuth + Zipkin 便可以帮助我们做到这样的事情。</p></blockquote><a id="more"></a><table><thead><tr><th>开发环境</th><th>版本</th></tr></thead><tbody><tr><td>IDEA</td><td>2018.2.6</td></tr><tr><td>JDK</td><td>1.8</td></tr><tr><td>Spring Boot</td><td>2.0.6</td></tr><tr><td>Spring Cloud</td><td>Finchley.SR2</td></tr><tr><td>Docker</td><td>18.09.0</td></tr><tr><td>Zipkin</td><td>–</td></tr></tbody></table><blockquote><p><strong>特别注意</strong>：本系列纪要环环相扣，建议从第一节开始阅读&emsp;<a href="http://zhangchong.xin/2018/11/20/Spring%20Cloud%20%E5%AD%A6%E4%B9%A0%E7%BA%AA%E8%A6%81%E4%B8%80%EF%BC%9AEureka/">点击跳转</a></p></blockquote><h1 id="Zipkin-容器搭建"><a href="#Zipkin-容器搭建" class="headerlink" title="Zipkin 容器搭建"></a>Zipkin 容器搭建</h1><div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="false"data-rel="PLAIN"><figure class="iseeu highlight /plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker run -d -p 9411:9411 openzipkin/zipkin</span><br></pre></td></tr></table></figure></div><p>&emsp;&emsp;Docker下执行一个命令就能运行Zipkin容器，具体视个人PC情况而定，开启服务后访问<a href="http://localhost:9411/zipkin/" target="_blank" rel="noopener">http://localhost:9411/zipkin/</a>可以看到如下界面。<br><img src="https://raw.githubusercontent.com/chung567115/chung567115.github.io/hexo-blog/blog-img/spring-cloud-9-1.png" alt="Zipkin"></p><h1 id="依赖添加"><a href="#依赖添加" class="headerlink" title="依赖添加"></a>依赖添加</h1><p>&emsp;&emsp;provider项目和consumer项目添加如下Maven依赖，<strong>特别注意：</strong>，因为我这边一直下载不到2.0.2的包，不知道是不是我的IDE的问题，将版本改为<kbd>2.1.0.M2</kbd>。<br><div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="false"data-rel="XML"><figure class="iseeu highlight /xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.cloud<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-cloud-starter-zipkin<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.1.0.M2<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure></div></p><h1 id="配置文件修改"><a href="#配置文件修改" class="headerlink" title="配置文件修改"></a>配置文件修改</h1><p>&emsp;&emsp;provider项目和consumer项目添加如下配置：<br><div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="false"data-rel="YML"><figure class="iseeu highlight /yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">spring:</span></span><br><span class="line"><span class="attr">  zipkin:</span></span><br><span class="line"><span class="attr">    base-url:</span> <span class="attr">http://localhost:9411/</span></span><br><span class="line"><span class="attr">    sender:</span></span><br><span class="line"><span class="attr">      type:</span> <span class="string">web</span></span><br><span class="line"><span class="attr">  sleuth:</span></span><br><span class="line"><span class="attr">    sampler:</span></span><br><span class="line"><span class="attr">      probability:</span> <span class="number">1</span></span><br><span class="line"><span class="attr">logging:</span></span><br><span class="line"><span class="attr">  level:</span></span><br><span class="line">    <span class="string">org.springframework.cloud.openfeign:</span> <span class="string">debug</span></span><br></pre></td></tr></table></figure></div></p><h1 id="链路跟踪测试"><a href="#链路跟踪测试" class="headerlink" title="链路跟踪测试"></a>链路跟踪测试</h1><p>&emsp;&emsp;访问consumer的接口<a href="http://localhost:8091/hello/consume?num=1" target="_blank" rel="noopener">http://localhost:8091/hello/consume?num=1</a>，发现consumer项目控制台会打印如下日志，注意<code>cde8ad1de4f90441</code>。<br><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">2018-11-26 21:26:23.946  INFO [consumer,cde8ad1de4f90441,e3c14617dff44d76,true] 12488 --- [trix-provider-1] s.c.a.AnnotationConfigApplicationContext : Refreshing SpringClientFactory-provider: startup date [Mon Nov 26 21:26:23 CST 2018]; parent: org.springframework.boot.web.servlet.context.AnnotationConfigServletWebServerApplicationContext@777d0bc3</span><br><span class="line">2018-11-26 21:26:24.009  INFO [consumer,cde8ad1de4f90441,e3c14617dff44d76,true] 12488 --- [trix-provider-1] f.a.AutowiredAnnotationBeanPostProcessor : JSR-330 'javax.inject.Inject' annotation found and supported for autowiring</span><br><span class="line">2018-11-26 21:26:24.236  INFO [consumer,cde8ad1de4f90441,e3c14617dff44d76,true] 12488 --- [trix-provider-1] c.netflix.config.ChainedDynamicProperty  : Flipping property: provider.ribbon.ActiveConnectionsLimit to use NEXT property: niws.loadbalancer.availabilityFilteringRule.activeConnectionsLimit = 2147483647</span><br><span class="line">2018-11-26 21:26:24.254  INFO [consumer,cde8ad1de4f90441,e3c14617dff44d76,true] 12488 --- [trix-provider-1] c.n.u.concurrent.ShutdownEnabledTimer    : Shutdown hook installed for: NFLoadBalancer-PingTimer-provider</span><br><span class="line">2018-11-26 21:26:24.279  INFO [consumer,cde8ad1de4f90441,e3c14617dff44d76,true] 12488 --- [trix-provider-1] c.netflix.loadbalancer.BaseLoadBalancer  : Client: provider instantiated a LoadBalancer: DynamicServerListLoadBalancer:&#123;NFLoadBalancer:name=provider,current list of Servers=[],Load balancer stats=Zone stats: &#123;&#125;,Server stats: []&#125;ServerList:null</span><br><span class="line">2018-11-26 21:26:24.284  INFO [consumer,cde8ad1de4f90441,e3c14617dff44d76,true] 12488 --- [trix-provider-1] c.n.l.DynamicServerListLoadBalancer      : Using serverListUpdater PollingServerListUpdater</span><br><span class="line">2018-11-26 21:26:24.313  INFO [consumer,cde8ad1de4f90441,e3c14617dff44d76,true] 12488 --- [trix-provider-1] c.netflix.config.ChainedDynamicProperty  : Flipping property: provider.ribbon.ActiveConnectionsLimit to use NEXT property: niws.loadbalancer.availabilityFilteringRule.activeConnectionsLimit = 2147483647</span><br><span class="line">2018-11-26 21:26:24.315  INFO [consumer,cde8ad1de4f90441,e3c14617dff44d76,true] 12488 --- [trix-provider-1] c.n.l.DynamicServerListLoadBalancer      : DynamicServerListLoadBalancer for client provider initialized: DynamicServerListLoadBalancer:&#123;NFLoadBalancer:name=provider,current list of Servers=[192.168.99.1:8081],Load balancer stats=Zone stats: &#123;defaultzone=[Zone:defaultzone;Instance count:1;Active connections count: 0;Circuit breaker tripped count: 0;Active connections per server: 0.0;]</span><br><span class="line">&#125;,Server stats: [[Server:192.168.99.1:8081;Zone:defaultZone;Total Requests:0;Successive connection failure:0;Total blackout seconds:0;Last connection made:Thu Jan 01 08:00:00 CST 1970;First connection made: Thu Jan 01 08:00:00 CST 1970;Active Connections:0;total failure count in last (1000) msecs:0;average resp time:0.0;90 percentile resp time:0.0;95 percentile resp time:0.0;min resp time:0.0;max resp time:0.0;stddev resp time:0.0]</span><br><span class="line">]&#125;ServerList:org.springframework.cloud.netflix.ribbon.eureka.DomainExtractingServerList@7900120d</span><br></pre></td></tr></table></figure></p><p>&emsp;&emsp;访问Zipkin页面，查询consumer项目的调用链：<br><img src="https://raw.githubusercontent.com/chung567115/chung567115.github.io/hexo-blog/blog-img/spring-cloud-9-2.png" alt="1"><br>&emsp;&emsp;点击某一行即可查看该调用的详细信息，包括其traceId<code>cde8ad1de4f90441</code>。<br><img src="https://raw.githubusercontent.com/chung567115/chung567115.github.io/hexo-blog/blog-img/spring-cloud-9-3.png" alt="2"></p><h1 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h1><p>&emsp;&emsp;至此《Spring Cloud 学习纪要》系列博客就结束了，本系列博客介绍了包含服务治理组件Eureka、服务通信组件Feign、负载均衡组件Ribbon、配置中心组件Config、消息总线组件Bus、消息驱动组件Stream、统一网关组件Zuul、熔断降级组件Hystrix、链路跟踪组件Sleuth，此系列博客只适合入门小白，是一套极简教程，更多知识待您亲自探索。</p><table><thead><tr><th>组件</th><th>功能</th><th>同类框架</th></tr></thead><tbody><tr><td>Spring Cloud Eureka</td><td>服务治理</td><td>ZooKeeper、Consul</td></tr><tr><td>Spring Cloud Feign</td><td>服务通信</td><td>Retrofit、OKHttp、HttpClient</td></tr><tr><td>Spring Cloud Ribbon</td><td>负载均衡</td><td>Nginx</td></tr><tr><td>Spring Cloud Config</td><td>配置中心</td><td>Consul</td></tr><tr><td>Spring Cloud Bus</td><td>消息总线</td><td></td></tr><tr><td>Spring Cloud Stream</td><td>消息驱动</td><td></td></tr><tr><td>Spring Cloud Zuul</td><td>统一网关</td><td>Janus、Spring Cloud Gateway</td></tr><tr><td>Spring Cloud Hystrix</td><td>熔断降级</td><td></td></tr><tr><td>Spring Cloud Sleuth</td><td>链路跟踪</td><td>Zipkin、Pinpoint</td></tr></tbody></table><p><kbd><strong>附件</strong></kbd></p><blockquote><p>本系列纪要博客源码：<a href="https://github.com/chung567115/SpringCloud" target="_blank" rel="noopener">跳转到github</a><br>本系列纪要博客配置文件：<a href="https://github.com/chung567115/SpringCloudConfig" target="_blank" rel="noopener">跳转到github</a></p></blockquote>]]></content>
      
      
      <categories>
          
          <category> Spring Cloud </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Java </tag>
            
            <tag> 微服务 </tag>
            
            <tag> Spring Cloud </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Spring Cloud Hystrix</title>
      <link href="/2018/11/26/Spring%20Cloud%20%E5%AD%A6%E4%B9%A0%E7%BA%AA%E8%A6%81%E5%85%AB%EF%BC%9AHystrix/"/>
      <url>/2018/11/26/Spring%20Cloud%20%E5%AD%A6%E4%B9%A0%E7%BA%AA%E8%A6%81%E5%85%AB%EF%BC%9AHystrix/</url>
      
        <content type="html"><![CDATA[<blockquote><p><kbd>Spring Cloud Hystrix</kbd>熔断降级组件是Netflix开源的一个延迟和容错库，用于隔离访问远程系统、服务或第三方库，防止级联失败，从而提高系统的可用性与容错性。</p></blockquote><a id="more"></a><table><thead><tr><th>开发环境</th><th>版本</th></tr></thead><tbody><tr><td>IDEA</td><td>2018.2.6</td></tr><tr><td>JDK</td><td>1.8</td></tr><tr><td>Spring Boot</td><td>2.0.6</td></tr><tr><td>Spring Cloud</td><td>Finchley.SR2</td></tr></tbody></table><blockquote><p><strong>特别注意</strong>：本系列纪要环环相扣，建议从第一节开始阅读&emsp;<a href="http://zhangchong.xin/2018/11/20/Spring%20Cloud%20%E5%AD%A6%E4%B9%A0%E7%BA%AA%E8%A6%81%E4%B8%80%EF%BC%9AEureka/">点击跳转</a></p></blockquote><h1 id="consumer项目添加依赖"><a href="#consumer项目添加依赖" class="headerlink" title="consumer项目添加依赖"></a>consumer项目添加依赖</h1><div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="false"data-rel="XML"><figure class="iseeu highlight /xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.cloud<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-cloud-starter-netflix-hystrix<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.cloud<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-cloud-starter-netflix-hystrix-dashboard<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure></div><h1 id="consumer项目添加配置"><a href="#consumer项目添加配置" class="headerlink" title="consumer项目添加配置"></a>consumer项目添加配置</h1><div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="false"data-rel="YML"><figure class="iseeu highlight /yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">feign:</span></span><br><span class="line"><span class="attr">  client:</span></span><br><span class="line"><span class="attr">    config:</span></span><br><span class="line"><span class="attr">      default:</span> <span class="comment">#服务名，default为所有服务</span></span><br><span class="line"><span class="attr">        connectTimeout:</span> <span class="number">3000</span></span><br><span class="line"><span class="attr">        readTimeout:</span> <span class="number">5000</span></span><br><span class="line"><span class="attr">  hystrix:</span></span><br><span class="line"><span class="attr">    enabled:</span> <span class="literal">true</span> <span class="comment">#开启Feign熔断器</span></span><br><span class="line"></span><br><span class="line"><span class="attr">hystrix:</span></span><br><span class="line"><span class="attr">  command:</span></span><br><span class="line"><span class="attr">    default:</span></span><br><span class="line"><span class="attr">      execution:</span></span><br><span class="line"><span class="attr">        isolation:</span></span><br><span class="line"><span class="attr">          thread:</span></span><br><span class="line"><span class="attr">            timeoutInMilliseconds:</span> <span class="number">10000</span></span><br><span class="line"><span class="attr">    hello:</span> <span class="comment">#方法名，default为所有方法</span></span><br><span class="line"><span class="attr">      execution:</span></span><br><span class="line"><span class="attr">        timeout:</span></span><br><span class="line"><span class="attr">          enable:</span> <span class="literal">true</span></span><br><span class="line"><span class="attr">        isolation:</span></span><br><span class="line"><span class="attr">          thread:</span></span><br><span class="line"><span class="attr">            timeoutInMilliseconds:</span> <span class="number">10000</span></span><br><span class="line"><span class="attr">      circuitBreaker:</span></span><br><span class="line"><span class="attr">        enabled:</span> <span class="literal">true</span></span><br><span class="line"><span class="attr">        requestVolumeThreshold:</span> <span class="number">10</span></span><br><span class="line"><span class="attr">        sleepWindowInMilliseconds:</span> <span class="number">10000</span></span><br><span class="line"><span class="attr">        errorThresholdPercentage:</span> <span class="number">50</span></span><br><span class="line"><span class="attr">management:</span></span><br><span class="line"><span class="attr">  endpoints:</span></span><br><span class="line"><span class="attr">    web:</span></span><br><span class="line"><span class="attr">      exposure:</span></span><br><span class="line"><span class="attr">        include:</span> <span class="string">"*"</span></span><br></pre></td></tr></table></figure></div><h1 id="consumer项目修改代码"><a href="#consumer项目修改代码" class="headerlink" title="consumer项目修改代码"></a>consumer项目修改代码</h1><p>&emsp;&emsp;通过<kbd>@EnableCircuitBreaker</kbd>开启服务容错功能，通过<kbd>@EnableHystrixDashboard</kbd>开启服务容错大盘，实际上，被注释的三行可以通过<kbd>@SpringCloudApplication</kbd>来代替。<br><div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="false"data-rel="JAVA"><figure class="iseeu highlight /java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//@SpringBootApplication</span></span><br><span class="line"><span class="comment">//@EnableEurekaClient</span></span><br><span class="line"><span class="comment">//@EnableCircuitBreaker</span></span><br><span class="line"><span class="meta">@SpringCloudApplication</span></span><br><span class="line"><span class="meta">@EnableFeignClients</span></span><br><span class="line"><span class="meta">@EnableHystrixDashboard</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">FeignConsumerApplication</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        SpringApplication.run(FeignConsumerApplication.class, args);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div></p><p>&emsp;&emsp;通过<kbd>@HystrixCommand</kbd>注解来使用服务降级或服务熔断。provider项目正常运行时，访问<a href="http://localhost:8091/hello/consume?num=1" target="_blank" rel="noopener">http://localhost:8091/hello/consume?num=1</a>会得到正常返回值<code>Hello Chung By Provider on env:devDynamic and port:8081</code>，此即服务降级的现象。<br>&emsp;&emsp;停止provider项目的运行，再次访问<a href="http://localhost:8091/hello/consume?num=1" target="_blank" rel="noopener">http://localhost:8091/hello/consume?num=1</a>我们会得到<code>网络拥堵@Hystrix defaultFallback!</code>，访问<a href="http://localhost:8091/hello/consume?num=2" target="_blank" rel="noopener">http://localhost:8091/hello/consume?num=2</a>会得到<code>双数直接返回success</code>，此时我们再num=1页面不停按<kbd>F5</kbd>键刷新页面，保证刷新十次以上，此时立即访问<a href="http://localhost:8091/hello/consume?num=2" target="_blank" rel="noopener">http://localhost:8091/hello/consume?num=2</a>会发现居然得到了<code>网络拥堵@Hystrix defaultFallback!</code>，而等待几秒之后再刷新num=2页面却又能得到<code>双数直接返回success</code>，此即服务熔断的现象。<br><div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="false"data-rel="JAVA"><figure class="iseeu highlight /java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@RestController</span></span><br><span class="line"><span class="meta">@RequestMapping</span>(<span class="string">"hello"</span>)</span><br><span class="line"><span class="meta">@DefaultProperties</span>(defaultFallback = <span class="string">"defaultFallback"</span>)</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">HelloController</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> ProviderClient providerClient;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 降级</span></span><br><span class="line"><span class="comment">//    @HystrixCommand(</span></span><br><span class="line"><span class="comment">//            fallbackMethod = "helloFallback",</span></span><br><span class="line"><span class="comment">//            commandProperties = &#123;</span></span><br><span class="line"><span class="comment">//                    @HystrixProperty(name = "execution.isolation.thread.timeoutInMilliseconds", value = "3000")  //超时时间</span></span><br><span class="line"><span class="comment">//            &#125;</span></span><br><span class="line"><span class="comment">//    )</span></span><br><span class="line">    <span class="comment">// 熔断</span></span><br><span class="line"><span class="comment">//    @HystrixCommand(</span></span><br><span class="line"><span class="comment">//            fallbackMethod = "helloFallback",</span></span><br><span class="line"><span class="comment">//            commandProperties = &#123;</span></span><br><span class="line"><span class="comment">//                    @HystrixProperty(name = "circuitBreaker.enabled", value = "true"),                //开启熔断</span></span><br><span class="line"><span class="comment">//                    @HystrixProperty(name = "circuitBreaker.requestVolumeThreshold", value = "10"),    //请求数达到后才计算</span></span><br><span class="line"><span class="comment">//                    @HystrixProperty(name = "circuitBreaker.sleepWindowInMilliseconds", value = "10000"), //休眠时间窗</span></span><br><span class="line"><span class="comment">//                    @HystrixProperty(name = "circuitBreaker.errorThresholdPercentage", value = "50"),    //错误率</span></span><br><span class="line"><span class="comment">//            &#125;</span></span><br><span class="line"><span class="comment">//    )</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">// 搭配配置文件写法</span></span><br><span class="line">    <span class="meta">@HystrixCommand</span></span><br><span class="line">    <span class="meta">@GetMapping</span>(<span class="string">"/consume"</span>)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">hello</span><span class="params">(@RequestParam Integer num)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (num % <span class="number">2</span> == <span class="number">0</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="string">"双数直接返回success"</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> providerClient.hello();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> String <span class="title">helloFallback</span><span class="params">(Integer num)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">"网络拥堵@Hystrix helloFallback! "</span> + num;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> String <span class="title">defaultFallback</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">"网络拥堵@Hystrix defaultFallback!"</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div></p><blockquote><p>为了测试方便，我们需要将provider项目中的hello接口添加Thread.sleep(2000);</p></blockquote><h1 id="服务容错统计大盘"><a href="#服务容错统计大盘" class="headerlink" title="服务容错统计大盘"></a>服务容错统计大盘</h1><p>&emsp;&emsp;访问<a href="http://localhost:8091/hystrix" target="_blank" rel="noopener">http://localhost:8091/hystrix</a>，填写相关必要信息点击Monitor Stream按钮即可进入统计大盘，相关信息不再赘述。<br><img src="https://raw.githubusercontent.com/chung567115/chung567115.github.io/hexo-blog/blog-img/spring-cloud-8-1.png" alt="初始页面"></p><p><img src="https://raw.githubusercontent.com/chung567115/chung567115.github.io/hexo-blog/blog-img/spring-cloud-8-2.png" alt="统计页面"></p><p><kbd><strong>附件</strong></kbd></p><blockquote><p>本系列纪要博客源码：<a href="https://github.com/chung567115/SpringCloud" target="_blank" rel="noopener">跳转到github</a><br>本系列纪要博客配置文件：<a href="https://github.com/chung567115/SpringCloudConfig" target="_blank" rel="noopener">跳转到github</a></p></blockquote>]]></content>
      
      
      <categories>
          
          <category> Spring Cloud </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Java </tag>
            
            <tag> 微服务 </tag>
            
            <tag> Spring Cloud </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Spring Cloud Zuul</title>
      <link href="/2018/11/25/Spring%20Cloud%20%E5%AD%A6%E4%B9%A0%E7%BA%AA%E8%A6%81%E4%B8%83%EF%BC%9AZuul/"/>
      <url>/2018/11/25/Spring%20Cloud%20%E5%AD%A6%E4%B9%A0%E7%BA%AA%E8%A6%81%E4%B8%83%EF%BC%9AZuul/</url>
      
        <content type="html"><![CDATA[<blockquote><p><kbd>Spring Cloud Zuul</kbd>统一网关组件提供动态路由，监控，弹性，安全等边缘服务，将细粒度的服务组合起来提供一个粗粒度的服务，所有请求都导入一个统一的入口，那么整个系统只需要暴露一个服务，对外屏蔽服务端实现细节，这样也减少了客户端与服务器的网络调用次数，这就是api gateway，也是Zuul可以帮我们实现的功能。</p></blockquote><a id="more"></a><table><thead><tr><th>开发环境</th><th>版本</th></tr></thead><tbody><tr><td>IDEA</td><td>2018.2.6</td></tr><tr><td>JDK</td><td>1.8</td></tr><tr><td>Spring Boot</td><td>2.0.6</td></tr><tr><td>Spring Cloud</td><td>Finchley.SR2</td></tr></tbody></table><blockquote><p><strong>特别注意</strong>：本系列纪要环环相扣，建议从第一节开始阅读&emsp;<a href="http://zhangchong.xin/2018/11/20/Spring%20Cloud%20%E5%AD%A6%E4%B9%A0%E7%BA%AA%E8%A6%81%E4%B8%80%EF%BC%9AEureka/">点击跳转</a></p></blockquote><h1 id="路由"><a href="#路由" class="headerlink" title="路由"></a>路由</h1><h2 id="新建项目zuul"><a href="#新建项目zuul" class="headerlink" title="新建项目zuul"></a>新建项目zuul</h2><p>&emsp;&emsp;Maven依赖：<br><div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="false"data-rel="XML"><figure class="iseeu highlight /xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.cloud<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-cloud-starter-config<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.cloud<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-cloud-starter-netflix-eureka-client<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.cloud<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-cloud-starter-netflix-zuul<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-test<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">scope</span>&gt;</span>test<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></span><br></pre></td></tr></table></figure></div></p><p>&emsp;&emsp;配置文件（可以参照前几章内容将配置放到git仓库）：<br><div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="false"data-rel="YML"><figure class="iseeu highlight /yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">eureka:</span></span><br><span class="line"><span class="attr">  client:</span></span><br><span class="line"><span class="attr">    service-url:</span></span><br><span class="line"><span class="attr">      defaultZone:</span> <span class="attr">http://localhost:8761/eureka/,http://localhost:8762/eureka/</span></span><br><span class="line"><span class="attr">  instance:</span></span><br><span class="line"><span class="attr">    prefer-ip-address:</span> <span class="literal">true</span></span><br><span class="line"><span class="attr">    instance-id:</span> <span class="string">$&#123;spring.cloud.client.ip-address&#125;:$&#123;server.port&#125;</span></span><br><span class="line">    <span class="comment">#    hostname: ZuulName</span></span><br><span class="line"></span><br><span class="line"><span class="attr">spring:</span></span><br><span class="line"><span class="attr">  application:</span></span><br><span class="line"><span class="attr">    name:</span> <span class="string">zuul</span></span><br><span class="line"><span class="attr">  cloud:</span></span><br><span class="line"><span class="attr">    config:</span></span><br><span class="line"><span class="attr">      discovery:</span></span><br><span class="line"><span class="attr">        enabled:</span> <span class="literal">true</span></span><br><span class="line"><span class="attr">        service-id:</span> <span class="string">config</span></span><br><span class="line"><span class="attr">      profile:</span> <span class="string">dev</span></span><br></pre></td></tr></table></figure></div></p><p>&emsp;&emsp;启动类添加<kbd>@EnableZuulProxy</kbd>注解：<br><div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="false"data-rel="JAVA"><figure class="iseeu highlight /java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@SpringBootApplication</span></span><br><span class="line"><span class="meta">@EnableZuulProxy</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ZuulApplication</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        SpringApplication.run(ZuulApplication.class, args);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div></p><p>&emsp;&emsp;在前面几章的项目均已启动的前提下，将zuul项目VM options设置<kbd>-DServer.port=8061</kbd>，运行成功后访问<a href="http://localhost:8061/provider/hello/chung" target="_blank" rel="noopener">http://localhost:8061/provider/hello/chung</a>，发现zuul会自动将请求路由至provider服务。</p><blockquote><p>此路径中得到provider为serviceId</p></blockquote><h2 id="自定义路由"><a href="#自定义路由" class="headerlink" title="自定义路由"></a>自定义路由</h2><p>&emsp;&emsp;进行如下配置，运行成功后访问<a href="http://localhost:8061/myRoute/hello/chung" target="_blank" rel="noopener">http://localhost:8061/myRoute/hello/chung</a>，zuul也会自动将请求路由至provider服务。<br><div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="false"data-rel="YML"><figure class="iseeu highlight /yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">zuul:</span></span><br><span class="line"><span class="attr">  routes:</span></span><br><span class="line"><span class="attr">    provider:</span> <span class="string">/myRoute/**</span></span><br></pre></td></tr></table></figure></div></p><h1 id="PRE-TYPE-Zuul-Filter"><a href="#PRE-TYPE-Zuul-Filter" class="headerlink" title="PRE_TYPE Zuul Filter"></a>PRE_TYPE Zuul Filter</h1><p>&emsp;&emsp;前置过滤器可以实现限流、鉴权、参数校验等功能。</p><h2 id="鉴权、参数校验"><a href="#鉴权、参数校验" class="headerlink" title="鉴权、参数校验"></a>鉴权、参数校验</h2><div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="false"data-rel="JAVA"><figure class="iseeu highlight /java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">PreFilter</span> <span class="keyword">extends</span> <span class="title">ZuulFilter</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">filterType</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> PRE_TYPE;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">filterOrder</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> PRE_DECORATION_FILTER_ORDER - <span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">shouldFilter</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Object <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        RequestContext currentContext = RequestContext.getCurrentContext();</span><br><span class="line">        HttpServletRequest request = currentContext.getRequest();</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 鉴权</span></span><br><span class="line">        <span class="keyword">if</span> (<span class="string">"/provider/hello/send"</span>.equals(request.getRequestURI())) &#123;</span><br><span class="line">            <span class="keyword">if</span> (<span class="keyword">false</span>) &#123;</span><br><span class="line">                currentContext.setSendZuulResponse(<span class="keyword">false</span>);</span><br><span class="line">                currentContext.setResponseStatusCode(HttpStatus.SC_UNAUTHORIZED);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 参数校验</span></span><br><span class="line">        <span class="keyword">if</span> (StringUtils.isEmpty(request.getParameter(<span class="string">"token"</span>))) &#123;</span><br><span class="line">            currentContext.setSendZuulResponse(<span class="keyword">false</span>);</span><br><span class="line">            currentContext.setResponseStatusCode(HttpStatus.SC_UNAUTHORIZED);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div><h2 id="API限流"><a href="#API限流" class="headerlink" title="API限流"></a>API限流</h2><p>&emsp;&emsp;使用令牌桶算法，Google的RateLimiter工具。<br><div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="false"data-rel="JAVA"><figure class="iseeu highlight /java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">RateLimitFilter</span> <span class="keyword">extends</span> <span class="title">ZuulFilter</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> RateLimiter RATE_LIMITER = RateLimiter.create(<span class="number">100</span>);</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">filterType</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> PRE_TYPE;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">filterOrder</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> SERVLET_DETECTION_FILTER_ORDER - <span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">shouldFilter</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Object <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (!RATE_LIMITER.tryAcquire()) &#123;</span><br><span class="line">            RequestContext currentContext = RequestContext.getCurrentContext();</span><br><span class="line">            currentContext.setSendZuulResponse(<span class="keyword">false</span>);</span><br><span class="line">            currentContext.setResponseStatusCode(HttpStatus.SC_SERVICE_UNAVAILABLE);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div></p><h1 id="POST-TYPE-Zuul-Filter"><a href="#POST-TYPE-Zuul-Filter" class="headerlink" title="POST_TYPE Zuul Filter"></a>POST_TYPE Zuul Filter</h1><p>&emsp;&emsp;后置过滤器可以实现统计、日志记录等功能。<br><div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="false"data-rel="JAVA"><figure class="iseeu highlight /java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">PostFilter</span> <span class="keyword">extends</span> <span class="title">ZuulFilter</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">filterType</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> POST_TYPE;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">filterOrder</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> SEND_RESPONSE_FILTER_ORDER - <span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">shouldFilter</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Object <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        RequestContext currentContext = RequestContext.getCurrentContext();</span><br><span class="line">        HttpServletResponse response = currentContext.getResponse();</span><br><span class="line">        <span class="comment">/**Some Code**/</span></span><br><span class="line">        response.setHeader(<span class="string">"POST_HEADER"</span>, UUID.randomUUID().toString());</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div></p><p><kbd><strong>附件</strong></kbd></p><blockquote><p>本系列纪要博客源码：<a href="https://github.com/chung567115/SpringCloud" target="_blank" rel="noopener">跳转到github</a><br>本系列纪要博客配置文件：<a href="https://github.com/chung567115/SpringCloudConfig" target="_blank" rel="noopener">跳转到github</a></p></blockquote>]]></content>
      
      
      <categories>
          
          <category> Spring Cloud </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Java </tag>
            
            <tag> 微服务 </tag>
            
            <tag> Spring Cloud </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Spring Cloud Stream</title>
      <link href="/2018/11/24/Spring%20Cloud%20%E5%AD%A6%E4%B9%A0%E7%BA%AA%E8%A6%81%E5%85%AD%EF%BC%9AStream/"/>
      <url>/2018/11/24/Spring%20Cloud%20%E5%AD%A6%E4%B9%A0%E7%BA%AA%E8%A6%81%E5%85%AD%EF%BC%9AStream/</url>
      
        <content type="html"><![CDATA[<blockquote><p><kbd>Spring Cloud Stream</kbd>是一个构建消息驱动微服务的框架，应用程序通过 input 或者 output 来与<kbd>Spring Cloud Stream</kbd>中 binder 交互，而 binder 负责与消息中间件交互。</p></blockquote><a id="more"></a><table><thead><tr><th>开发环境</th><th>版本</th></tr></thead><tbody><tr><td>IDEA</td><td>2018.2.6</td></tr><tr><td>JDK</td><td>1.8</td></tr><tr><td>Spring Boot</td><td>2.0.6</td></tr><tr><td>Spring Cloud</td><td>Finchley.SR2</td></tr><tr><td>Docker</td><td>18.09.0</td></tr><tr><td>RabbitMQ</td><td>3.7.8-management</td></tr></tbody></table><blockquote><p><strong>特别注意</strong>：本系列纪要环环相扣，建议从第一节开始阅读&emsp;<a href="http://zhangchong.xin/2018/11/20/Spring%20Cloud%20%E5%AD%A6%E4%B9%A0%E7%BA%AA%E8%A6%81%E4%B8%80%EF%BC%9AEureka/">点击跳转</a></p></blockquote><h1 id="增加provider和consumer项目"><a href="#增加provider和consumer项目" class="headerlink" title="增加provider和consumer项目"></a>增加provider和consumer项目</h1><h2 id="添加依赖"><a href="#添加依赖" class="headerlink" title="添加依赖"></a>添加依赖</h2><div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="false"data-rel="XML"><figure class="iseeu highlight /xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.cloud<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-cloud-starter-stream-rabbit<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure></div><h2 id="添加RabbitMQ配置"><a href="#添加RabbitMQ配置" class="headerlink" title="添加RabbitMQ配置"></a>添加RabbitMQ配置</h2><div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="false"data-rel="YML"><figure class="iseeu highlight /yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">spring:</span></span><br><span class="line"><span class="attr">  rabbitmq:</span></span><br><span class="line"><span class="attr">    username:</span> <span class="string">guest</span></span><br><span class="line"><span class="attr">    password:</span> <span class="string">guest</span></span><br><span class="line"><span class="attr">    host:</span> <span class="string">localhost</span></span><br><span class="line"><span class="attr">    port:</span> <span class="number">5672</span></span><br></pre></td></tr></table></figure></div><h1 id="普通RabbitMQ使用方式"><a href="#普通RabbitMQ使用方式" class="headerlink" title="普通RabbitMQ使用方式"></a>普通RabbitMQ使用方式</h1><h2 id="provider生产消息"><a href="#provider生产消息" class="headerlink" title="provider生产消息"></a>provider生产消息</h2><div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="false"data-rel="JAVA"><figure class="iseeu highlight /java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@RestController</span></span><br><span class="line"><span class="meta">@RequestMapping</span>(<span class="string">"/hello"</span>)</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">HelloController</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> AmqpTemplate amqpTemplate;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@GetMapping</span>(<span class="string">"/send"</span>)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">sendMsg</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        amqpTemplate.convertAndSend(<span class="string">"myExchange"</span>, <span class="string">"myRoutingKey"</span>, <span class="string">"Hello MSG from provider"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div><h2 id="consumer消费消息"><a href="#consumer消费消息" class="headerlink" title="consumer消费消息"></a>consumer消费消息</h2><div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="false"data-rel="JAVA"><figure class="iseeu highlight /java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MQReceiver</span> </span>&#123;</span><br><span class="line">    <span class="meta">@RabbitListener</span>(bindings = <span class="meta">@QueueBinding</span>(</span><br><span class="line">            exchange = <span class="meta">@Exchange</span>(<span class="string">"myExchange"</span>),</span><br><span class="line">            key = <span class="string">"myRoutingKey"</span>,</span><br><span class="line">            value = <span class="meta">@Queue</span>(<span class="string">"myQueue"</span>)</span><br><span class="line">    ))</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">consume</span><span class="params">(String msg)</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"rabbit-"</span> + msg);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div><h1 id="Stream生产和消费消息"><a href="#Stream生产和消费消息" class="headerlink" title="Stream生产和消费消息"></a>Stream生产和消费消息</h1><h2 id="provider生产消息-1"><a href="#provider生产消息-1" class="headerlink" title="provider生产消息"></a>provider生产消息</h2><p>&emsp;&emsp;provider项目增加配置：<br><div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="false"data-rel="YML"><figure class="iseeu highlight /yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">spring:</span></span><br><span class="line"><span class="attr">  cloud:</span></span><br><span class="line"><span class="attr">    stream:</span></span><br><span class="line"><span class="attr">      bindings:</span></span><br><span class="line"><span class="attr">        output:</span></span><br><span class="line"><span class="attr">          group:</span> <span class="string">provider</span></span><br><span class="line"><span class="attr">          destination:</span> <span class="string">input</span></span><br><span class="line"><span class="attr">          content-type:</span> <span class="string">application/json</span></span><br></pre></td></tr></table></figure></div></p><p>&emsp;&emsp;provider项目生产消息：<br><div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="false"data-rel="JAVA"><figure class="iseeu highlight /java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@RestController</span></span><br><span class="line"><span class="meta">@RequestMapping</span>(<span class="string">"/hello"</span>)</span><br><span class="line"><span class="meta">@EnableBinding</span>(Source.class)</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">HelloController</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> Source source;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@GetMapping</span>(<span class="string">"/stream"</span>)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">stream</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        source.output().send(MessageBuilder.withPayload(<span class="string">"Stream Hello MSG from provider"</span>).build());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div></p><h2 id="consumer消费消息-1"><a href="#consumer消费消息-1" class="headerlink" title="consumer消费消息"></a>consumer消费消息</h2><p>&emsp;&emsp;consumer项目增加配置：<br><div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="false"data-rel="YML"><figure class="iseeu highlight /yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">spring:</span></span><br><span class="line"><span class="attr">  cloud:</span></span><br><span class="line"><span class="attr">    stream:</span></span><br><span class="line"><span class="attr">      bindings:</span></span><br><span class="line"><span class="attr">        input:</span></span><br><span class="line"><span class="attr">          group:</span> <span class="string">consumer</span></span><br><span class="line"><span class="attr">          destination:</span> <span class="string">input</span></span><br><span class="line"><span class="attr">          content-type:</span> <span class="string">application/json</span></span><br></pre></td></tr></table></figure></div></p><p>&emsp;&emsp;consumer项目消费消息：<br><div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="false"data-rel="JAVA"><figure class="iseeu highlight /java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="meta">@EnableBinding</span>(Sink.class)</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MQReceiver</span> </span>&#123;</span><br><span class="line">    <span class="meta">@StreamListener</span>(Sink.INPUT)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">input</span><span class="params">(Message&lt;String&gt; message)</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"stream："</span> + message.getPayload());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div></p><h1 id="写在后面"><a href="#写在后面" class="headerlink" title="写在后面"></a>写在后面</h1><p>&emsp;&emsp;不难发现，通过Stream可以极大简化消息队列的使用，不管是RabbitMQ还是Kafka，我们只需要关注Stream的使用，如此解耦也可以极大方便我们项目的消息中间件迁移。当然，本系列《Spring Cloud 学习纪要》小博只记录最简洁的入门Demo，更高阶的使用方法和技巧心得相信聪明的你能够自己掌握。</p><p><kbd><strong>附件</strong></kbd></p><blockquote><p>本系列纪要博客源码：<a href="https://github.com/chung567115/SpringCloud" target="_blank" rel="noopener">跳转到github</a><br>本系列纪要博客配置文件：<a href="https://github.com/chung567115/SpringCloudConfig" target="_blank" rel="noopener">跳转到github</a></p></blockquote>]]></content>
      
      
      <categories>
          
          <category> Spring Cloud </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Java </tag>
            
            <tag> 微服务 </tag>
            
            <tag> Spring Cloud </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Spring Cloud Bus</title>
      <link href="/2018/11/24/Spring%20Cloud%20%E5%AD%A6%E4%B9%A0%E7%BA%AA%E8%A6%81%E4%BA%94%EF%BC%9ABus/"/>
      <url>/2018/11/24/Spring%20Cloud%20%E5%AD%A6%E4%B9%A0%E7%BA%AA%E8%A6%81%E4%BA%94%EF%BC%9ABus/</url>
      
        <content type="html"><![CDATA[<blockquote><p>上一篇我们讲到统一配置中心<kbd>Spring Cloud Config</kbd>，实现了分布式项目配置文件的统一管理，但是留下了一个问题：修改配置之后如何免重启自动生效。<kbd>Spring Cloud Bus</kbd>消息总线组件就可以用来做这件事，值得注意的是，前面我们所使用的版本<kbd>Greenwich.M1</kbd>的bus组件存在bug，我们将config和provider项目改为如下版本(其他项目建议一并修改)：</p></blockquote><a id="more"></a><table><thead><tr><th>开发环境</th><th>版本</th></tr></thead><tbody><tr><td>IDEA</td><td>2018.2.6</td></tr><tr><td>JDK</td><td>1.8</td></tr><tr><td>Spring Boot</td><td>2.0.6</td></tr><tr><td>Spring Cloud</td><td>Finchley.SR2</td></tr><tr><td>Docker</td><td>18.09.0</td></tr><tr><td>RabbitMQ</td><td>3.7.8-management</td></tr></tbody></table><blockquote><p><strong>特别注意</strong>：本系列纪要环环相扣，建议从第一节开始阅读&emsp;<a href="http://zhangchong.xin/2018/11/20/Spring%20Cloud%20%E5%AD%A6%E4%B9%A0%E7%BA%AA%E8%A6%81%E4%B8%80%EF%BC%9AEureka/">点击跳转</a></p></blockquote><blockquote><p>bug官方github issue链接为<a href="https://github.com/spring-cloud/spring-cloud-bus/issues/137" target="_blank" rel="noopener">https://github.com/spring-cloud/spring-cloud-bus/issues/137</a>，可自行查阅。</p></blockquote><h1 id="准备工作"><a href="#准备工作" class="headerlink" title="准备工作"></a>准备工作</h1><p>&emsp;&emsp;进行本章内容的学习前期需要准备好环境：Docker的安装、RabbitMQ容器的安装和运行、虚拟机IP到宿主机IP的映射等。<br>&emsp;&emsp;简而言之，访问<a href="http://localhost:15672" target="_blank" rel="noopener">http://localhost:15672</a>，应可以到达RabbitMQ管理界面，当然，5672端口的服务也需要能正常运行。<br><img src="https://raw.githubusercontent.com/chung567115/chung567115.github.io/hexo-blog/blog-img/spring-cloud-5-1.png" alt="MQ管理页面"></p><h1 id="修改Config项目配置"><a href="#修改Config项目配置" class="headerlink" title="修改Config项目配置"></a>修改Config项目配置</h1><h2 id="Maven依赖"><a href="#Maven依赖" class="headerlink" title="Maven依赖"></a>Maven依赖</h2><p>&emsp;&emsp;在配置中心项目中添加bus组件的依赖，以及后续会用到的actuator和monitor依赖。<br><div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="false"data-rel="XML"><figure class="iseeu highlight /xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.cloud<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-cloud-config-monitor<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.cloud<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-cloud-starter-bus-amqp<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-actuator<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure></div></p><h2 id="配置"><a href="#配置" class="headerlink" title="配置"></a>配置</h2><p>&emsp;&emsp;暴露配置中心的各项接口，在配置文件添加如下内容：<br><div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="false"data-rel="YML"><figure class="iseeu highlight /yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">management:</span></span><br><span class="line"><span class="attr">  endpoints:</span></span><br><span class="line"><span class="attr">    web:</span></span><br><span class="line"><span class="attr">      exposure:</span></span><br><span class="line"><span class="attr">        include:</span> <span class="string">"*"</span></span><br></pre></td></tr></table></figure></div></p><h1 id="修改provider项目"><a href="#修改provider项目" class="headerlink" title="修改provider项目"></a>修改provider项目</h1><p>&emsp;&emsp;我们以provider项目为例，添加bus组件的Maven依赖：<br><div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="false"data-rel="XML"><figure class="iseeu highlight /xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.cloud<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-cloud-starter-bus-amqp<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure></div></p><p>&emsp;&emsp;修改接口为动态读取配置项：<br><div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="false"data-rel="JAVA"><figure class="iseeu highlight /java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@RestController</span></span><br><span class="line"><span class="meta">@RequestMapping</span>(<span class="string">"/hello"</span>)</span><br><span class="line"><span class="meta">@RefreshScope</span> <span class="comment">// 使用该注解可在SpringCloudConfig配置刷新时自动更新本类配置</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">HelloController</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Value</span>(<span class="string">"$&#123;env&#125;"</span>)</span><br><span class="line">    <span class="keyword">private</span> String env;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@GetMapping</span>(<span class="string">"/chung"</span>)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">helloChung</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">"Hello Chung By Provider on env:"</span> + env;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div></p><h1 id="验证配置项动态更新"><a href="#验证配置项动态更新" class="headerlink" title="验证配置项动态更新"></a>验证配置项动态更新</h1><p>&emsp;&emsp;<strong>先后运行</strong>config和provider项目（保证注册中心服务可用），发现RabbitMQ自动为我们创建了两个消息队列，如图所示。<br><img src="https://raw.githubusercontent.com/chung567115/chung567115.github.io/hexo-blog/blog-img/spring-cloud-5-2.png" alt="Queue"><br>&emsp;&emsp;此时我们访问provider的接口<a href="http://localhost:8081/hello/chung" target="_blank" rel="noopener">http://localhost:8081/hello/chung</a>可以得到<code>Hello Chung By Provider on env:dev</code>，接着我们修改git上的配置文件内容env的值<code>env : devDynamic</code>，然后用postman或curl命令以<strong>post方式</strong>访问config暴露的接口<a href="http://127.0.0.1:8071/actuator/bus-refresh" target="_blank" rel="noopener">http://127.0.0.1:8071/actuator/bus-refresh</a>，RabbitMQ的管理界面可以看到消息的消费情况，如图所示。<br><img src="https://raw.githubusercontent.com/chung567115/chung567115.github.io/hexo-blog/blog-img/spring-cloud-5-3.png" alt="MQ"><br>&emsp;&emsp;最后刷新<a href="http://localhost:8081/hello/chung" target="_blank" rel="noopener">http://localhost:8081/hello/chung</a>页面，发现内容变成了<code>Hello Chung By Provider on env:devDynamic</code>，证明我们实现了免重启修改配置。</p><h1 id="配置GitHub的Webhooks"><a href="#配置GitHub的Webhooks" class="headerlink" title="配置GitHub的Webhooks"></a>配置GitHub的Webhooks</h1><p>&emsp;&emsp;真实场景下，我们不可能每次修改配置后手动做一下post请求，而Webhook为我们提供了这样的功能。<br>&emsp;&emsp;如果本机IP为内网地址，可以提前准备一下内网穿透工具，视个人情况而定。<br><img src="https://raw.githubusercontent.com/chung567115/chung567115.github.io/hexo-blog/blog-img/spring-cloud-5-4.png" alt="NATAPP"><br>&emsp;&emsp;在我们的配置文件git仓库中，找到设置页面的Webhooks选项，将Payload URL设置为<code>${your_url}/monitor</code>，Content Type选择application/json，点击添加Webhook按钮。<br><img src="https://raw.githubusercontent.com/chung567115/chung567115.github.io/hexo-blog/blog-img/spring-cloud-5-5.png" alt="Webhook"><br>&emsp;&emsp;最后我们再修改git上的配置文件内容，稍候几秒刷新页面，发现能够真正实现免重启自动更新配置，详细内容和截图不再赘述。</p><p><kbd><strong>附件</strong></kbd></p><blockquote><p>本系列纪要博客源码：<a href="https://github.com/chung567115/SpringCloud" target="_blank" rel="noopener">跳转到github</a><br>本系列纪要博客配置文件：<a href="https://github.com/chung567115/SpringCloudConfig" target="_blank" rel="noopener">跳转到github</a></p></blockquote>]]></content>
      
      
      <categories>
          
          <category> Spring Cloud </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Java </tag>
            
            <tag> 微服务 </tag>
            
            <tag> Spring Cloud </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Spring Cloud Config</title>
      <link href="/2018/11/22/Spring%20Cloud%20%E5%AD%A6%E4%B9%A0%E7%BA%AA%E8%A6%81%E5%9B%9B%EF%BC%9AConfig/"/>
      <url>/2018/11/22/Spring%20Cloud%20%E5%AD%A6%E4%B9%A0%E7%BA%AA%E8%A6%81%E5%9B%9B%EF%BC%9AConfig/</url>
      
        <content type="html"><![CDATA[<blockquote><p>普通应用中，当一个系统的配置文件发生改变时，需要重启该服务才能使新配置生效。而<kbd>Spring Cloud Config</kbd>可以实现微服务中所有系统配置文件的统一管理，当配置文件发生变化的时候，系统会自动更新获取新的配置。</p></blockquote><a id="more"></a><table><thead><tr><th>开发环境</th><th>版本</th></tr></thead><tbody><tr><td>IDEA</td><td>2018.2.6</td></tr><tr><td>JDK</td><td>1.8</td></tr><tr><td>Spring Boot</td><td>2.1.0</td></tr><tr><td>Spring Cloud</td><td>Greenwich.M1</td></tr></tbody></table><blockquote><p><strong>特别注意</strong>：本系列纪要环环相扣，建议从第一节开始阅读&emsp;<a href="http://zhangchong.xin/2018/11/20/Spring%20Cloud%20%E5%AD%A6%E4%B9%A0%E7%BA%AA%E8%A6%81%E4%B8%80%EF%BC%9AEureka/">点击跳转</a></p></blockquote><h1 id="新建配置中心服务"><a href="#新建配置中心服务" class="headerlink" title="新建配置中心服务"></a>新建配置中心服务</h1><p>&emsp;&emsp;在IDEA中通过<kbd>Spring Initializr</kbd>创建项目，选择Spring Boot 2.1.0版本、选择Maven依赖Eureka Discovery(Cloud Discovery中)和Config Server(Cloud Config中)。<br><div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="false"data-rel="XML"><figure class="iseeu highlight /xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.cloud<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-cloud-config-server<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.cloud<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-cloud-starter-netflix-eureka-client<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-test<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">scope</span>&gt;</span>test<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></span><br></pre></td></tr></table></figure></div></p><h1 id="加入注解"><a href="#加入注解" class="headerlink" title="加入注解"></a>加入注解</h1><p>&emsp;&emsp;在入口类添加<kbd>@EnableEurekaClient</kbd>和<kbd>@EnableConfigServer</kbd>注解。<br><div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="false"data-rel="JAVA"><figure class="iseeu highlight /java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@SpringBootApplication</span></span><br><span class="line"><span class="meta">@EnableEurekaClient</span></span><br><span class="line"><span class="meta">@EnableConfigServer</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ConfigApplication</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        SpringApplication.run(ConfigApplication.class, args);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div></p><h1 id="添加配置"><a href="#添加配置" class="headerlink" title="添加配置"></a>添加配置</h1><p>&emsp;&emsp;在文件<kbd>application.yml</kbd>添加配置。<br><div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="false"data-rel="YML"><figure class="iseeu highlight /yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">eureka:</span></span><br><span class="line"><span class="attr">  client:</span></span><br><span class="line"><span class="attr">    service-url:</span></span><br><span class="line"><span class="attr">      defaultZone:</span> <span class="attr">http://localhost:8761/eureka/</span> <span class="comment">#,http://localhost:8762/eureka/</span></span><br><span class="line"><span class="attr">  instance:</span></span><br><span class="line"><span class="attr">    prefer-ip-address:</span> <span class="literal">true</span></span><br><span class="line">    <span class="comment">#    hostname: ProviderName</span></span><br><span class="line"><span class="attr">    instance-id:</span> <span class="string">$&#123;spring.cloud.client.ip-address&#125;:$&#123;server.port&#125;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#server:</span></span><br><span class="line"><span class="comment">#  port: 8071</span></span><br><span class="line"></span><br><span class="line"><span class="attr">spring:</span></span><br><span class="line"><span class="attr">  application:</span></span><br><span class="line"><span class="attr">    name:</span> <span class="string">config</span></span><br><span class="line"><span class="attr">  cloud:</span></span><br><span class="line"><span class="attr">    config:</span></span><br><span class="line"><span class="attr">      server:</span></span><br><span class="line"><span class="attr">        git:</span></span><br><span class="line"><span class="attr">          uri:</span> <span class="string">$&#123;your_config_repository&#125;</span> <span class="comment">#https://github.com/chung567115/SpringCloudConfig</span></span><br><span class="line"><span class="attr">          username:</span> <span class="string">$&#123;your_username&#125;</span></span><br><span class="line"><span class="attr">          password:</span> <span class="string">$&#123;your_password&#125;</span></span><br><span class="line"><span class="attr">          basedir:</span> <span class="string">$&#123;your_dir&#125;</span> <span class="comment"># D:\IDEACode\Spring Cloud\config\basedir</span></span><br></pre></td></tr></table></figure></div></p><h1 id="上传配置文件"><a href="#上传配置文件" class="headerlink" title="上传配置文件"></a>上传配置文件</h1><p>&emsp;&emsp;在自己的git仓库中添加配置文件项目，本例中将前几章中的provider和consumer项目的yml配置文件上传到<a href="https://github.com/chung567115/SpringCloudConfig" target="_blank" rel="noopener">https://github.com/chung567115/SpringCloudConfig</a>。</p><h1 id="运行config项目"><a href="#运行config项目" class="headerlink" title="运行config项目"></a>运行config项目</h1><p>&emsp;&emsp;在VM options设置<kbd>-DServer.port=8071</kbd>，运行config项目，可以在Eureka页面看到本项目注册成功，访问<a href="http://localhost:8071/provider-dev.yml" target="_blank" rel="noopener">http://localhost:8071/provider-dev.yml</a>可以看到配置详情。实际上，我们访问xxxx/provider-dev.properties或xxxx/provider-dev.json，配置中心都将转换成对应格式的配置文件返回。其命名格式为<kbd>{name}-{profiles}.{type}</kbd>，其中name为文件名，一般定义为项目名；profiles为环境，例如开发环境、测试环境、生产环境等；type为文件格式，例如yml、properties、json等。<br><img src="https://raw.githubusercontent.com/chung567115/chung567115.github.io/hexo-blog/blog-img/spring-cloud-4-1.png" alt="yml"><br><img src="https://raw.githubusercontent.com/chung567115/chung567115.github.io/hexo-blog/blog-img/spring-cloud-4-2.png" alt="properties"><br><img src="https://raw.githubusercontent.com/chung567115/chung567115.github.io/hexo-blog/blog-img/spring-cloud-4-3.png" alt="json"></p><h1 id="修改客户端代码"><a href="#修改客户端代码" class="headerlink" title="修改客户端代码"></a>修改客户端代码</h1><p>&emsp;&emsp;导入Spring Cloud Config客户端Maven依赖，在provider和consumer项目的pom.xml文件中加入以下代码并reimport：<br><div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="false"data-rel="XML"><figure class="iseeu highlight /xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.cloud<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-cloud-config-client<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure></div></p><p>&emsp;&emsp;为了能在项目启动的第一时间就应用远程git的配置，重命名provider和consumer项目的配置文件为bootstrap.yml，删除旧内容，保留必要信息。<br><div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="false"data-rel="YML"><figure class="iseeu highlight /yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">spring:</span></span><br><span class="line"><span class="attr">  application:</span></span><br><span class="line"><span class="attr">    name:</span> <span class="string">$&#123;project_name&#125;</span> <span class="comment"># provider/consumer</span></span><br><span class="line">  <span class="comment"># SpringCloudConfig</span></span><br><span class="line"><span class="attr">  cloud:</span></span><br><span class="line"><span class="attr">    config:</span></span><br><span class="line"><span class="attr">      discovery:</span></span><br><span class="line"><span class="attr">        enabled:</span> <span class="literal">true</span></span><br><span class="line"><span class="attr">        service-id:</span> <span class="string">config</span></span><br><span class="line"><span class="attr">      profile:</span> <span class="string">dev</span></span><br></pre></td></tr></table></figure></div></p><h1 id="运行provider或consumer项目"><a href="#运行provider或consumer项目" class="headerlink" title="运行provider或consumer项目"></a>运行provider或consumer项目</h1><p>&emsp;&emsp;运行provider或consumer项目，发现项目依然能够正常注册和被发现，服务间也能正常通信，证明远程配置中心的内容生效。</p><blockquote><p>以上只是达到了统一管理配置，关于修改配置之后如何免重启自动生效，小博将在《Spring Cloud 学习纪要五：Bus》中讲解。</p></blockquote><p><kbd><strong>附件</strong></kbd></p><blockquote><p>本系列纪要博客源码：<a href="https://github.com/chung567115/SpringCloud" target="_blank" rel="noopener">跳转到github</a><br>本系列纪要博客配置文件：<a href="https://github.com/chung567115/SpringCloudConfig" target="_blank" rel="noopener">跳转到github</a></p></blockquote>]]></content>
      
      
      <categories>
          
          <category> Spring Cloud </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Java </tag>
            
            <tag> 微服务 </tag>
            
            <tag> Spring Cloud </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Spring Cloud Ribbon</title>
      <link href="/2018/11/20/Spring%20Cloud%20%E5%AD%A6%E4%B9%A0%E7%BA%AA%E8%A6%81%E4%B8%89%EF%BC%9ARibbon/"/>
      <url>/2018/11/20/Spring%20Cloud%20%E5%AD%A6%E4%B9%A0%E7%BA%AA%E8%A6%81%E4%B8%89%EF%BC%9ARibbon/</url>
      
        <content type="html"><![CDATA[<blockquote><p><kbd>Spring Cloud Ribbon</kbd>是基于Netflix Ribbon实现的一套客户端负载均衡的工具。它是一个基于HTTP和TCP的客户端负载均衡器，它可以通过在客户端中配置ribbonServerList来设置服务端列表去轮询访问以达到均衡负载的作用。</p></blockquote><a id="more"></a><table><thead><tr><th>开发环境</th><th>版本</th></tr></thead><tbody><tr><td>IDEA</td><td>2018.2.6</td></tr><tr><td>JDK</td><td>1.8</td></tr><tr><td>Spring Boot</td><td>2.1.0</td></tr><tr><td>Spring Cloud</td><td>Greenwich.M1</td></tr></tbody></table><blockquote><p><strong>特别注意</strong>：本系列纪要环环相扣，建议从第一节开始阅读&emsp;<a href="http://zhangchong.xin/2018/11/20/Spring%20Cloud%20%E5%AD%A6%E4%B9%A0%E7%BA%AA%E8%A6%81%E4%B8%80%EF%BC%9AEureka/">点击跳转</a></p></blockquote><h1 id="修改代码和配置"><a href="#修改代码和配置" class="headerlink" title="修改代码和配置"></a>修改代码和配置</h1><p>&emsp;&emsp;在IDEA的Run/Debug Configurations中，拷贝一份当前的运行配置，并将副本为VM options设置为<kbd>-DServer.port=8082</kbd>，为了区别不同实例接口的返回结果，新增IPConfig类：<br><div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="false"data-rel="JAVA"><figure class="iseeu highlight /java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">IPConfig</span> <span class="keyword">implements</span> <span class="title">ApplicationListener</span>&lt;<span class="title">WebServerInitializedEvent</span>&gt; </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> serverPort;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onApplicationEvent</span><span class="params">(WebServerInitializedEvent event)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.serverPort = event.getWebServer().getPort();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">getPort</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">this</span>.serverPort;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div></p><p>&emsp;&emsp;修改provider的HelloController代码：<br><div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="false"data-rel="JAVA"><figure class="iseeu highlight /java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@RestController</span></span><br><span class="line"><span class="meta">@RequestMapping</span>(<span class="string">"/hello"</span>)</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">HelloController</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> IPConfig ipConfig;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@GetMapping</span>(<span class="string">"/chung"</span>)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">helloChung</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">"Hello Chung By Provider on :"</span> + ipConfig.getPort();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div></p><h1 id="运行两个provider实例和consumer项目"><a href="#运行两个provider实例和consumer项目" class="headerlink" title="运行两个provider实例和consumer项目"></a>运行两个provider实例和consumer项目</h1><p>&emsp;&emsp;运行两个provider实例，发现访问<a href="http://localhost:8081/hello/chung" target="_blank" rel="noopener">http://localhost:8081/hello/chung</a>和<a href="http://localhost:8082/hello/chung" target="_blank" rel="noopener">http://localhost:8082/hello/chung</a>分别能得到<code>Hello Chung By Provider on :8081</code>和<code>Hello Chung By Provider on :8082</code>。<br>&emsp;&emsp;运行consumer项目，访问<a href="http://localhost:8091/hello/consumer" target="_blank" rel="noopener">http://localhost:8091/hello/consumer</a>，可以发现，我们不断刷新页面，结果将一直轮流为<code>Hello Chung By Provider on :8081</code>和<code>Hello Chung By Provider on :8082</code>。这是由于默认Ribbon的负载均衡策略为<kbd>RoundRobinRule</kbd>[轮询]。</p><h1 id="修改负载均衡策略"><a href="#修改负载均衡策略" class="headerlink" title="修改负载均衡策略"></a>修改负载均衡策略</h1><p>&emsp;&emsp;在consumer项目的配置文件添加以下代码，重启项目之后，负载均衡策略将变为随机规则，可以发现结果将不再是线性轮流变化。其他策略也可根据具体需求调整。<br><div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="false"data-rel="YML"><figure class="iseeu highlight /yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#负载均衡策略</span></span><br><span class="line"><span class="attr">provider:</span></span><br><span class="line"><span class="attr">  ribbon:</span></span><br><span class="line"><span class="attr">    NFLoadBalancerRuleClassName:</span> <span class="string">com.netflix.loadbalancer.RandomRule</span></span><br></pre></td></tr></table></figure></div></p><p><kbd><strong>附件</strong></kbd></p><blockquote><p>本系列纪要博客源码：<a href="https://github.com/chung567115/SpringCloud" target="_blank" rel="noopener">跳转到github</a><br>本系列纪要博客配置文件：<a href="https://github.com/chung567115/SpringCloudConfig" target="_blank" rel="noopener">跳转到github</a></p></blockquote>]]></content>
      
      
      <categories>
          
          <category> Spring Cloud </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Java </tag>
            
            <tag> 微服务 </tag>
            
            <tag> Spring Cloud </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Spring Cloud Feign</title>
      <link href="/2018/11/20/Spring%20Cloud%20%E5%AD%A6%E4%B9%A0%E7%BA%AA%E8%A6%81%E4%BA%8C%EF%BC%9AFeign/"/>
      <url>/2018/11/20/Spring%20Cloud%20%E5%AD%A6%E4%B9%A0%E7%BA%AA%E8%A6%81%E4%BA%8C%EF%BC%9AFeign/</url>
      
        <content type="html"><![CDATA[<blockquote><p><kbd>Spring Cloud Feign</kbd>是简化Java HTTP客户端开发的工具，它的灵感来自于Retrofit、JAXRS-2.0和WebSocket。接下来将展示一个入门Demo。</p></blockquote><a id="more"></a><table><thead><tr><th>开发环境</th><th>版本</th></tr></thead><tbody><tr><td>IDEA</td><td>2018.2.6</td></tr><tr><td>JDK</td><td>1.8</td></tr><tr><td>Spring Boot</td><td>2.1.0</td></tr><tr><td>Spring Cloud</td><td>Greenwich.M1</td></tr></tbody></table><blockquote><p><strong>特别注意</strong>：本系列纪要环环相扣，建议从第一节开始阅读&emsp;<a href="http://zhangchong.xin/2018/11/20/Spring%20Cloud%20%E5%AD%A6%E4%B9%A0%E7%BA%AA%E8%A6%81%E4%B8%80%EF%BC%9AEureka/">点击跳转</a></p></blockquote><h1 id="新建项目"><a href="#新建项目" class="headerlink" title="新建项目"></a>新建项目</h1><p>&emsp;&emsp;在IDEA中通过<kbd>Spring Initializr</kbd>创建项目，选择Spring Boot 2.1.0版本、选择Maven依赖Web、Eureka Discovery(Cloud Discovery中)和Feign(Cloud Routing中)。<br><div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="false"data-rel="XML"><figure class="iseeu highlight /xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.cloud<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-cloud-starter-netflix-eureka-client<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-web<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.cloud<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-cloud-starter-openfeign<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-test<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">scope</span>&gt;</span>test<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></span><br></pre></td></tr></table></figure></div></p><h1 id="加入注解"><a href="#加入注解" class="headerlink" title="加入注解"></a>加入注解</h1><p>&emsp;&emsp;在入口类添加<kbd>@EnableEurekaClient</kbd>和<kbd>@EnableFeignClients</kbd>注解。<br><div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="false"data-rel="JAVA"><figure class="iseeu highlight /java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@SpringBootApplication</span></span><br><span class="line"><span class="meta">@EnableEurekaClient</span></span><br><span class="line"><span class="meta">@EnableFeignClients</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">FeignConsumerApplication</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        SpringApplication.run(FeignConsumerApplication.class, args);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div></p><h1 id="添加配置"><a href="#添加配置" class="headerlink" title="添加配置"></a>添加配置</h1><p>&emsp;&emsp;在文件<kbd>application.yml</kbd>添加配置。<br><div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="false"data-rel="YML"><figure class="iseeu highlight /yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">eureka:</span></span><br><span class="line"><span class="attr">  client:</span></span><br><span class="line"><span class="attr">    service-url:</span></span><br><span class="line"><span class="attr">      defaultZone:</span> <span class="attr">http://localhost:8761/eureka/</span></span><br><span class="line"><span class="attr">  instance:</span></span><br><span class="line"><span class="attr">    prefer-ip-address:</span> <span class="literal">true</span></span><br><span class="line"><span class="attr">    instance-id:</span> <span class="string">$&#123;spring.cloud.client.ip-address&#125;:$&#123;server.port&#125;</span></span><br><span class="line">    <span class="comment">#    hostname: ConsumerName</span></span><br><span class="line"></span><br><span class="line"><span class="attr">spring:</span></span><br><span class="line"><span class="attr">  application:</span></span><br><span class="line"><span class="attr">    name:</span> <span class="string">consumer</span></span><br></pre></td></tr></table></figure></div></p><h1 id="编写接口"><a href="#编写接口" class="headerlink" title="编写接口"></a>编写接口</h1><p>&emsp;&emsp;在上一篇的provider项目中，新建简单的Controller，代码如下，运行provider项目，访问<a href="http://localhost:8081/hello/chung" target="_blank" rel="noopener">http://localhost:8081/hello/chung</a>可得到<code>Hello Chung By Provider</code>。<br><div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="false"data-rel="JAVA"><figure class="iseeu highlight /java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@RestController</span></span><br><span class="line"><span class="meta">@RequestMapping</span>(<span class="string">"/hello"</span>)</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">HelloController</span> </span>&#123;</span><br><span class="line">    <span class="meta">@GetMapping</span>(<span class="string">"/chung"</span>)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">helloChung</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">"Hello Chung By Provider"</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div></p><p>&emsp;&emsp;在本篇的新项目consumer中新建接口和Controller，代码如下：<br><div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="false"data-rel="JAVA"><figure class="iseeu highlight /java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@FeignClient</span>(name = <span class="string">"provider"</span>)</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">ProviderClient</span> </span>&#123;</span><br><span class="line">    <span class="meta">@GetMapping</span>(value = <span class="string">"/hello/chung"</span>)</span><br><span class="line">    <span class="function">String <span class="title">hello</span><span class="params">()</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div></p><div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="false"data-rel="JAVA"><figure class="iseeu highlight /java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@RestController</span></span><br><span class="line"><span class="meta">@RequestMapping</span>(<span class="string">"hello"</span>)</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">HelloController</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> ProviderClient providerClient;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@GetMapping</span>(<span class="string">"/consumer"</span>)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">hello</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">return</span> providerClient.hello();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div><h1 id="运行项目"><a href="#运行项目" class="headerlink" title="运行项目"></a>运行项目</h1><p>&emsp;&emsp;在VM options设置<kbd>-DServer.port=8091</kbd>，运行consumer项目，可以在Eureka页面看到本项目注册成功，访问<a href="http://localhost:8091/hello/consumer" target="_blank" rel="noopener">http://localhost:8091/hello/consumer</a>同样可以得到<code>Hello Chung By Provider</code>，证明服务间通信正常。<br><img src="https://raw.githubusercontent.com/chung567115/chung567115.github.io/hexo-blog/blog-img/spring-cloud-2-1.png" alt="Eureka"></p><p><kbd><strong>附件</strong></kbd></p><blockquote><p>本系列纪要博客源码：<a href="https://github.com/chung567115/SpringCloud" target="_blank" rel="noopener">跳转到github</a><br>本系列纪要博客配置文件：<a href="https://github.com/chung567115/SpringCloudConfig" target="_blank" rel="noopener">跳转到github</a></p></blockquote>]]></content>
      
      
      <categories>
          
          <category> Spring Cloud </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Java </tag>
            
            <tag> 微服务 </tag>
            
            <tag> Spring Cloud </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Spring Cloud Eureka</title>
      <link href="/2018/11/20/Spring%20Cloud%20%E5%AD%A6%E4%B9%A0%E7%BA%AA%E8%A6%81%E4%B8%80%EF%BC%9AEureka/"/>
      <url>/2018/11/20/Spring%20Cloud%20%E5%AD%A6%E4%B9%A0%E7%BA%AA%E8%A6%81%E4%B8%80%EF%BC%9AEureka/</url>
      
        <content type="html"><![CDATA[<blockquote><p><kbd>Spring Cloud Eureka</kbd>是Spring Cloud Netflix服务套件中的一部分，它基于Netflix Eureka做了二次封装，主要负责完成微服务架构中的服务治理，接下来将展示入门Demo。</p></blockquote><a id="more"></a><table><thead><tr><th>开发环境</th><th>版本</th></tr></thead><tbody><tr><td>IDEA</td><td>2018.2.6</td></tr><tr><td>JDK</td><td>1.8</td></tr><tr><td>Spring Boot</td><td>2.1.0</td></tr><tr><td>Spring Cloud</td><td>Greenwich.M1</td></tr></tbody></table><h1 id="Eureka服务端"><a href="#Eureka服务端" class="headerlink" title="Eureka服务端"></a>Eureka服务端</h1><h2 id="新建项目"><a href="#新建项目" class="headerlink" title="新建项目"></a>新建项目</h2><p>&emsp;&emsp;在IDEA中通过<kbd>Spring Initializr</kbd>创建项目，选择Spring Boot 2.1.0版本、选择Maven依赖Eureka Server(Cloud Discovery中)。<br><div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="false"data-rel="XML"><figure class="iseeu highlight /xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.cloud<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-cloud-starter-netflix-eureka-server<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-test<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">scope</span>&gt;</span>test<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></span><br></pre></td></tr></table></figure></div></p><h2 id="加入注解"><a href="#加入注解" class="headerlink" title="加入注解"></a>加入注解</h2><p>&emsp;&emsp;在入口类添加<kbd>@EnableEurekaServer</kbd>注解。<br><div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="false"data-rel="JAVA"><figure class="iseeu highlight /java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@SpringBootApplication</span></span><br><span class="line"><span class="meta">@EnableEurekaServer</span> <span class="comment">// 开启Eureka注册服务</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">EurekaApplication</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        SpringApplication.run(EurekaApplication.class, args);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div></p><h2 id="添加配置"><a href="#添加配置" class="headerlink" title="添加配置"></a>添加配置</h2><p>&emsp;&emsp;在文件<kbd>application.yml</kbd>添加配置。<br><div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="false"data-rel="YML"><figure class="iseeu highlight /yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">eureka:</span></span><br><span class="line"><span class="attr">  client:</span></span><br><span class="line"><span class="attr">    service-url:</span></span><br><span class="line"><span class="attr">      defaultZone:</span> <span class="attr">http://localhost:8761/eureka/</span></span><br><span class="line"><span class="attr">    register-with-eureka:</span> <span class="literal">false</span> <span class="comment">#禁止自身注册</span></span><br><span class="line"><span class="comment">#  server:</span></span><br><span class="line"><span class="comment">#    enable-self-preservation: false</span></span><br><span class="line"><span class="attr">  instance:</span></span><br><span class="line"><span class="attr">    prefer-ip-address:</span> <span class="literal">true</span>  <span class="comment">#默认显示IP</span></span><br><span class="line"><span class="attr">    instance-id:</span> <span class="string">$&#123;spring.cloud.client.ip-address&#125;:$&#123;server.port&#125;</span></span><br><span class="line">    <span class="comment">#    hostname: ServerName</span></span><br><span class="line"></span><br><span class="line"><span class="attr">spring:</span></span><br><span class="line"><span class="attr">  application:</span></span><br><span class="line"><span class="attr">    name:</span> <span class="string">eureka</span></span><br></pre></td></tr></table></figure></div></p><h2 id="运行项目"><a href="#运行项目" class="headerlink" title="运行项目"></a>运行项目</h2><p>&emsp;&emsp;在VM options设置<kbd>-DServer.port=8761</kbd>，运行项目，浏览器打开<a href="http://localhost:8761" target="_blank" rel="noopener">http://localhost:8761</a>即可看到Eureka页面。<br><img src="https://raw.githubusercontent.com/chung567115/chung567115.github.io/hexo-blog/blog-img/spring-cloud-1-1.png" alt="Eureka Server"></p><h1 id="Eureka客户端"><a href="#Eureka客户端" class="headerlink" title="Eureka客户端"></a>Eureka客户端</h1><h2 id="新建项目-1"><a href="#新建项目-1" class="headerlink" title="新建项目"></a>新建项目</h2><p>&emsp;&emsp;在IDEA中通过<kbd>Spring Initializr</kbd>创建项目，选择Spring Boot 2.1.0版本、选择Maven依赖Web和Eureka Discovery(Cloud Discovery中)。<br><div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="false"data-rel="XML"><figure class="iseeu highlight /xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.cloud<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-cloud-starter-netflix-eureka-client<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-web<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-test<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">scope</span>&gt;</span>test<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></span><br></pre></td></tr></table></figure></div></p><h2 id="加入注解-1"><a href="#加入注解-1" class="headerlink" title="加入注解"></a>加入注解</h2><p>&emsp;&emsp;在入口类添加<kbd>@EnableEurekaClient</kbd>注解。<br><div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="false"data-rel="JAVA"><figure class="iseeu highlight /java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@SpringBootApplication</span></span><br><span class="line"><span class="meta">@EnableEurekaClient</span> <span class="comment">//开启Eureka发现</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">FeignProviderApplication</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        SpringApplication.run(FeignProviderApplication.class, args);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div></p><h2 id="添加配置-1"><a href="#添加配置-1" class="headerlink" title="添加配置"></a>添加配置</h2><p>&emsp;&emsp;在文件<kbd>application.yml</kbd>添加配置。<br><div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="false"data-rel="YML"><figure class="iseeu highlight /yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">eureka:</span></span><br><span class="line"><span class="attr">  client:</span></span><br><span class="line"><span class="attr">    service-url:</span></span><br><span class="line"><span class="attr">      defaultZone:</span> <span class="attr">http://localhost:8761/eureka/</span></span><br><span class="line"><span class="attr">  instance:</span></span><br><span class="line"><span class="attr">    prefer-ip-address:</span> <span class="literal">true</span></span><br><span class="line">    <span class="comment">#    hostname: ProviderName</span></span><br><span class="line"><span class="attr">    instance-id:</span> <span class="string">$&#123;spring.cloud.client.ip-address&#125;:$&#123;server.port&#125;</span></span><br><span class="line"><span class="attr">spring:</span></span><br><span class="line"><span class="attr">  application:</span></span><br><span class="line"><span class="attr">    name:</span> <span class="string">provider</span></span><br></pre></td></tr></table></figure></div></p><h2 id="运行项目-1"><a href="#运行项目-1" class="headerlink" title="运行项目"></a>运行项目</h2><p>&emsp;&emsp;在VM options设置<kbd>-DServer.port=8081</kbd>，运行项目，在Eureka页面可以看到如下图线框处，证明本项目启动时已自动注册成功。<br><img src="https://raw.githubusercontent.com/chung567115/chung567115.github.io/hexo-blog/blog-img/spring-cloud-1-2.png" alt="EurekaClient"></p><p><kbd><strong>附件</strong></kbd></p><blockquote><p>本系列纪要博客源码：<a href="https://github.com/chung567115/SpringCloud" target="_blank" rel="noopener">跳转到github</a><br>本系列纪要博客配置文件：<a href="https://github.com/chung567115/SpringCloudConfig" target="_blank" rel="noopener">跳转到github</a></p></blockquote>]]></content>
      
      
      <categories>
          
          <category> Spring Cloud </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Java </tag>
            
            <tag> 微服务 </tag>
            
            <tag> Spring Cloud </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>synchronized与static synchronized的区别</title>
      <link href="/2018/10/31/synchronized%E4%B8%8Estatic%20synchronized%E8%AF%A6%E8%A7%A3/"/>
      <url>/2018/10/31/synchronized%E4%B8%8Estatic%20synchronized%E8%AF%A6%E8%A7%A3/</url>
      
        <content type="html"><![CDATA[<blockquote><p>详解synchronized与static synchronized的区别</p></blockquote><a id="more"></a><ul><li><p><kbd>synchronized</kbd>是实例锁，对类的<strong>当前实例</strong>进行加锁，防止其他线程同时访问该实例的<strong>所有synchronized块</strong>。</p><blockquote><p>注意这里是<strong>类的当前实例</strong>， 类的两个不同实例就没有这种约束了</p></blockquote></li><li><p><kbd>static synchronized</kbd>是类锁，控制类的<strong>所有实例</strong>的并发访问，限制多线程中该类的<strong>所有实例</strong>同时访问JVM中该类所对应的代码块。</p></li></ul><h1 id="例题讲解"><a href="#例题讲解" class="headerlink" title="例题讲解"></a>例题讲解</h1><p>&emsp;&emsp;假如有Something类的两个实例x与y，那么下列各组方法被多线程同时访问的情况是怎样的？<br><div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="false"data-rel="JAVA"><figure class="iseeu highlight /java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">pulbic <span class="class"><span class="keyword">class</span> <span class="title">Something</span></span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">synchronized</span> <span class="keyword">void</span> <span class="title">isSyncA</span><span class="params">()</span></span>&#123;&#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">synchronized</span> <span class="keyword">void</span> <span class="title">isSyncB</span><span class="params">()</span></span>&#123;&#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">synchronized</span> <span class="keyword">void</span> <span class="title">cSyncA</span><span class="params">()</span></span>&#123;&#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">synchronized</span> <span class="keyword">void</span> <span class="title">cSyncB</span><span class="params">()</span></span>&#123;&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">A.  x.isSyncA() 与 x.isSyncB()   </span><br><span class="line">B.  x.isSyncA() 与 y.isSyncA()  </span><br><span class="line">C.  x.cSyncA() 与 y.cSyncB()  </span><br><span class="line">D.  x.isSyncA() 与 Something.cSyncA()</span><br></pre></td></tr></table></figure></div></p><p><strong>A：</strong> 不能被同时访问，原因：是对相同实例<kbd>x</kbd>的不同<kbd>synchronized</kbd>域访问。</p><p><strong>B：</strong> 可以被同时访问，原因：是对不同实例<kbd>x</kbd>和<kbd>y</kbd>的相同<kbd>synchronized</kbd>域访问。</p><p><strong>C：</strong> 不能被同时访问，原因：是对不同实例<kbd>x</kbd>和<kbd>y</kbd>的不同<kbd>static synchronized</kbd>域访问。</p><p><strong>D：</strong> 可以被同时访问，原因：是对实例<kbd>x</kbd>的<kbd>synchronized</kbd>域和类<kbd>Something</kbd>的<kbd>static synchronized</kbd>域同时访问。</p><h1 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h1><ul><li><kbd>synchronized</kbd>锁的是实例对象，<kbd>static synchronized</kbd>锁的是类对象</li><li>若实例被锁，则<strong>该实例</strong>的<strong>所有同步方法</strong>全部被锁</li><li>若类被锁，则<strong>该类</strong>的<strong>所有同步方法</strong>全部被锁</li></ul><blockquote><p><strong>实例锁与类锁之间互不干扰</strong></p></blockquote>]]></content>
      
      
      <categories>
          
          <category> Java </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Java </tag>
            
            <tag> 并发编程 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>并发编程实例</title>
      <link href="/2018/10/24/%E5%B9%B6%E5%8F%91%E7%BC%96%E7%A8%8B%E5%AE%9E%E4%BE%8B/"/>
      <url>/2018/10/24/%E5%B9%B6%E5%8F%91%E7%BC%96%E7%A8%8B%E5%AE%9E%E4%BE%8B/</url>
      
        <content type="html"><![CDATA[<blockquote><p>并发编程某线上代码实例</p></blockquote><a id="more"></a><div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="false"data-rel="JAVA"><figure class="iseeu highlight /java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 线程池</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> ThreadPoolExecutor threadPoolExecutor = </span><br><span class="line">    <span class="keyword">new</span> ThreadPoolExecutor(<span class="number">1</span>, <span class="number">10</span>, <span class="number">0L</span>, TimeUnit.MILLISECONDS, <span class="keyword">new</span> LinkedBlockingQueue&lt;&gt;(<span class="number">500</span>));</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 推送结果</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">protected</span> Boolean <span class="title">doPostAuditResult</span><span class="params">(CardApplyRecord cardApplyRecord, CardApplyCredit cardApplyCredit)</span> </span>&#123;</span><br><span class="line">    <span class="comment">//校验结果是否已经推送</span></span><br><span class="line">    CardApplyEventStream cardApplyEventStream = cardApplyEventStreamRepository.findByApplyIdAndEventId(cardApplyRecord.getApplyId(), CardApplyEventStreamEnum.PUSHED_AUDIT_RESULT_TO_BANK.value);</span><br><span class="line">    <span class="keyword">if</span> (<span class="keyword">null</span> != cardApplyEventStream) &#123;</span><br><span class="line">    LOGGER.info(<span class="string">"申请记录&#123;&#125;信审结果已推送到银行，直接返回"</span>, cardApplyRecord.getApplyId());</span><br><span class="line">    <span class="keyword">return</span> Boolean.TRUE;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 设置推送中缓存</span></span><br><span class="line">    String cacheKey = String.format(CommonConstants.CACHEKEY_PREFIX_WZBANKCARDSERVICE_POSTAUDITRESULT, cardApplyRecord.getApplyId());</span><br><span class="line">    <span class="comment">// 若存在该任务推送状态缓存，直接返回false</span></span><br><span class="line">    <span class="keyword">if</span>(isPostAuditResultTaskCacheExist(cacheKey))&#123;</span><br><span class="line">    LOGGER.info(<span class="string">"申请记录&#123;&#125;信审结果正在推送中，直接返回"</span>, cardApplyRecord.getApplyId());</span><br><span class="line">    <span class="keyword">return</span> Boolean.FALSE;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    Runnable runnable = <span class="keyword">new</span> Runnable() &#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    runTask(cardApplyRecord, requestDO, requestXmlDO, auditResultFieldDO);</span><br><span class="line">    &#125;</span><br><span class="line">    &#125;;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">    <span class="comment">// 记录执行状态缓存</span></span><br><span class="line">    cachePostAuditResultTask(cacheKey, Boolean.FALSE.toString());</span><br><span class="line">    <span class="comment">// 异步执行推送任务</span></span><br><span class="line">    threadPoolExecutor.execute(runnable);</span><br><span class="line">    &#125; <span class="keyword">catch</span> (RejectedExecutionException e) &#123;</span><br><span class="line">    LOGGER.info(<span class="string">"申请记录&#123;&#125;信审结果被任务队列丢弃，稍后重试"</span>, cardApplyRecord.getApplyId(), e);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> Boolean.FALSE;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div><div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="false"data-rel="JAVA"><figure class="iseeu highlight /java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">runTask</span><span class="params">(</span></span></span><br><span class="line"><span class="function"><span class="params">CardApplyRecord cardApplyRecord, ApplyCardRequestDO requestDO,</span></span></span><br><span class="line"><span class="function"><span class="params">    ApplyCardRequestXmlDO requestXmlDO, AuditResultFieldDO auditResultFieldDO)</span></span>&#123;</span><br><span class="line">    </span><br><span class="line">    String strLockKey = String.format(CacheConstants.LOCKKEY_UPDATE_POSTAUDITRESUT, cardApplyRecord.getApplyId());</span><br><span class="line">    Boolean lockSuccess = Boolean.FALSE;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">        lockSuccess = distributeLock.tryLock(strLockKey, <span class="number">200</span>);</span><br><span class="line">        <span class="keyword">if</span> (!lockSuccess) &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> IgnoreStackException(org.apache.http.HttpStatus.SC_CONFLICT, <span class="string">"获取更新锁异常"</span>);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//校验结果是否已经推送【Double Check】</span></span><br><span class="line">        CardApplyEventStream cardApplyEventStream = cardApplyEventStreamRepository.findByApplyIdAndEventId(</span><br><span class="line">            cardApplyRecord.getApplyId(), CardApplyEventStreamEnum.PUSHED_AUDIT_RESULT_TO_BANK.value);</span><br><span class="line">        <span class="keyword">if</span> (<span class="keyword">null</span> != cardApplyEventStream) &#123;</span><br><span class="line">            LOGGER.info(<span class="string">"申请记录&#123;&#125;信审结果已推送到银行，结束任务直接返回"</span>, cardApplyRecord.getApplyId());</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//发起请求</span></span><br><span class="line">        applyCardDomainService.postAuditResult(requestDO, requestXmlDO, auditResultFieldDO);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//保存事件流</span></span><br><span class="line">        cardApplyEventStream = cardApplyEventStreamDomainService</span><br><span class="line">            .genCardApplyEventStream4Save(cardApplyRecord.getApplyId(), CardApplyEventStreamEnum.PUSHED_AUDIT_RESULT_TO_BANK);</span><br><span class="line"></span><br><span class="line">        Integer rowCount;</span><br><span class="line">        <span class="keyword">if</span> (<span class="keyword">null</span> == cardApplyEventStream.getAutoId()) &#123;</span><br><span class="line">            rowCount = cardApplyEventStreamRepository.insert(cardApplyEventStream);</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            rowCount = cardApplyEventStreamRepository.update(cardApplyEventStream);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (rowCount == <span class="number">0</span>) &#123;</span><br><span class="line">            LOGGER.error(<span class="string">"保存设置申请&#123;&#125;事件流失败, 事件内容为&#123;&#125;"</span>, cardApplyRecord.getApplyId(),</span><br><span class="line">                         CardApplyEventStreamEnum.PUSHED_AUDIT_RESULT_TO_BANK.desc);</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> IgnoreStackException(HttpStatus.SC_INTERNAL_SERVER_ERROR, <span class="string">"保存事件流失败"</span>);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 删除推送中缓存信息</span></span><br><span class="line">        String cacheKey = String.format(CommonConstants.CACHEKEY_PREFIX_WZBANKCARDSERVICE_POSTAUDITRESULT,</span><br><span class="line">            cardApplyRecord.getApplyId());</span><br><span class="line">        enniuJedisCommands.del(cacheKey);</span><br><span class="line">    &#125; <span class="keyword">catch</span> (IgnoreStackException e) &#123;</span><br><span class="line">        <span class="keyword">if</span> (HttpStatus.SC_INTERNAL_SERVER_ERROR == e.getHttpStatus() &amp;&amp; StringUtils.equals(<span class="string">"999999"</span>, e.getMessage())) &#123;</span><br><span class="line">            CreditReport creditReport = creditReportRepository.findByApplyId(cardApplyRecord.getApplyId());</span><br><span class="line">            <span class="keyword">if</span> (<span class="keyword">null</span> != creditReport) &#123;</span><br><span class="line">                <span class="comment">//如果已经收到了则表明已经有过一次成功了</span></span><br><span class="line">                <span class="keyword">return</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">throw</span> e;</span><br><span class="line">    &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (lockSuccess) &#123;</span><br><span class="line">            distributeLock.unlock(strLockKey);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>]]></content>
      
      
      <categories>
          
          <category> Java </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Java </tag>
            
            <tag> 并发编程 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>分布式锁之Redis实现</title>
      <link href="/2018/10/08/%E5%88%86%E5%B8%83%E5%BC%8F%E9%94%81%E4%B9%8BRedis%E5%AE%9E%E7%8E%B0/"/>
      <url>/2018/10/08/%E5%88%86%E5%B8%83%E5%BC%8F%E9%94%81%E4%B9%8BRedis%E5%AE%9E%E7%8E%B0/</url>
      
        <content type="html"><![CDATA[<blockquote><p>分布式锁的Reids实现，包含新旧两个版本</p></blockquote><a id="more"></a><h1 id="旧版实现"><a href="#旧版实现" class="headerlink" title="旧版实现"></a>旧版实现</h1><p>&emsp;&emsp;实现思路：使用jedis.setnx()命令实现加锁，其中key是锁，value是锁的过期时间。</p><ol><li>通过setnx()方法尝试加锁，如果当前锁不存在，返回加锁成功。</li><li>如果锁已经存在则获取锁的过期时间，和当前时间比较，如果锁已经过期，则设置新的过期时间，并校验是否当前线程请求锁，若是则返回加锁成功。</li></ol><div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="false"data-rel="JAVA"><figure class="iseeu highlight /java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">boolean</span> <span class="title">tryLock</span><span class="params">(String lockKey, <span class="keyword">int</span> expireTime)</span> </span>&#123;</span><br><span class="line">    String expireStr = String.valueOf(System.currentTimeMillis() + expireTime);</span><br><span class="line">    <span class="comment">// 如果当前锁不存在，返回加锁成功</span></span><br><span class="line">    <span class="keyword">if</span> (jedis.setnx(lockKey, expiresStr) == <span class="number">1</span>) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 如果锁存在，获取锁的过期时间</span></span><br><span class="line">    String currentValue = jedis.get(lockKey);</span><br><span class="line">    <span class="keyword">if</span> (currentValue != <span class="keyword">null</span> &amp;&amp; Long.parseLong(currentValue) &lt; System.currentTimeMillis()) &#123;</span><br><span class="line">        <span class="comment">// 锁已过期，获取上一个锁的过期时间，并设置现在锁的过期时间</span></span><br><span class="line">        String oldValue = jedis.getSet(lockKey, expireStr);</span><br><span class="line">        <span class="comment">// 考虑多线程并发的情况，只有一个线程的设置值和当前值相同，它才有权利加锁</span></span><br><span class="line">        <span class="keyword">if</span> (oldValue != <span class="keyword">null</span> &amp;&amp; oldValue.equals(currentValue)) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 其他情况，一律返回加锁失败</span></span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div><p>&emsp;&emsp;但是这种做法存在如下问题：</p><ol><li>由于是客户端自己生成过期时间，所以需要强制要求分布式下每个客户端的时间必须同步。 </li><li>当锁过期的时候，如果多个客户端同时执行jedis.getSet()方法，那么虽然最终只有一个客户端可以加锁，但是这个客户端的锁的过期时间可能被其他客户端覆盖。</li><li>锁不具备拥有者标识，即任何客户端都可以解锁。</li></ol><h1 id="新版实现"><a href="#新版实现" class="headerlink" title="新版实现"></a>新版实现</h1><p>&emsp;&emsp;更为严谨的做法如下：<br><div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="false"data-rel="JAVA"><figure class="iseeu highlight /java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">RedisDistributeLock</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">public</span> Jedis jedis;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> String LOCK_SUCCESS = <span class="string">"OK"</span>;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> String SET_IF_NOT_EXIST = <span class="string">"NX"</span>;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> String SET_WITH_EXPIRE_TIME = <span class="string">"PX"</span>;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> Long RELEASE_SUCCESS = <span class="number">1L</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 尝试获取分布式锁</span></span><br><span class="line"><span class="comment">     * 注意: 获取到的锁不可重入</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> lockKey 锁</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> requestId 请求标识</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> expireTime 超期时间</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> 是否获取成功</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">lock</span><span class="params">(String lockKey, String requestId, <span class="keyword">int</span> expireTime)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">try</span> (Jedis jedis = getResource()) &#123;</span><br><span class="line">            String result = jedis.set(lockKey, requestId, SET_IF_NOT_EXIST, SET_WITH_EXPIRE_TIME, expireTime);</span><br><span class="line">            <span class="keyword">if</span> (LOCK_SUCCESS.equals(result)) &#123;</span><br><span class="line">                <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception ex) &#123;</span><br><span class="line">            <span class="keyword">throw</span> ex;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 释放分布式锁</span></span><br><span class="line"><span class="comment">     * 如果锁不存在，返回true</span></span><br><span class="line"><span class="comment">     * 如果锁存在，但是请求标识不对，返回失败</span></span><br><span class="line"><span class="comment">     * 如果锁存在，请求标识正确，返回成功</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> lockKey 锁</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> requestId 请求标识</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> 是否释放成功</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">unlock</span><span class="params">(String lockKey, String requestId)</span> </span>&#123;</span><br><span class="line">        String script = <span class="string">"if (redis.call('EXISTS', KEYS[1]) ~= 1) then return 1 elseif (redis.call('get', KEYS[1]) "</span></span><br><span class="line">                        + <span class="string">"== ARGV[1]) then return redis.call('del', KEYS[1]) else return 0 end"</span>;</span><br><span class="line">        <span class="keyword">try</span> (Jedis jedis = getResource()) &#123;</span><br><span class="line">            Object result = jedis.eval(script, Collections.singletonList(lockKey), Collections.singletonList(requestId));</span><br><span class="line">            <span class="keyword">if</span> (RELEASE_SUCCESS.equals(result)) &#123;</span><br><span class="line">                <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception ex) &#123;</span><br><span class="line">            <span class="keyword">throw</span> ex;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div></p><ul><li>第一个为key，使用key来当锁，因为key是唯一的。</li><li>第二个为value，传的是requestId，客户端的唯一标志。</li><li>第三个为nxxx，传NX意思是SET IF NOT EXIST，即当key不存在时，进行set操作；若key已经存在，则不做任何操作；</li><li>第四个为expx，传PX意思是给这个key加一个过期的设置，具体时间由第五个参数决定。</li><li>第五个为time，与第四个参数相呼应，代表key的过期时间。</li></ul><p>&emsp;&emsp;加锁用了新版的set()方法，通过requestId解决了分布式下不同客户端时间不统一问题，通过超期时间解决了多次getset覆盖问题，通过解锁时判断requestId解决了任何客户端都可以解锁问题。<br>&emsp;&emsp;解锁的第一行代码，是一个简单的Lua脚本代码，第二行代码，将Lua代码传到jedis.eval()方法里，并使参数KEYS[1]赋值为lockKey，ARGV[1]赋值为requestId。eval()方法是将Lua代码交给Redis服务端执行。</p><blockquote><p>这段Lua代码的功能：首先获取锁对应的value值，检查是否与requestId相等，如果相等则删除锁（解锁）。在eval命令执行Lua代码的时候，Lua代码将被当成一个命令去执行，并且直到eval命令执行完成，Redis才会执行其他命令。</p></blockquote><p>&emsp;&emsp;注意一种不合适的解锁方法：<br><div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="false"data-rel="JAVA"><figure class="iseeu highlight /java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">releaseLock</span><span class="params">(String lockKey, String requestId)</span> </span>&#123;</span><br><span class="line">    <span class="comment">// 判断加锁与解锁是不是同一个客户端</span></span><br><span class="line">    <span class="keyword">if</span> (requestId.equals(jedis.get(lockKey))) &#123;</span><br><span class="line">        <span class="comment">// 若在此时，这把锁突然不是这个客户端的，则会误解锁</span></span><br><span class="line">        jedis.del(lockKey);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div></p><p>&emsp;&emsp;这种方式的问题在于如果调用jedis.del()方法的时候，这把锁已经不属于当前客户端的时候会解除他人加的锁。比如客户端A加锁，一段时间之后客户端A解锁，在执行jedis.del()之前，锁突然过期了，此时客户端B尝试加锁成功，然后客户端A再执行del()方法，则将客户端B的锁给解除了。</p>]]></content>
      
      
      <categories>
          
          <category> 分布式 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Java </tag>
            
            <tag> Redis </tag>
            
            <tag> 分布式锁 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>【置顶】Java面试之旅</title>
      <link href="/2018/09/03/Java%20%E9%9D%A2%E8%AF%95%E4%B9%8B%E6%97%85/"/>
      <url>/2018/09/03/Java%20%E9%9D%A2%E8%AF%95%E4%B9%8B%E6%97%85/</url>
      
        <content type="html"><![CDATA[<blockquote><p>校招笔经面经汇总</p></blockquote><a id="more"></a><h1 id="小博Spring-Boot快速入门GitChat"><a href="#小博Spring-Boot快速入门GitChat" class="headerlink" title="小博Spring Boot快速入门GitChat"></a>小博Spring Boot快速入门GitChat</h1><p><a href="https://gitbook.cn/gitchat/activity/5a444c451f6ee91a25846ac1" target="_blank" rel="noopener">https://gitbook.cn/gitchat/activity/5a444c451f6ee91a25846ac1</a></p><h1 id="小博Java面试路上的点点滴滴"><a href="#小博Java面试路上的点点滴滴" class="headerlink" title="小博Java面试路上的点点滴滴"></a>小博Java面试路上的点点滴滴</h1><table><thead><tr><th>篇章</th><th>博客地址 </th></tr></thead><tbody><tr><td>Java 面试之基础篇</td><td><a href="http://zhangchong.xin/2018/08/28/Java%20%E9%9D%A2%E8%AF%95%E4%B9%8B%E8%AF%AD%E8%A8%80%E5%9F%BA%E7%A1%80/">点击跳转</a></td></tr><tr><td>Java 面试之框架篇</td><td><a href="http://zhangchong.xin/2018/08/28/Java%20%E9%9D%A2%E8%AF%95%E4%B9%8B%E6%8A%80%E6%9C%AF%E6%A1%86%E6%9E%B6/">点击跳转</a></td></tr><tr><td>Java 面试之数据结构篇</td><td><a href="http://zhangchong.xin/2018/08/28/Java%20%E9%9D%A2%E8%AF%95%E4%B9%8B%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/">点击跳转</a></td></tr><tr><td>Java 面试之JVM篇</td><td><a href="http://zhangchong.xin/2018/09/03/Java%20%E9%9D%A2%E8%AF%95%E4%B9%8B%20JVM/">点击跳转</a></td></tr><tr><td>Java 面试之多线程篇</td><td><a href="http://zhangchong.xin/2018/09/03/Java%20%E9%9D%A2%E8%AF%95%E4%B9%8B%E7%BA%BF%E7%A8%8B%E4%B8%8E%E9%94%81/">点击跳转</a></td></tr><tr><td>Java 面试之数据库篇</td><td><a href="http://zhangchong.xin/2018/07/21/Java%20%E9%9D%A2%E8%AF%95%E4%B9%8B%E6%95%B0%E6%8D%AE%E5%BA%93/">点击跳转</a></td></tr><tr><td>Java 面试之计算机网络篇</td><td><a href="http://zhangchong.xin/2018/07/21/Java%20%E9%9D%A2%E8%AF%95%E4%B9%8B%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C/">点击跳转</a></td></tr><tr><td>Java 面试之操作系统篇</td><td><a href="http://zhangchong.xin/2018/07/21/Java%20%E9%9D%A2%E8%AF%95%E4%B9%8B%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F/">点击跳转</a></td></tr><tr><td>Java 面试之算法篇</td><td><a href="http://zhangchong.xin/2018/07/21/Java%20%E9%9D%A2%E8%AF%95%E4%B9%8B%E7%AE%97%E6%B3%95/">点击跳转</a></td></tr><tr><td>Java 面试之附加篇</td><td><a href="http://zhangchong.xin/2018/08/28/Java%20%E9%9D%A2%E8%AF%95%E4%B9%8B%E7%BB%93%E6%9D%9F%E9%97%AE%E7%AD%94/">点击跳转</a></td></tr></tbody></table>]]></content>
      
      
      <categories>
          
          <category> 笔经面经 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Java </tag>
            
            <tag> 校招 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Java面试之JVM</title>
      <link href="/2018/09/03/Java%20%E9%9D%A2%E8%AF%95%E4%B9%8B%20JVM/"/>
      <url>/2018/09/03/Java%20%E9%9D%A2%E8%AF%95%E4%B9%8B%20JVM/</url>
      
        <content type="html"><![CDATA[<blockquote><p>笔经面经归纳汇总：Java虚拟机</p></blockquote><a id="more"></a><h1 id="JVM结构图"><a href="#JVM结构图" class="headerlink" title="JVM结构图"></a>JVM结构图</h1><p><img src="https://raw.githubusercontent.com/chung567115/chung567115.github.io/hexo-blog/blog-img/39-1.png" alt="JVM"></p><h1 id="类加载机制"><a href="#类加载机制" class="headerlink" title="类加载机制"></a>类加载机制</h1><h2 id="类加载的五个过程"><a href="#类加载的五个过程" class="headerlink" title="类加载的五个过程"></a>类加载的五个过程</h2><ul><li><kbd>加载</kbd>：类加载器获二进制字节流，将静态存储结构转化为方法区的运行时数据结构，并生成此类的Class对象。</li><li><kbd>验证</kbd>：验证文件格式、元数据、字节码、符号引用，确保Class的字节流中包含的信息符合当前虚拟机的要求。</li><li><kbd>准备</kbd>：为类变量分配内存并设置其初始值，这些变量使用的内存都将在方法区中进行分配。</li><li><kbd>解析</kbd>：将常量池内的符号引用替换为直接引用，包括类或接口的解析、字段解析、类方法解析、接口方法解析。</li><li><p><kbd>初始化</kbd>：执行类中定义的Java程序代码（字节码）。</p><blockquote><p>类的生命周期(7个)：加载、验证、准备、解析、初始化、使用、卸载</p></blockquote></li></ul><h2 id="Java类加载器及如何加载类"><a href="#Java类加载器及如何加载类" class="headerlink" title="Java类加载器及如何加载类"></a>Java类加载器及如何加载类</h2><p>&emsp;&emsp;<strong>类加载器</strong>是实现<strong>通过一个类的全限定名来获取描述此类的二进制文件流</strong>的代码模块。类的加载是通过双亲委派模型来完成的，<strong>双亲委派模型</strong>即为下图所示的<strong>类加载器之间的层次关系</strong>。<br>&emsp;&emsp;双亲委派模型的工作过程是：如果一个类加载器接收到类加载的请求，它会先把这个请求委派给父加载器去完成，只有当父加载器反馈自己无法完成加载请求时，子加载器才会尝试自己去加载。可以得知，<strong>所有的加载请求最终都会传送到启动类加载器中</strong>。  </p><p><img src="https://raw.githubusercontent.com/chung567115/chung567115.github.io/hexo-blog/blog-img/39-2.png" alt="双亲委派模型"></p><blockquote><p>使用双亲委派模型组织类加载器之间的关系有一个显而易见的好处：<strong>Java类随着它的类加载器一起具备了某种带优先级的层次关系</strong>。如果没有使用双亲委派模型，而是由各类加载器自行加载，假如用户自己编写一个Object类放在ClassPath中，那么系统将会出现多个不同的Object类，Java体系中最基础的行为也就无法保证，应用程序将变得一片混乱。</p></blockquote><h1 id="内存分配"><a href="#内存分配" class="headerlink" title="内存分配"></a>内存分配</h1><h2 id="JVM内存结构"><a href="#JVM内存结构" class="headerlink" title="JVM内存结构"></a>JVM内存结构</h2><ul><li><strong>Java堆</strong>：Java虚拟机所管理的内存中最大的一块，唯一的目的是存放对象实例。由于是垃圾收集器管理的主要区域，因此有时候也被称作<code>GC堆</code>。</li><li><strong>方法区</strong>：用于存储已被虚拟机加载的类信息、常量、静态变量、及时编译器编译后的代码等数据。</li><li><strong>程序计数器</strong>：当前线程所执行字节码的行号指示器。每一个线程都有一个独立的程序计数器，线程的阻塞、恢复、挂起等一系列操作都需要程序计数器的参与，因此必须是线程私有的。</li><li><strong>Java虚拟机栈</strong>：用于描述Java方法执行的模型。每个方法在执行的同时都会创建一个栈帧，用于存储局部变量表、操作数栈、动态链接、方法出口等信息。<code>每一个方法从调用至执行完成，对应于一个栈帧在虚拟机栈中从入栈到出栈</code>。</li><li><p><strong>本地方法栈</strong>：与虚拟机栈作用相似，只不过虚拟机栈为执行Java方法服务，而本地方法栈为执行Native方法服务，比如在Java中调用C/C++。</p><p>  <img src="https://raw.githubusercontent.com/chung567115/chung567115.github.io/hexo-blog/blog-img/39-3.png" alt="Java虚拟机运行时数据区"></p></li></ul><h2 id="JVM内存分代机制，各代特点，分代回收优点"><a href="#JVM内存分代机制，各代特点，分代回收优点" class="headerlink" title="JVM内存分代机制，各代特点，分代回收优点"></a>JVM内存分代机制，各代特点，分代回收优点</h2><ul><li><strong>新生代（Young）</strong>：HotSpot将新生代划分为三块，一块较大的Eden空间和两块较小的Survivor空间，默认比例为<code>8：1：1</code>。</li><li><strong>老年代（Old）</strong>：在新生代中经历了多次GC后仍然存活下来的对象会进入老年代中。老年代中的对象生命周期较长，存活率比较高，在老年代中进行GC的频率相对而言较低，而且回收的速度也比较慢。</li><li><p><strong>永久代（Permanent）</strong>：永久代存储类信息、常量、静态变量、即时编译器编译后的代码等数据，对这一区域而言，一般而言不会进行垃圾回收。</p><blockquote><p>新版已经删除永久代。</p></blockquote><p>  <img src="https://raw.githubusercontent.com/chung567115/chung567115.github.io/hexo-blog/blog-img/39-4.png" alt="JVM共享数据空间划分图"></p><p>  &emsp;&emsp;新生成的对象在Eden区分配（大对象除外，大对象直接进入老年代），<strong>当Eden区没有足够的空间进行分配时，虚拟机将发起一次Minor GC</strong>。GC开始时，对象只会存在于Eden区和From Survivor区，To Survivor区是空的（作为保留区域）。GC进行时，Eden区中所有存活的对象都会被复制到To Survivor区，而在From Survivor区中，仍存活的对象会根据它们的年龄值决定去向，年龄值达到年龄阀值（默认为15，新生代中的对象每熬过一轮垃圾回收，年龄值就加1，GC分代年龄存储在对象的Header中）的对象会被移到老年代中，没有达到阀值的对象会被复制到To Survivor区。接着清空Eden区和From Survivor区，新生代中存活的对象都在To Survivor区。接着， From Survivor区和To Survivor区会交换它们的角色，也就是新的To Survivor区就是上次GC清空的From Survivor区，新的From Survivor区就是上次GC的To Survivor区，总之，不管怎样都会保证To Survivor区在一轮GC后是空的。GC时当To Survivor区没有足够的空间存放上一次新生代收集下来的存活对象时，需要依赖老年代进行分配担保，将这些对象存放在老年代中。  </p></li></ul><h2 id="常用的内存调试工具"><a href="#常用的内存调试工具" class="headerlink" title="常用的内存调试工具"></a>常用的内存调试工具</h2><ul><li>JConsole（可视化工具，可排查死锁、生成Heap Dump文件等）</li><li>Jmap</li><li>jstack</li></ul><h1 id="垃圾回收"><a href="#垃圾回收" class="headerlink" title="垃圾回收"></a>垃圾回收</h1><p>&emsp;&emsp;垃圾回收需要完成的三件事：①哪些内存需要回收；②什么时候回收；③如何回收。  </p><h2 id="哪些内存需要回收"><a href="#哪些内存需要回收" class="headerlink" title="哪些内存需要回收"></a>哪些内存需要回收</h2><ul><li>堆</li><li>方法区</li></ul><h2 id="什么时候回收"><a href="#什么时候回收" class="headerlink" title="什么时候回收"></a>什么时候回收</h2><ul><li><strong>引用计数算法</strong>：给对象添加一个引用计数器，每当有一个地方引用它时，计数器加1，每当一个引用失效时，计数器减1，任何时刻计数器为0则代表对象不被引用。<blockquote><p>注意：引用计数算法有一个比较大的问题，那就是它不能处理环形数据。即如果有两个对象相互引用，那么这两个对象计数器始终不为0，也就不能被回收。</p></blockquote></li><li><strong>可达性分析算法</strong>：设立若干根对象（GC Roots），每个对象都是一个子节点。从根向下搜索所走过的路径叫<code>引用链</code>，当一个对象到根无任何引用链相连，证明此对象不可用。<br>  &emsp;&emsp;Java语言中可以作为GC Roots的对象包括以下几种：  <ul><li>虚拟机栈中引用的对象</li><li>方法区中类静态属性引用的对象</li><li>方法区中常量引用的对象</li><li>本地方法栈中<code>JNI</code>引用的对象</li></ul></li></ul><h2 id="如何回收"><a href="#如何回收" class="headerlink" title="如何回收"></a>如何回收</h2><ul><li><strong>标记-清除算法</strong>：先标记出所有需要回收的对象，标记完成后统一回收所有被标记的对象。</li><li><strong>复制算法</strong>：将可用内存分为大小相等的两块，每次只使用其中一块，当这一块内存用完了，就将存活的对象复制到另一块，最后将此块内存一次性清理掉。</li><li><strong>标记-整理算法</strong>：先标记所有需要回收的对象，然后让所有存活的对象向一端移动，最后直接清理掉边界以外的另一端内存。</li><li><strong>分代收集算法</strong>：把Java堆分为新生代和老年代。新生代中只有少量对象会存活，就选用<code>复制</code>算法；老年代中对象存活率较高，选用<code>标记-XX</code>算法。</li></ul><h2 id="垃圾收集器有哪些"><a href="#垃圾收集器有哪些" class="headerlink" title="垃圾收集器有哪些"></a>垃圾收集器有哪些</h2><ul><li><strong>Serial收集器</strong>：单线程收集器。收集垃圾时必须暂停其他所有工作线程，直到它收集结束。</li><li><strong>Parnew收集器</strong>：Serial收集器多线程版本。</li><li><strong>Parallel Scavenge收集器</strong>：使用复制算法的新生代收集器。</li><li><strong>Serial Old收集器</strong>：使用标记-整理算法的老年代单线程收集器。</li><li><strong>Parallel Old收集器</strong>：使用标记-整理算法的老年代多线程收集器。</li><li><strong>CMS收集器</strong>：基于标记-清除算法的低停顿并发收集器。运作步骤为①初始标记②并发标记③重新标记④并发清除。</li><li><strong>G1收集器</strong>：最前沿的面向服务端应用的垃圾收集器。运作步骤为①初始标记②并发标记③最终标记④筛选回收。G1收集器有以下特点<ul><li>并行与并发：无需停顿Java线程来执行GC动作。</li><li>分代收集：可独立管理整个GC堆。</li><li>空间整合：运行期间不会产生内存空间碎片。</li><li>可预测的停顿：除了低停顿，还能建立可预测的停顿时间模型。</li></ul></li></ul><h2 id="Minor-GC与Full-GC"><a href="#Minor-GC与Full-GC" class="headerlink" title="Minor GC与Full GC"></a>Minor GC与Full GC</h2><ul><li>新生代 GC（Minor GC）：指发生在新生代的垃圾收集动作，因为 Java 对象大多都具备朝生夕灭的特性，所以 Minor GC 非常频繁，一般回收速度也比较快。</li><li>老年代 GC（Major GC  / Full GC）：指发生在老年代的垃圾收集动作，出现了 Major GC，经常会伴随至少一次 Minor GC（非绝对），MajorGC 的速度一般会比 Minor GC 慢10倍以上。</li></ul><p>&emsp;&emsp;Minor GC与Full GC触发条件：  </p><ul><li>Minor GC触发条件：<ul><li>当Eden区没有足够的空间进行分配时</li><li>老年代最大可用连续空间<strong>大于</strong>Minor GC历次晋升到老年代对象的平均大小</li></ul></li><li>Full GC触发条件：<ul><li>调用System.gc()时（系统建议执行Full GC，但是不必然执行）</li><li>老年代空间不足时</li><li>方法区空间不足时</li><li>老年代最大可用连续空间<strong>小于</strong>Minor GC历次晋升到老年代对象的平均大小</li><li>CMS GC在垃圾回收的时候，当对象从Eden区进入Survivor区，Survivor区空间不足需要放入老年代，而老年代空间也不足时</li></ul></li></ul>]]></content>
      
      
      <categories>
          
          <category> 笔经面经 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Java </tag>
            
            <tag> 校招 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Java面试之线程与锁</title>
      <link href="/2018/09/03/Java%20%E9%9D%A2%E8%AF%95%E4%B9%8B%E7%BA%BF%E7%A8%8B%E4%B8%8E%E9%94%81/"/>
      <url>/2018/09/03/Java%20%E9%9D%A2%E8%AF%95%E4%B9%8B%E7%BA%BF%E7%A8%8B%E4%B8%8E%E9%94%81/</url>
      
        <content type="html"><![CDATA[<blockquote><p>笔经面经归纳汇总：多线程和锁</p></blockquote><a id="more"></a><h1 id="进程、线程"><a href="#进程、线程" class="headerlink" title="进程、线程"></a>进程、线程</h1><p>&emsp;&emsp;<strong>进程是操作系统分配资源的最小单元，线程是操作系统调度的最小单元</strong>。一个进程一般包括多个线程，这些线程共享本进程的内存和资源。</p><h2 id="线程的状态"><a href="#线程的状态" class="headerlink" title="线程的状态"></a>线程的状态</h2><p><img src="https://raw.githubusercontent.com/chung567115/chung567115.github.io/hexo-blog/blog-img/38-1.png" alt="线程状态"></p><h2 id="实现线程的几种方式"><a href="#实现线程的几种方式" class="headerlink" title="实现线程的几种方式"></a>实现线程的几种方式</h2><ul><li>继承Thread类创建线程</li><li>实现Runnable接口创建线程</li><li>实现Callable接口创建新线程(可用Future返回结果)</li></ul><h2 id="ThreadLocal"><a href="#ThreadLocal" class="headerlink" title="ThreadLocal"></a>ThreadLocal</h2><p>&emsp;&emsp;设计理念是为了减少同一个线程内多个函数或者组件之间一些公共变量的传递的复杂度。作用是提供线程内部的局部变量，这些变量在多线程环境下访问(get/set)时能保证与其它线程里的变量相对独立。打个比方，多人(多个线程)使用自己的交通卡(线程私有变量)乘公交转地铁(两个函数)。<br>&emsp;&emsp;注意：使用 ThreadLocal 时要保证能够管理它的创建、销毁，否则会出问题。因为 ThreadLocal 是和 Thread 绑定的，如果 Thread 是从 ThreadPool 中拿出来的，那么意味着 Thread 可能会被复用。如果被复用，你就一定得保证这个 Thread 上一次结束的时候，其关联的 ThreadLocal 被清空掉，否则就会串到下一次使用。</p><blockquote><p>应用场景：银行转账包含一系列的操作，把转出账户的余额减少，把转入账户的余额增加，这两个操作要在同一个事务中完成，它们必须使用相同的数据库连接对象，而这个连接信息可以用ThreadLocal保存。</p></blockquote><h2 id="ThreadPool的用法"><a href="#ThreadPool的用法" class="headerlink" title="ThreadPool的用法"></a>ThreadPool的用法</h2><p>&emsp;&emsp;使用ThreadPoolExecutor创建线程池，其中5参构造函数参数列表如下：</p><ul><li>int corePoolSize：线程池中核心线程数，一般为cpu数量</li><li>int maximumPoolSize： 线程池中线程总数，一般为2*cpu数量(<code>I/O密集型时maxSize设置大一点，提高cpu利用率</code>)</li><li>long keepAliveTime：线程池中非核心线程闲置超时时长</li><li>TimeUnit unit：keepAliveTime的单位</li><li>BlockingQueue workQueue：线程池中的任务队列，维护着等待执行的Runnable对象 <ul><li>SynchronousQueue：接收到任务时，会直接提交给线程处理，而不保留它</li><li>LinkedBlockingQueue：接收到任务时，如果当前线程数小于核心线程数，则新建核心线程处理任务；如果当前线程数等于核心线程数，则进入队列等待</li><li>ArrayBlockingQueue：接收到任务时，如果没有达到corePoolSize的值，则新建核心线程执行任务；如果达到了，则入队等候；如果队列已满，则新建非核心线程执行任务；如果总线程数到了maximumPool，且队列也满了，则发生错误</li><li>DelayQueue：接收到任务时，首先先入队，只有达到了指定的延时时间，才会执行任务。注意：队列内元素必须实现Delayed接口，这就意味着你传进去的任务必须先实现Delayed接口</li></ul></li><li><p>RejectedExecutionHandler handler：BlockingQueue 打满时的几种拒绝策略</p><ul><li>Abort策略：默认策略，新任务提交时直接抛出未检查的异常</li><li>RejectedExecutionException，该异常可由调用者捕获</li><li>CallerRuns策略：为调节机制，既不抛弃任务也不抛出异常，而是将某些任务回退到调用者。不会在线程池的线程中执行新的任务，而是在调用exector的线程中运行新的任务</li><li>Discard策略：新提交的任务被抛弃</li><li><p>DiscardOldest策略：队列的是“队头”的任务，然后尝试提交新的任务</p><blockquote><p>向线程池提交一个要执行的任务<code>threadPoolExecutor.execute(runnable);</code></p></blockquote></li></ul></li></ul><p>&emsp;&emsp;当新提交一个任务时：</p><ol><li>如果<code>当前线程数&lt;corePoolSize</code>，新增一个核心线程处理新的任务</li><li>如果<code>当前线程数=corePoolSize</code>，新任务会被放入阻塞队列等待</li><li>如果阻塞队列满了，且<code>当前线程数&lt;maximumPoolSize</code>，新增线程来处理任务</li><li>如果阻塞队列满了，且<code>当前线程数=maximumPoolSize</code>，那么线程池已达极限，此时会根据饱和策略<code>RejectedExecutionHandler</code>拒绝新任务</li></ol><h2 id="使用线程池的优势："><a href="#使用线程池的优势：" class="headerlink" title="使用线程池的优势："></a>使用线程池的优势：</h2><ul><li>降低资源消耗：重复利用已创建的线程，降低创建和销毁造成的消耗。</li><li>提高响应速度：任务可以不需要等到线程创建就能立即执行(参考上条)。</li><li>提高管理性：可以进行统一的分配、调优和监控。</li></ul><h2 id="三大常用并发工具类"><a href="#三大常用并发工具类" class="headerlink" title="三大常用并发工具类"></a>三大常用并发工具类</h2><ul><li>Semaphore：并发控制，控制刷新账单并发数，tryAcquire()、release()</li><li>CountDownLanch：计数器，与会人员到齐了会议才能开始，await()、countDown()</li><li>Cyclicbarrier：同步屏障(可以被重用)，等待本周每天的账单都计算完之后，再计算日均开销，await()</li></ul><h2 id="concurrent包"><a href="#concurrent包" class="headerlink" title="concurrent包"></a>concurrent包</h2><ul><li>Executor接口：具体Runnable任务的执行者。</li><li>Executors类：创建线程池工具类（阿里手册禁止用此工具类）。</li><li>ExecutorService接口：线程池管理者，可提交Runnable、Callable让其调度。</li><li>ThreadPoolExecutor类：线程池工具类。（ExecutorService的一种具体实现）。</li><li>CompletionService接口：ExecutorService的扩展，可以获得线程执行结果。</li><li>ReentrantLock类：可重入互斥锁（实现Lock接口）。</li><li>BlockingQueue接口：阻塞队列。</li><li>Future接口：一个线程执行结束后取返回的结果，还提供了cancel()终止线程。</li><li>CountDownLatch类：当计数器值到达0时，它表示所有的线程已经完成了任务，然后在闭锁上等待的线程就可以恢复执行任务。</li></ul><h1 id="锁"><a href="#锁" class="headerlink" title="锁"></a>锁</h1><h2 id="死锁产生的必要条件"><a href="#死锁产生的必要条件" class="headerlink" title="死锁产生的必要条件"></a>死锁产生的必要条件</h2><ul><li><strong>互斥条件</strong>：进程对所分配的资源进行排他性控制，即在一段时间内某资源仅为一个进程所占有。此时若有其他进程请求该资源，则请求进程只能等待。</li><li><strong>不剥夺条件</strong>：进程所获得的资源在未使用完毕之前，不能被其他进程强行夺走，即只能 由获得该资源的进程主动释放。</li><li><strong>请求和保持条件</strong>：进程已经保持了至少一个资源，但又提出了新的资源请求，而该资源 已被其他进程占有，此时请求进程被阻塞，但对自己已获得的资源保持不放。</li><li><strong>环路等待条件</strong>：存在一个进程——资源的环形链，即进程集合{P0，P1，P2，···，Pn}中的P0正在等待一个P1占用的资源；P1正在等待P2占用的资源，……，Pn正在等待已被P0占用的资源。</li></ul><h2 id="避免死锁"><a href="#避免死锁" class="headerlink" title="避免死锁"></a>避免死锁</h2><ul><li>加锁顺序（线程按一定顺序加锁，若所有线程都按相同顺序获得锁，就能避免死锁） </li><li>加锁时限（线程获取锁时加上时限，超时则放弃并释放所占有的锁，就能避免死锁）</li><li>死锁检测（一个更优的预防机制，主要针对不可能实现按序加锁和加锁时限的场景）</li></ul><h2 id="锁的类型"><a href="#锁的类型" class="headerlink" title="锁的类型"></a>锁的类型</h2><table><thead><tr><th style="text-align:center">锁</th><th style="text-align:center">解释</th></tr></thead><tbody><tr><td style="text-align:center">公平锁/非公平锁</td><td style="text-align:center">公平锁是指多个线程按照申请锁的顺序来获取锁</td></tr><tr><td style="text-align:center">可重入锁</td><td style="text-align:center">同一线程在外层方法已获取锁时，进入内层方法会自动获取锁</td></tr><tr><td style="text-align:center">独享锁/共享锁</td><td style="text-align:center">一次可被<strong>单个/多个</strong>线程所持有，例如ReadWriteLock的<strong>写锁/读锁</strong></td></tr><tr><td style="text-align:center">互斥锁/读写锁</td><td style="text-align:center">一种互斥锁：ReentrantLock；一种读写锁：ReadWriteLock</td></tr><tr><td style="text-align:center">乐观锁/悲观锁</td><td style="text-align:center">悲观锁认为对于同一个数据的并发操作一定会发生修改</td></tr><tr><td style="text-align:center">分段锁</td><td style="text-align:center">一种锁的设计，具体应用有ConcurrentHashMap</td></tr><tr><td style="text-align:center">自旋锁</td><td style="text-align:center">尝试获取锁的线程不会立即阻塞，而是采用循环的方式去尝试获取</td></tr><tr><td style="text-align:center">偏向锁/轻量级锁/重量级锁</td><td style="text-align:center">指锁的状态，并且是针对synchronized</td></tr></tbody></table><blockquote><p><strong>偏向锁</strong>是指一段同步代码一直被一个线程所访问，那么该线程会自动获取锁。<strong>轻量级锁</strong>是指当锁是偏向锁的时候，被另一个线程所访问，偏向锁就会升级为轻量级锁，其他线程会通过自旋的形式尝试获取锁，不会阻塞，提高性能。<strong>重量级锁</strong>是指当锁为轻量级锁的时候，另一个线程虽然是自旋，但当自旋一定次数还没获取到锁的时候，就会进入阻塞，该锁膨胀为重量级锁。</p></blockquote><h2 id="各种比较"><a href="#各种比较" class="headerlink" title="各种比较"></a>各种比较</h2><h3 id="synchronized和volatile"><a href="#synchronized和volatile" class="headerlink" title="synchronized和volatile"></a>synchronized和volatile</h3><ol><li><p>synchronized是Java中的关键字，是一种同步锁。有如下几种用法：  </p> <div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="false"data-rel="JAVA"><figure class="iseeu highlight /java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//1. 修饰方法(方法锁)</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">synchronized</span> <span class="keyword">void</span> <span class="title">syncMethod</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="comment">//doSomething</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//2. 修饰代码块(对象锁)</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">synMethod</span><span class="params">(<span class="keyword">int</span> arg)</span></span>&#123;</span><br><span class="line">    <span class="keyword">synchronized</span>(arg) &#123;</span><br><span class="line">        <span class="comment">//doSomething</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"> <span class="comment">//3. 修饰类(类锁)</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SyncClass</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">method</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">synchronized</span>(SyncClass.class) &#123;</span><br><span class="line">            <span class="comment">//doSomething</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div><blockquote><p>锁的级别有对象级别和类级别，1和2属于对象级别，3属于类级别</p></blockquote></li><li><p>volatile 是在告诉JVM当前变量在cpu缓存中的值是不确定的，需要从主存中读取（<strong>禁止指令的重排序</strong>）； synchronized则是锁定当前变量，只有当前线程可以访问该变量，其他线程被阻塞住。volatile与synchronized的区别如下：  </p></li></ol><table><thead><tr><th style="text-align:center">比较点</th><th style="text-align:center">volatile</th><th style="text-align:center">synchronized</th></tr></thead><tbody><tr><td style="text-align:center">阻塞</td><td style="text-align:center">不会发生线程阻塞</td><td style="text-align:center">会发生线程阻塞</td></tr><tr><td style="text-align:center">修饰</td><td style="text-align:center">变量</td><td style="text-align:center">方法、代码块、类</td></tr><tr><td style="text-align:center">原子性</td><td style="text-align:center">不能保证</td><td style="text-align:center">可以保证</td></tr><tr><td style="text-align:center">安全性</td><td style="text-align:center">非线程安全</td><td style="text-align:center">线程安全</td></tr><tr><td style="text-align:center">解决问题</td><td style="text-align:center">变量在多线程之间的可见性</td><td style="text-align:center">多线程之间访问资源的同步性</td></tr></tbody></table><h3 id="sychronized和Lock"><a href="#sychronized和Lock" class="headerlink" title="sychronized和Lock"></a>sychronized和Lock</h3><table><thead><tr><th style="text-align:center">比较点</th><th style="text-align:center">sychronized</th><th style="text-align:center">Lock</th></tr></thead><tbody><tr><td style="text-align:center">解释</td><td style="text-align:center">Java关键字</td><td style="text-align:center">Java接口</td></tr><tr><td style="text-align:center">显隐</td><td style="text-align:center">隐式锁</td><td style="text-align:center">需显示指定起始位置和终止位置</td></tr><tr><td style="text-align:center">释放锁</td><td style="text-align:center">获取锁的线程会在执行完同步代码后自动释放锁（或者JVM会在线程执行发生异常时释放锁）</td><td style="text-align:center">在finally中必须释放锁，不然容易造成线程死锁</td></tr><tr><td style="text-align:center">等待</td><td style="text-align:center">一个线程获得锁后阻塞，其他线程会一直等待</td><td style="text-align:center">线程不会一直等待，超时会释放</td></tr><tr><td style="text-align:center">锁类型</td><td style="text-align:center">可重入但不可中断、非公平</td><td style="text-align:center">可重入、可中断、可公平也可不公平</td></tr></tbody></table><h3 id="sleep-和wait-，yield-和notify"><a href="#sleep-和wait-，yield-和notify" class="headerlink" title="sleep()和wait()，yield()和notify()"></a>sleep()和wait()，yield()和notify()</h3><ul><li>sleep()是Thread类的一个静态函数，它会使调用线程睡眠(阻塞)一段时间，让其他线程有机会继续执行，但它<strong>不释放锁</strong>。</li><li>wait()是Object类的方法，它会使当前线程阻塞，直到调用notify()，则被唤醒，它<strong>会释放锁</strong>。</li><li>yield()是Thread类的方法，它会使运行中的线程重新变为就绪状态，让同优先级线程重新竞争。</li><li>notify()是Object类的方法，它会唤醒单个线程。</li></ul><h2 id="分布式锁"><a href="#分布式锁" class="headerlink" title="分布式锁"></a>分布式锁</h2><p>&emsp;&emsp;一种跨服务器(JVM)控制共享资源访问的互斥机制。在分布式系统环境下，一个方法在同一时间只能被一台机器的一个线程执行。  </p><ol><li><strong>基于数据库实现分布式锁</strong>：在数据库中创建一张表，表中包含<strong>方法名</strong>字段，并在方法名字段上创建唯一索引，想要执行某个方法，就使用这个方法名向表中插入数据，成功插入则获取锁，执行完成后删除对应的行数据释放锁。</li><li><p><strong>基于缓存（Redis等）实现分布式锁</strong>：获取锁的时候，使用<strong>setnx</strong>加锁，并使用<strong>expire</strong>命令为锁添加一个超时时间，超过该时间则自动释放锁，锁的value值为当前时间加上锁定时间，释放锁的时候执行<strong>delete</strong>进行释放。</p><blockquote><p>Redis实现分布式锁详见小博另一篇博客:&emsp;<a href="http://zhangchong.xin/2018/10/08/%E5%88%86%E5%B8%83%E5%BC%8F%E9%94%81%E4%B9%8BRedis%E5%AE%9E%E7%8E%B0/">点击查看</a></p></blockquote></li><li><strong>基于Zookeeper实现分布式锁</strong>：①创建一个目录dislock；②线程A想获取锁就在dislock目录下创建临时顺序节点；③获取dislock目录下所有的子节点，然后获取比自己小的兄弟节点，如果不存在，则说明当前线程顺序号最小，获得锁；④线程B获取所有节点，判断自己不是最小节点，设置监听比自己次小的节点；⑤线程A处理完，删除自己的节点，线程B监听到变更事件，判断自己是不是最小的节点，如果是则获得锁。</li></ol>]]></content>
      
      
      <categories>
          
          <category> 笔经面经 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Java </tag>
            
            <tag> 校招 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Java面试之结束问答</title>
      <link href="/2018/08/28/Java%20%E9%9D%A2%E8%AF%95%E4%B9%8B%E7%BB%93%E6%9D%9F%E9%97%AE%E7%AD%94/"/>
      <url>/2018/08/28/Java%20%E9%9D%A2%E8%AF%95%E4%B9%8B%E7%BB%93%E6%9D%9F%E9%97%AE%E7%AD%94/</url>
      
        <content type="html"><![CDATA[<blockquote><p>笔经面经归纳汇总：结束问答</p></blockquote><a id="more"></a><h1 id="技术优化"><a href="#技术优化" class="headerlink" title="技术优化"></a>技术优化</h1><h2 id="线程池优化"><a href="#线程池优化" class="headerlink" title="线程池优化"></a>线程池优化</h2><ul><li>设置最大线程数</li><li>设置最小核心线程数</li><li>设置额外线程存活时间</li><li>选择线程池队列</li><li>选择合适的线程池</li><li>选择合适的饱和策略</li></ul><h2 id="锁优化"><a href="#锁优化" class="headerlink" title="锁优化"></a>锁优化</h2><ul><li>尽量不要锁住方法</li><li>缩小同步代码块，只锁数据</li><li>锁中尽量不要再包含锁</li><li>将锁私有化，在内部管理锁</li><li>进行适当的锁分解</li></ul><h2 id="HTTP-1-1-rightarrow-HTTP-2-0"><a href="#HTTP-1-1-rightarrow-HTTP-2-0" class="headerlink" title="HTTP 1.1 $\rightarrow$ HTTP 2.0"></a>HTTP 1.1 $\rightarrow$ HTTP 2.0</h2><ul><li><p>Tomcat 在 server.xml 里配置HTTP 协议版本</p><div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="false"data-rel="XML"><figure class="iseeu highlight /xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">Connector</span> <span class="attr">port</span>=<span class="string">"8443"</span> <span class="attr">protocol</span>=<span class="string">"org.apache.coyote.http11.Http11AprProtocol"</span></span></span><br><span class="line"><span class="tag">            <span class="attr">maxThreads</span>=<span class="string">"150"</span> <span class="attr">SSLEnabled</span>=<span class="string">"true"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">UpgradeProtocol</span> <span class="attr">className</span>=<span class="string">"org.apache.coyote.http2.Http2Protocol"</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">SSLHostConfig</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">Certificate</span> <span class="attr">certificateKeyFile</span>=<span class="string">"conf/localhost-rsa-key.pem"</span></span></span><br><span class="line"><span class="tag">           <span class="attr">certificateFile</span>=<span class="string">"conf/localhost-rsa-cert.pem"</span></span></span><br><span class="line"><span class="tag">           <span class="attr">certificateChainFile</span>=<span class="string">"conf/localhost-rsa-chain.pem"</span> <span class="attr">type</span>=<span class="string">"RSA"</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">SSLHostConfig</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">Connector</span>&gt;</span></span><br></pre></td></tr></table></figure></div></li><li><p>Spring Boot 在 application.properties 里配置HTTP 协议版本</p><div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="false"data-rel="JAVA"><figure class="iseeu highlight /java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">server.ssl.enabled=<span class="keyword">true</span></span><br><span class="line">server.ssl.***</span><br><span class="line">server.http2.enabled=<span class="keyword">true</span></span><br><span class="line">server.tomcat.protocol-header-https-value=https</span><br></pre></td></tr></table></figure></div></li></ul><h1 id="通过什么形式学习新技术"><a href="#通过什么形式学习新技术" class="headerlink" title="通过什么形式学习新技术"></a>通过什么形式学习新技术</h1><h1 id="还有什么要问的"><a href="#还有什么要问的" class="headerlink" title="还有什么要问的"></a>还有什么要问的</h1>]]></content>
      
      
      <categories>
          
          <category> 笔经面经 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Java </tag>
            
            <tag> 校招 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Java面试之数据结构</title>
      <link href="/2018/08/28/Java%20%E9%9D%A2%E8%AF%95%E4%B9%8B%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/"/>
      <url>/2018/08/28/Java%20%E9%9D%A2%E8%AF%95%E4%B9%8B%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/</url>
      
        <content type="html"><![CDATA[<blockquote><p>笔经面经归纳汇总：数据结构</p></blockquote><a id="more"></a><h1 id="常见数据结构"><a href="#常见数据结构" class="headerlink" title="常见数据结构"></a>常见数据结构</h1><h2 id="HashMap、Hashtable、-ConcurrentHashMap"><a href="#HashMap、Hashtable、-ConcurrentHashMap" class="headerlink" title="HashMap、Hashtable、 ConcurrentHashMap"></a>HashMap、Hashtable、 ConcurrentHashMap</h2><h3 id="HashMap"><a href="#HashMap" class="headerlink" title="HashMap"></a>HashMap</h3><ul><li>底层实现：HashMap底层整体结构是一个数组，数组中的每个元素又是一个链表。每次添加一个对象（put）时会产生一个链表对象（Object类型），Map中的每个Entry就是数组中的一个元素（Map.Entry就是一个<code>&lt;Key,Value&gt;</code>），它具有由当前元素指向下一个元素的引用，这就构成了链表。</li><li>存储原理：当向HsahMap中添加元素的时候，首先计算Key对象的Hash值，得到数组下标，如果数组该位置为空则插入，否则遍历这个位置链表。当某个节点Key对象和Node对象均和新元素的equals时，用新元素的Value对象替换该节点的Value对象，否则插入新节点。（<strong>注意</strong>：JDK 8之后加入了红黑树）<blockquote><p>HashMap长度为2的n次幂是为了让length-1的二进制值所有位全为1，这种情况下，hash值与(table.length - 1)进行&amp;运算计算index时，其结果就等同于hashcode后几位的值，此时只要输入的hashcode本身分布均匀，Hash算法的结果就是均匀的。所以，HashMap的默认长度为16是为了降低hash碰撞的几率，同时也是一种合适的大小。</p></blockquote></li></ul><p><img src="https://raw.githubusercontent.com/chung567115/chung567115.github.io/hexo-blog/blog-img/36-1.png" alt="HashMap"></p><h3 id="Hashtable"><a href="#Hashtable" class="headerlink" title="Hashtable"></a>Hashtable</h3><table><thead><tr><th style="text-align:center">比较点</th><th style="text-align:center">HashMap</th><th style="text-align:center">Hashtable</th></tr></thead><tbody><tr><td style="text-align:center">实现原理</td><td style="text-align:center">见上小节</td><td style="text-align:center">和HashMap的实现原理几乎一样</td></tr><tr><td style="text-align:center">Key和Value</td><td style="text-align:center">允许Key和Value为null</td><td style="text-align:center">不允许Key和Value为null</td></tr><tr><td style="text-align:center">扩容策略</td><td style="text-align:center">2倍扩容<code>oldThr &lt;&lt; 1</code></td><td style="text-align:center">2倍+1扩容<code>(oldCapacity &lt;&lt; 1) + 1</code></td></tr><tr><td style="text-align:center">安全性</td><td style="text-align:center">线程不安全</td><td style="text-align:center">线程安全</td></tr></tbody></table><blockquote><p>Hashtable线程安全的策略实现代价很大，get/put所有相关操作都是synchronized的，在竞争激烈的并发场景中性能非常差。</p></blockquote><h3 id="ConcurrentHashMap"><a href="#ConcurrentHashMap" class="headerlink" title="ConcurrentHashMap"></a>ConcurrentHashMap</h3><p>&emsp;&emsp;ConcurrentHashMap是Java并发包中提供的一个线程安全且高效的HashMap实现，它采用了非常精妙的<strong>分段锁</strong>策略，ConcurrentHashMap的主干是Segment数组。Segment继承于ReentrantLock，是一种可重入锁。每个Segment都是一个子哈希表，Segment里维护了一个HashEntry数组，并发环境下，对于不同Segment的数据进行操作不用考虑锁竞争。  </p><p><img src="https://raw.githubusercontent.com/chung567115/chung567115.github.io/hexo-blog/blog-img/36-2.png" alt="ConcurrentHashMap"></p><h2 id="LinkedHashMap、TreeMap、TreeSet"><a href="#LinkedHashMap、TreeMap、TreeSet" class="headerlink" title="LinkedHashMap、TreeMap、TreeSet"></a>LinkedHashMap、TreeMap、TreeSet</h2><ul><li>LinkedHashMap：顺序存取的HashMap（基于数组和双向链表实现）。</li><li>TreeMap：内部排序（基于红黑树实现）。</li><li>TreeSet：有序的Set集合（基于二叉树实现）。</li></ul><h2 id="ArrayList、LinkedList、Vector"><a href="#ArrayList、LinkedList、Vector" class="headerlink" title="ArrayList、LinkedList、Vector"></a>ArrayList、LinkedList、Vector</h2><ul><li>ArrayList：动态数组（基于数组实现）。</li><li>LinkedList：有序数组（基于双向链表实现）。</li><li>Vector：对象容器，可放入不同类的对象（基于数组实现）。</li></ul><h2 id="Collection与Collections"><a href="#Collection与Collections" class="headerlink" title="Collection与Collections"></a>Collection与Collections</h2><ul><li>Collection：集合类的上级接口，子接口主要有List、Set 、Queue等。</li><li>Collections：提供对集合进行搜索、排序、替换和线程安全化等操作的工具类。</li></ul><h1 id="二叉树"><a href="#二叉树" class="headerlink" title="二叉树"></a>二叉树</h1><h2 id="常见二叉树概念"><a href="#常见二叉树概念" class="headerlink" title="常见二叉树概念"></a>常见二叉树概念</h2><ul><li>B+树：见数据库部分<em><a href="http://zhangchong.xin/2018/07/21/Java%20%E9%9D%A2%E8%AF%95%E4%B9%8B%E6%95%B0%E6%8D%AE%E5%BA%93/">点击跳转</a></em></li><li>平衡二叉树（AVL树）：各个结点左右子树深度差的绝对值不超过1。</li><li>哈夫曼树：带权路径长度最小的二叉树称为最优二叉树。哈夫曼树构造不唯一，但所有叶子结点的带权路径长度之和都是最小的。</li><li><p>红黑树：一种自平衡二叉查找树，它的性质有：</p><ol><li>节点是红色或黑色。</li><li>根节点是黑色。</li><li>每个叶子节点都是黑色的空节点（NIL节点）。</li><li>每个红色节点的两个子节点都是黑色。</li><li><p>从任一节点到其每个叶子的所有路径都包含相同数目的黑色节点。</p><blockquote><p>从每个叶子到根的所有路径上不能有两个连续的红色节点</p></blockquote></li></ol></li></ul><h2 id="二叉树的遍历"><a href="#二叉树的遍历" class="headerlink" title="二叉树的遍历"></a>二叉树的遍历</h2><div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="false"data-rel="C"><figure class="iseeu highlight /c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 1. 先序遍历算法 DLR</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">Preorder</span> <span class="params">( BinTree bt )</span> </span>&#123;</span><br><span class="line"><span class="keyword">if</span> ( bt ) &#123;</span><br><span class="line">visit ( bt-&gt;data );</span><br><span class="line">Preorder ( bt-&gt;lchild );</span><br><span class="line">Preorder ( bt-&gt;rchild );</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 2. 中序遍历算法 LDR</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">Inorder</span> <span class="params">( BinTree bt )</span> </span>&#123;</span><br><span class="line"><span class="keyword">if</span> ( bt ) &#123;</span><br><span class="line">Inorder ( bt-&gt;lchild );</span><br><span class="line">visit ( bt-&gt;data );</span><br><span class="line">Inorder ( bt-&gt;rchild );</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 3. 后序遍历 LRD</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">Postorder</span> <span class="params">( BinTree bt )</span> </span>&#123;</span><br><span class="line"><span class="keyword">if</span> ( bt ) &#123;</span><br><span class="line">Postorder ( bt-&gt;lchild );</span><br><span class="line">Postorder ( bt-&gt;rchild );</span><br><span class="line">visit ( bt-&gt;data );</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 4. 按层次遍历。</span></span><br><span class="line"><span class="comment">/* 思路：利用一个队列，首先将根（头指针）入队列，以后若队列不空则取队头元素 p，</span></span><br><span class="line"><span class="comment">如果 p 不空，则访问之，然后将其左右子树入队列，如此循环直到队列为空。*/</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">LevelOrder</span> <span class="params">( BinTree bt )</span> </span>&#123;</span><br><span class="line"><span class="comment">// 队列初始化为空</span></span><br><span class="line">InitQueue ( Q );</span><br><span class="line"><span class="comment">// 根入队列</span></span><br><span class="line">EnQueue ( Q, bt );</span><br><span class="line"><span class="comment">// 队列不空则继续遍历</span></span><br><span class="line"><span class="keyword">while</span> ( ! QueueEmpty(Q) ) &#123;</span><br><span class="line">DeQueue ( Q, p );</span><br><span class="line"><span class="keyword">if</span> ( p!=<span class="literal">NULL</span> ) &#123;</span><br><span class="line">visit ( p-&gt;data );</span><br><span class="line"><span class="comment">// 左、右子树入队列</span></span><br><span class="line">EnQueue ( Q, p-&gt;lchild );</span><br><span class="line">EnQueue ( Q, p-&gt;rchild );</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 非递归遍历二叉树一般借助栈实现</span></span><br></pre></td></tr></table></figure></div>]]></content>
      
      
      <categories>
          
          <category> 笔经面经 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Java </tag>
            
            <tag> 校招 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Java面试之技术框架</title>
      <link href="/2018/08/28/Java%20%E9%9D%A2%E8%AF%95%E4%B9%8B%E6%8A%80%E6%9C%AF%E6%A1%86%E6%9E%B6/"/>
      <url>/2018/08/28/Java%20%E9%9D%A2%E8%AF%95%E4%B9%8B%E6%8A%80%E6%9C%AF%E6%A1%86%E6%9E%B6/</url>
      
        <content type="html"><![CDATA[<blockquote><p>笔经面经归纳汇总：技术框架</p></blockquote><a id="more"></a><h1 id="Spring"><a href="#Spring" class="headerlink" title="Spring"></a>Spring</h1><h2 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h2><p>&emsp;&emsp;Spring 是一种用来简化企业级应用开发的开源框架，包括Spring Framework, Spring Data, Spring Security，Spring Boot，SpringMVC等。Spring 家族最核心的概念当属 AOP 和 IoC，详解见下节。其中 Spring 优点如下：</p><ol><li>降低了组件之间的耦合性 ，实现了软件各层之间的解耦</li><li>可以使用便捷的众多服务，如事务管理，消息服务等</li><li>容器提供了AOP技术，利用它很容易实现如权限拦截，运行期监控等功能</li><li>Spring对于主流的应用框架提供了集成支持，如Hibernate、JPA等</li><li>Spring属于低侵入式设计，代码的污染极低</li><li>Spring的高度开放性，开发者可以自由选择Spring的部分或全部</li></ol><h2 id="AOP和IOC"><a href="#AOP和IOC" class="headerlink" title="AOP和IOC"></a>AOP和IOC</h2><h3 id="AOP-Aspect-Oriented-Programming，面向切面编程"><a href="#AOP-Aspect-Oriented-Programming，面向切面编程" class="headerlink" title="AOP(Aspect Oriented Programming，面向切面编程)"></a>AOP(Aspect Oriented Programming，面向切面编程)</h3><p>&emsp;&emsp;AOP简单说就是在目标方法执行前后自定义一些操作，一般都是基于代理模式来实现的，Spring支持两种代理模式，JDK原生代理和CGLib代理。AOP给程序带来良好的扩展性和封装性，可以实现业务代码与非业务代码的隔离。比如可以在不改变目标代码的前提下实现目标方法的增强：埋点业务处理、方法执行时间监控，打印日志，权限控制等等。</p><ol><li>JDK动态代理是利用反射机制生成一个实现代理接口的匿名类，在调用具体方法前调用InvokeHandler来处理。只能对实现了接口的类生成代理。</li><li>CGLib动态代理是利用ASM开源包，对代理对象类的Class文件加载进来，通过修改其字节码生成子类来处理。</li></ol><ul><li>切面(Aspect)：类是对物体特征的抽象，切面就是对横切关注点的抽象。</li><li>切点(Pointcut)：对连接点进行拦截的定义。</li><li>连接点(Joinpoint)：被拦截到的点，比如方法(Spring中一般是方法)、字段、构造器。</li><li>通知(Advice)：指拦截到连接点后要执行的代码，通知分为前置、后置、异常、最终、环绕五类。</li></ul><blockquote><p>AOP：在运行时，动态地将代码切入到类的指定方法、指定位置上的编程思想</p></blockquote><h3 id="IoC-Inversion-of-Control，控制反转"><a href="#IoC-Inversion-of-Control，控制反转" class="headerlink" title="IoC(Inversion of Control，控制反转)"></a>IoC(Inversion of Control，控制反转)</h3><p>&emsp;&emsp;IOC (Inversion of Control，控制反转)：对象之间的依赖关系由容器来创建。本来对象之间的关系是由开发者自己创建和维护的，在使用Spring框架后，对象之间的关系由容器来创建和维护，将开发者做的事让容器做，这就是控制反转。<strong>BeanFactory接口是Spring Ioc容器的核心接口</strong>。<br>&emsp;&emsp;DI (Dependecy Injection，依赖注入)：我们在使用Spring容器的时候，容器通过调用set方法或者是构造器来建立对象之间的依赖关系。注入方式有设值注入、构造注入、注解注入、接口注入(<code>基本不用</code>)，设值注入直观，自然；构造注入可以在构造器中决定依赖关系的顺序。</p><blockquote><p>控制反转是目标，依赖注入是我们实现控制反转的一种手段。</p></blockquote><h2 id="SpringMVC和Struts"><a href="#SpringMVC和Struts" class="headerlink" title="SpringMVC和Struts"></a>SpringMVC和Struts</h2><p>&emsp;&emsp;SpringMVC执行流程如下：  </p><ol><li>客户端向Spring容器发起一个HTTP请求。</li><li>发起的请求被<code>前端控制器</code>(DispatcherServlet)拦截。</li><li>查询<code>处理器映射</code>（HandlerMapping）得到执行链，并请求相应的<code>处理器适配器</code>(HandlerAdapter)。</li><li>执行<code>处理器</code>(Handler)并处理请求，以ModelAndView（属性值和返回页面）的形式返回。此处Handler即平时编写的Controller。</li><li><code>前端控制器</code>查询<code>视图解析器</code>(ViewResolver)，并返回View。</li><li>成功渲染视图则返回给客户端，否则抛异常。</li></ol><table><thead><tr><th style="text-align:center">比较点</th><th style="text-align:center">SpringMVC</th><th style="text-align:center">Struts</th></tr></thead><tbody><tr><td style="text-align:center">核心控制器</td><td style="text-align:center">DispatcherServlet</td><td style="text-align:center">FilterDispatcher</td></tr><tr><td style="text-align:center">配置文件</td><td style="text-align:center">量少（AOP）</td><td style="text-align:center">量大（Interceptor机制）</td></tr><tr><td style="text-align:center">RESTful API</td><td style="text-align:center">易实现（方法级别）</td><td style="text-align:center">实现费劲（类级别）</td></tr><tr><td style="text-align:center">处理Ajax请求</td><td style="text-align:center">@ResponseBody返回响应文本</td><td style="text-align:center">拦截器集成Ajax</td></tr><tr><td style="text-align:center">性能</td><td style="text-align:center">稍快</td><td style="text-align:center">稍慢</td></tr></tbody></table><p>&emsp;&emsp;DispatcherServlet初始化流程如下：</p><ol><li>加载配置文件</li><li>扫描所有的相关类</li><li>初始化所有相关类的Class实例，并将其保存到IoC容器</li><li>自动化的依赖注入(Autowired)</li><li>初始化HandlerMapping</li></ol><h2 id="Spring事务"><a href="#Spring事务" class="headerlink" title="Spring事务"></a>Spring事务</h2><h3 id="事务"><a href="#事务" class="headerlink" title="事务"></a>事务</h3><p>&emsp;&emsp;数据库事务是指作为单个逻辑工作单元执行的一系列操作，要么完全地执行，要么完全地不执行。事务满足<strong>原子性(Atomicity)</strong>、<strong>一致性(Consistency)</strong>、<strong>隔离性(Isolation)</strong>、<strong>持久性(Durability)</strong> 四大特性。</p><blockquote><p>详见： <a href="http://zhangchong.xin/2018/07/21/Java%20%E9%9D%A2%E8%AF%95%E4%B9%8B%E6%95%B0%E6%8D%AE%E5%BA%93/">Java 面试之数据库</a></p></blockquote><h3 id="事务管理"><a href="#事务管理" class="headerlink" title="事务管理"></a>事务管理</h3><p>&emsp;&emsp;Spring通过事务管理器接口<code>PlatformTransactionManager</code>为各平台如JDBC(<code>DataSourceTransactionManager</code>)、Hibernate(<code>HibernateTransactionManager</code>、<code>JpaTransactionManager</code>)等都提供了对应的事务管理器。  </p><h3 id="事务的传播特性"><a href="#事务的传播特性" class="headerlink" title="事务的传播特性"></a>事务的传播特性</h3><p>&emsp;&emsp;当事务方法被另一个事务方法调用时，必须指定事务应该如何传播，根据如下代码中方法 A 有无事务，Spring定义了7种传播行为（默认为REQUIRED）：<br><div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="false"data-rel="JAVA"><figure class="iseeu highlight /java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Transactional</span>  </span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">A</span><span class="params">()</span></span>&#123;  </span><br><span class="line">&#125;  </span><br><span class="line"><span class="meta">@Transactional</span>  </span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">B</span><span class="params">()</span></span>&#123;  </span><br><span class="line">   A();  </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div></p><table><thead><tr><th style="text-align:center">传播行为(简写)</th><th style="text-align:center">含义</th></tr></thead><tbody><tr><td style="text-align:center"><strong>REQUIRED</strong></td><td style="text-align:center">如果没有，就开启一个事务；如果有，就加入当前事务（方法A加入到方法B）</td></tr><tr><td style="text-align:center">REQUIRES_NEW</td><td style="text-align:center">如果没有，就开启一个事务；如果有，就将当前事务挂起</td></tr><tr><td style="text-align:center">NESTED</td><td style="text-align:center">如果没有，就开启一个事务；如果有，就在当前事务中嵌套其他事务（主事务提交或回滚，子事务也会提交或回滚）</td></tr><tr><td style="text-align:center">SUPPORTS</td><td style="text-align:center">如果没有，就以非事务方式执行；如果有，就使用当前事务</td></tr><tr><td style="text-align:center">NOT_SUPPORTED</td><td style="text-align:center">如果没有，就以非事务方式执行；如果有，就将当前事务挂起</td></tr><tr><td style="text-align:center">NEVER</td><td style="text-align:center">如果没有，就以非事务方式执行；如果有，就抛出异常</td></tr><tr><td style="text-align:center">MANDATORY</td><td style="text-align:center">如果没有，就抛出异常；如果有，就使用当前事务</td></tr></tbody></table><h2 id="Spring-Boot"><a href="#Spring-Boot" class="headerlink" title="Spring Boot"></a>Spring Boot</h2><p>&emsp;&emsp;Spring Boot来自于 Spring 大家族，是一套全新的框架，它默认帮我们进行了很多配置，集成了大量常用的第三方库（例如 Jackson、JDBC、MongoDB、Redis、Mail 等），这些第三方库几乎都可以开箱即用。Spring Boot可以帮助我们快速搭建一个项目，从而让开发者能够更加专注于业务逻辑。  </p><h2 id="Spring扩展"><a href="#Spring扩展" class="headerlink" title="Spring扩展"></a>Spring扩展</h2><ul><li>实现BeanPostProcess接口在Bean生成前后进行操作。</li><li>实现BeanFactoryPostProcessor接口配置Bean元属性。</li><li>实现FactoryBean接口定制个性化的Bean。</li></ul><h1 id="MyBatis"><a href="#MyBatis" class="headerlink" title="MyBatis"></a>MyBatis</h1><p>&emsp;&emsp;MyBatis是一款优秀的持久层框架，它几乎避免了所有的JDBC代码和手动设置参数以及获取结果集，它可以使用XML或注解来将接口和POJO映射成数据库中的记录。<br>&emsp;&emsp;MyBatis与Spring集成的时候Spring提供了全局唯一的SqlSessionTemplate，SqlSessionTemplate 实现了SqlSession接口，那么如何保证多个线程调用同一个dao时拿到的SqlSession不会错乱呢？这个时候就用到了ThreadLocal，SqlSessionUtils.getSqlSession()会首先查看当前线程资源map有无SqlSession，有则返回无则新建然后返回，这样就能保证一条业务始终用的是同一个数据库连接，也就能正确处理数据库事务。</p><h2 id="MyBatis和Hibernate"><a href="#MyBatis和Hibernate" class="headerlink" title="MyBatis和Hibernate"></a>MyBatis和Hibernate</h2><table><thead><tr><th style="text-align:center">比较点</th><th style="text-align:center">MyBatis</th><th style="text-align:center">Hibernate</th></tr></thead><tbody><tr><td style="text-align:center">特点</td><td style="text-align:center">半自动(手写SQL)</td><td style="text-align:center">全自动(根据映射生成SQL)</td></tr><tr><td style="text-align:center">SQL直接优化</td><td style="text-align:center">方便</td><td style="text-align:center">复杂</td></tr><tr><td style="text-align:center">数据库移植性</td><td style="text-align:center">弱</td><td style="text-align:center">强</td></tr><tr><td style="text-align:center">缓存机制</td><td style="text-align:center">欠缺</td><td style="text-align:center">更优</td></tr><tr><td style="text-align:center">日志系统</td><td style="text-align:center">欠缺</td><td style="text-align:center">完整</td></tr></tbody></table><h2 id="Statement和PreparedStatement的区别"><a href="#Statement和PreparedStatement的区别" class="headerlink" title="Statement和PreparedStatement的区别"></a>Statement和PreparedStatement的区别</h2><div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="false"data-rel="JAVA"><figure class="iseeu highlight /java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/***PreparedStatement extends Statement***/</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//Statement用法</span></span><br><span class="line">sql1 = <span class="string">"select * from tbl_user where username='"</span> + u + <span class="string">"' and password='"</span> + p + <span class="string">"'"</span>;</span><br><span class="line">statement = conn.createStatement();  </span><br><span class="line">result1 = statement.executeQuery(sql1);  </span><br><span class="line"></span><br><span class="line"><span class="comment">//PrepareStatement用法</span></span><br><span class="line">sql2 = <span class="string">"select * from tbl_user where username=? and password=?"</span>;  </span><br><span class="line">prepareStatement = conn.prepareStatement(sql2);  </span><br><span class="line">pstmt.setString(<span class="number">1</span>, u);  </span><br><span class="line">pstmt.setString(<span class="number">2</span>, p);  </span><br><span class="line">result2 = prepareStatement.executeQuery();</span><br></pre></td></tr></table></figure></div><table><thead><tr><th style="text-align:center">比较点</th><th style="text-align:center">Statement</th><th style="text-align:center">PreparedStatement</th></tr></thead><tbody><tr><td style="text-align:center">用途</td><td style="text-align:center">执行静态SQL语句并返回结果</td><td style="text-align:center">执行已预编译SQL语句并返回结果</td></tr><tr><td style="text-align:center">可读性</td><td style="text-align:center">低(字符串拼接)</td><td style="text-align:center">高(Set方法设值)</td></tr><tr><td style="text-align:center">效率</td><td style="text-align:center">低(字符串拼接)</td><td style="text-align:center">高(占位符)</td></tr><tr><td style="text-align:center">安全性</td><td style="text-align:center">低(SQL注入)</td><td style="text-align:center">高</td></tr></tbody></table><h1 id="消息队列"><a href="#消息队列" class="headerlink" title="消息队列"></a>消息队列</h1><ol><li>消息队列中间件是分布式系统中重要的组件，主要主要解决应用耦合、异步消息、流量削锋等问题，具有异步性、可靠性（存储到本地硬盘）、松耦合、分布式的特性。  <ul><li>主要特点是异步处理</li><li>主要目的是减少请求响应时间、解耦</li><li>主要使用场景是将比较耗时且不需同步返回结果的操作当做消息存入队列</li></ul></li><li>流量削峰的一种解决方案  <ul><li>MQ推送模式改为定时或者批量拉取模式</li><li>消息接收方实现批量处理等方式</li></ul></li><li>RabbitMQ<ul><li>RabbitMQ 是一个由 ErLang 开发的AMQP的开源实现。</li><li>交换机（Exchange）的功能主要是接收消息并且转发到绑定的队列，交换机不存储消息，<strong>交换机本质是一张路由查询表</strong>。<ul><li>Direct：绑定时设定一个路由键，消息的路由键匹配才会被投送到队列中。</li><li>Topic：根据模糊匹配转发消息（最灵活）。</li><li>Headers：设置头部参数类型的交换机。</li><li>Fanout：转发消息到所有绑定队列，消息广播的模式。</li></ul></li></ul></li></ol><blockquote><p>路由键（routing_key）在消息中，而绑定键（binding_key）作用于交换机和队列之间。当消息中的路由键和绑定键对应上的时候，交换机就知道将该消息存入哪个队列。</p></blockquote><h1 id="分布式"><a href="#分布式" class="headerlink" title="分布式"></a>分布式</h1><ul><li>分布式：一个业务分拆多个子业务，部署在不同的服务器上（厨师和配菜师的关系）</li><li>集群：同一个业务，部署在多个服务器上（两个厨师的关系）</li></ul><h1 id="微服务"><a href="#微服务" class="headerlink" title="微服务"></a>微服务</h1><p>&emsp;&emsp;微服务架构风格是一种<strong>使用一套小服务来开发单个应用</strong>的方式，每个服务运行在自己的进程中，并使用轻量级机制通信（通常是<code>HTTP API</code>），这些服务能够通过自动化部署机制来独立部署、可以使用不同的编程语言实现、可以使用不同的数据存储技术，并保持最低限度的集中式管理。<br>&emsp;&emsp;时下热门的微服务开发框架有：<a href="http://projects.spring.io/spring-cloud" target="_blank" rel="noopener">Spring Cloud</a>、<a href="http://dubbo.io" target="_blank" rel="noopener">Dubbo</a></p><h1 id="RESTful"><a href="#RESTful" class="headerlink" title="RESTful"></a>RESTful</h1><p>&emsp;&emsp;<strong>URL定位资源，HTTP动词描述操作</strong>    </p><ul><li>GET：读取资源</li><li>POST：创建资源</li><li>PUT：更新资源</li><li>DELETE：删除资源</li></ul><blockquote><p>使用PUT方式更新时，必须发送资源所有的属性</p></blockquote><h1 id="Nginx"><a href="#Nginx" class="headerlink" title="Nginx"></a>Nginx</h1><h2 id="反向代理"><a href="#反向代理" class="headerlink" title="反向代理"></a>反向代理</h2><ul><li><p>正向代理：隐藏真实的请求客户端，服务端不知道真实的客户端是谁，正向代理服务器会代替客户端向服务器发送请求。<strong>正向代理代理的对象是客户端</strong>。</p></li><li><p>反向代理：隐藏真实的响应服务端，客户端不知道真实的服务端是谁，反向代理服务器会把请求转发到真实的服务器。<strong>反向代理代理的对象是服务端</strong>。</p></li></ul><blockquote><p>10086总机就是一种反向代理，客户不知道真正提供服务人的是谁。</p></blockquote><h2 id="负载均衡"><a href="#负载均衡" class="headerlink" title="负载均衡"></a>负载均衡</h2><ul><li><strong>四层负载均衡</strong>：工作在OSI模型的<strong>传输层</strong>，它在接收到客户端的流量以后通过修改数据包的地址信息将流量转发到应用服务器，因此四层负载均衡的主要工作就是<strong>转发</strong>。</li><li><strong>七层负载均衡</strong>：工作在OSI模型的<strong>应用层</strong>，七层负载均衡在接到客户端的流量以后，还需要一个完整的TCP/IP协议栈与客户端建立一条完整的连接，并将应用层的请求流量解析出来，再按照调度算法选择一个应用服务器，并与应用服务器建立另外一条连接将请求发送过去，因此七层负载均衡的主要工作就是<strong>代理</strong>。</li></ul><h1 id="设计模式"><a href="#设计模式" class="headerlink" title="设计模式"></a>设计模式</h1><h2 id="设计模式的六大原则"><a href="#设计模式的六大原则" class="headerlink" title="设计模式的六大原则"></a>设计模式的六大原则</h2><ol><li>单一职责原则：一个类只负责一个功能领域中的相应职责。</li><li>开闭原则：一个软件实体应当对扩展开放，对修改关闭。</li><li>里氏替换原则：所有引用父类的地方必须能透明地使用其子类的对象。</li><li>依赖倒置原则：抽象不应该依赖于细节，细节应当依赖于抽象。(要针对接口编程，而不是针对实现编程)。</li><li>接口隔离原则：使用多个专门的接口，而不使用单一的总接口。</li><li>迪米特法则：一个软件实体应当尽可能少地与其他实体发生相互作用。</li></ol><h2 id="单例、工厂、观察者、适配器、责任链"><a href="#单例、工厂、观察者、适配器、责任链" class="headerlink" title="单例、工厂、观察者、适配器、责任链"></a>单例、工厂、观察者、适配器、责任链</h2><ul><li>单例模式：一个类负责创建自己的对象，同时确保只有单个对象被创建，并提供一种访问其唯一对象的方式。</li><li>工厂模式：在创建对象时不暴露创建逻辑，并通过使用一个共同的接口来指向新创建的对象。</li><li>代理模式：一个类代表另一个类的功能，为其他对象提供一种代理以控制对这个对象的访问。</li><li>模板模式：一个抽象类公开定义了方法，它的子类可以按需要重写方法，但以抽象类中定义的模板调用。</li><li>策略模式：定义一系列的算法，把它们一个个封装起来,，并且使它们可相互替换。</li><li>过滤器模式：允许开发人员使用不同的标准来过滤一组对象，通过逻辑运算以解耦的方式把它们连接起来。</li><li>适配器模式：将一个类的接口转换成另一个接口，使原本由于接口不兼容而不能一起工作的类可以一起工作。</li><li>观察者模式：定义对象间的依赖关系，当一个对象的状态改变时，所有依赖于它的对象都被通知并自动更新。</li><li>责任链模式：为请求创建了一个接收者对象的链，沿着这条链传递请求，直到有对象处理它为止。<blockquote><p>设计模式详见小博系列博客：<a href="http://zhangchong.xin/2018/12/28/%E4%BB%A3%E7%A0%81%E8%AF%A6%E8%A7%A3%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F%E6%B1%87%E6%80%BB/">代码详解设计模式汇总</a></p></blockquote></li></ul><h2 id="写出生产者消费者模式"><a href="#写出生产者消费者模式" class="headerlink" title="写出生产者消费者模式"></a>写出生产者消费者模式</h2><p>&emsp;&emsp;生产者生产数据到缓冲区中，消费者从缓冲区中取数据。如果缓冲区已经满了，则生产者线程阻塞；如果缓冲区为空，那么消费者线程阻塞。<br><div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="false"data-rel="JAVA"><figure class="iseeu highlight /java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ProducerAndConsumer</span> </span>&#123;</span><br><span class="line">    <span class="keyword">static</span> BlockingQueue resourceQueue = <span class="keyword">new</span> LinkedBlockingQueue&lt;Resource&gt;(<span class="number">10</span>);</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        Producer p = <span class="keyword">new</span> Producer(); <span class="comment">//生产者</span></span><br><span class="line">        Consumer c1 = <span class="keyword">new</span> Consumer(); <span class="comment">//消费者1</span></span><br><span class="line">        Consumer c2 = <span class="keyword">new</span> Consumer(); <span class="comment">//消费者2</span></span><br><span class="line">        Consumer c3 = <span class="keyword">new</span> Consumer(); <span class="comment">//消费者3</span></span><br><span class="line">        p.start();</span><br><span class="line">        c1.start();</span><br><span class="line">        c2.start();</span><br><span class="line">        c3.start();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 资源</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Resource</span> </span>&#123;</span><br><span class="line">    <span class="keyword">int</span> id;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Resource</span><span class="params">(<span class="keyword">int</span> id)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.id = id;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 生产者</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Producer</span> <span class="keyword">extends</span> <span class="title">Thread</span> </span>&#123;</span><br><span class="line">    <span class="keyword">int</span> p = <span class="number">1</span>;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">while</span> (<span class="keyword">true</span>) &#123;</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                Resource resource = <span class="keyword">new</span> Resource(p++);</span><br><span class="line">                System.out.println(<span class="string">"生产资源"</span> + resource.id);</span><br><span class="line">                ProducerAndConsumer.resourceQueue.put(resource);</span><br><span class="line">            &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">                e.printStackTrace();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 消费者</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Consumer</span> <span class="keyword">extends</span> <span class="title">Thread</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">while</span> (<span class="keyword">true</span>) &#123;</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                System.out.println(<span class="string">"消费资源"</span> + </span><br><span class="line">                ((Resource) ProducerAndConsumer.resourceQueue.take()).id);</span><br><span class="line">            &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">                e.printStackTrace();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div></p><h1 id="高内聚、低耦合"><a href="#高内聚、低耦合" class="headerlink" title="高内聚、低耦合"></a>高内聚、低耦合</h1><ul><li>耦合性：也称块间联系。指软件各模块之间相互联系紧密程度的一种度量。模块之间联系越紧密，则其耦合性就越强。模块间耦合高低取决于模块间接口的复杂性、调用的方式及传递的信息。</li><li>内聚性：也称块内联系。指软件模块内部各元素彼此结合紧密程度的一种度量。模块内各元素（语名之间、程序段之间）联系越紧密，则其内聚性就越高。</li></ul><blockquote><p>高内聚、低耦合的系统具有更好的重用性，维护性，扩展性，可以更高效的完成系统的维护开发，持续的支持业务的发展，而不会成为业务发展的障碍</p></blockquote>]]></content>
      
      
      <categories>
          
          <category> 笔经面经 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Java </tag>
            
            <tag> 校招 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Java面试之语言基础</title>
      <link href="/2018/08/28/Java%20%E9%9D%A2%E8%AF%95%E4%B9%8B%E8%AF%AD%E8%A8%80%E5%9F%BA%E7%A1%80/"/>
      <url>/2018/08/28/Java%20%E9%9D%A2%E8%AF%95%E4%B9%8B%E8%AF%AD%E8%A8%80%E5%9F%BA%E7%A1%80/</url>
      
        <content type="html"><![CDATA[<blockquote><p>笔经面经归纳汇总：Java基础</p></blockquote><a id="more"></a><h1 id="Java八种基本数据类型"><a href="#Java八种基本数据类型" class="headerlink" title="Java八种基本数据类型"></a>Java八种基本数据类型</h1><table><thead><tr><th style="text-align:center">类 型</th><th style="text-align:center">大小</th><th style="text-align:center">封 装 类</th></tr></thead><tbody><tr><td style="text-align:center">byte</td><td style="text-align:center">1字节</td><td style="text-align:center">Byte</td></tr><tr><td style="text-align:center">short</td><td style="text-align:center">2字节</td><td style="text-align:center">Short</td></tr><tr><td style="text-align:center">int</td><td style="text-align:center">4字节</td><td style="text-align:center">Integer</td></tr><tr><td style="text-align:center">long</td><td style="text-align:center">8字节</td><td style="text-align:center">Long</td></tr><tr><td style="text-align:center">float</td><td style="text-align:center">4字节</td><td style="text-align:center">Float</td></tr><tr><td style="text-align:center">double</td><td style="text-align:center">8字节</td><td style="text-align:center">Double</td></tr><tr><td style="text-align:center">char</td><td style="text-align:center">2字节</td><td style="text-align:center">Character</td></tr><tr><td style="text-align:center">boolean</td><td style="text-align:center">–</td><td style="text-align:center">Boolean</td></tr></tbody></table><h1 id="Java面向对象（四个基本特性）"><a href="#Java面向对象（四个基本特性）" class="headerlink" title="Java面向对象（四个基本特性）"></a>Java面向对象（四个基本特性）</h1><ol><li><strong>封装</strong>：将客观事物包装成类，隐藏具体实现，提供操作接口。</li><li><strong>继承</strong>：子类获得父类的属性和行为(<code>extends</code>)。</li><li><strong>多态</strong>：同一行为多种表现形式。<ul><li>重写<code>Override</code></li><li>接口的不同实现<code>implements</code></li><li>抽象类和抽象方法<code>abstract</code></li></ul></li><li><strong>抽象</strong>：用代码描述客观事物。包括数据抽象(属性)和过程抽象(行为)。</li></ol><h1 id="Java与C-对比"><a href="#Java与C-对比" class="headerlink" title="Java与C++对比"></a>Java与C++对比</h1><table><thead><tr><th style="text-align:center">比较点</th><th style="text-align:center">Java</th><th style="text-align:center">C++</th></tr></thead><tbody><tr><td style="text-align:center">面向对象思想</td><td style="text-align:center">完全对象化</td><td style="text-align:center">可采用非面向对象(兼容C)</td></tr><tr><td style="text-align:center">内存管理机制</td><td style="text-align:center">Java自身管理</td><td style="text-align:center">程序员管理</td></tr><tr><td style="text-align:center">异常机制</td><td style="text-align:center">完善</td><td style="text-align:center">欠缺</td></tr><tr><td style="text-align:center">第三方库</td><td style="text-align:center">丰富(Log、JUnit等等)</td><td style="text-align:center">较少(STL)</td></tr><tr><td style="text-align:center">执行效率</td><td style="text-align:center">慢</td><td style="text-align:center">快</td></tr><tr><td style="text-align:center">操控底层</td><td style="text-align:center">麻烦</td><td style="text-align:center">方便</td></tr></tbody></table><h1 id="Java-8新特性"><a href="#Java-8新特性" class="headerlink" title="Java 8新特性"></a>Java 8新特性</h1><ul><li><strong>默认方法</strong>：在接口里面有了一个实现的方法</li><li>Lambda 表达式：Lambda允许把函数作为一个方法的参数</li><li>Stream API：把真正的函数式编程风格引入到Java中</li><li>Date Time API：加强对日期与时间的处理</li><li>Optional 类：Optional 类已成为 Java 8类库的一部分，用来解决空指针异常</li><li>方法引用：可以直接引用已有Java类或对象的方法或构造器</li><li>新编译工具：Nashorn引擎（一个新的JavaScript引擎）、 类依赖分析器</li></ul><h1 id="Java反射机制"><a href="#Java反射机制" class="headerlink" title="Java反射机制"></a>Java反射机制</h1><p>&emsp;&emsp;在运行状态中，对于任意一个类，都能够知道其所有属性和方法；对于任意一个对象，都能够调用其任意方法和属性。这种动态获取信息及动态调用对象方法的功能称为Java语言的反射机制。Java反射API如下：  </p><ul><li>Class：反射的核心类。</li><li>Field：类的成员变量。 </li><li>Method：类的成员方法。 </li><li>Constructor：类的构造方法。</li></ul><div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="false"data-rel="JAVA"><figure class="iseeu highlight /java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**获取Class对象的三种方式**/</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 1. 调用某个对象的getClass()方法</span></span><br><span class="line">Class clazz = person.getClass();</span><br><span class="line"></span><br><span class="line"><span class="comment">// 2. 调用某个类的class属性</span></span><br><span class="line">Class clazz = Person.class;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 3. 使用Class类的forName()静态方法</span></span><br><span class="line">Class clazz = Class.forName(<span class="string">"Person"</span>);</span><br></pre></td></tr></table></figure></div><p>&emsp;&emsp;反射机制主要提供了以下功能：</p><ol><li>在运行时判断任意一个对象所属的类。</li><li>在运行时构造任意一个类的对象。</li><li>在运行时判断任意一个类所具有的成员变量和方法。</li><li>在运行时调用任意一个对象的方法。</li><li>生成动态代理。</li></ol><h1 id="Java异常机制"><a href="#Java异常机制" class="headerlink" title="Java异常机制"></a>Java异常机制</h1><h2 id="Error与Excption包结构"><a href="#Error与Excption包结构" class="headerlink" title="Error与Excption包结构"></a>Error与Excption包结构</h2><ol><li>Error：程序无法处理的错误，继承自Throwable。</li><li><p>Exception：程序可以处理的异常，继承自Throwable。</p><ol><li>Checked Exception：<strong>受检异常，需要强制catch</strong>，是Exception的子类。</li><li><p>Unchecked Exception：<strong>不受检异常，无需强制catch</strong>，是RuntimeException的子类。</p><blockquote><p>例如<code>list.size()</code>语句，若list为null，则会出现<code>NullPointerException</code>(Unchecked Exception)</p></blockquote></li></ol></li></ol><div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="false"data-rel="JAVA"><figure class="iseeu highlight /java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span> (ex <span class="keyword">instanceof</span> RuntimeException)&#123;</span><br><span class="line">    <span class="comment">// ex is unchecked exception</span></span><br><span class="line">&#125; <span class="keyword">else</span> <span class="keyword">if</span> (ex <span class="keyword">instanceof</span> Exception)&#123;</span><br><span class="line">    <span class="comment">// ex is checked exception</span></span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    <span class="comment">// ex is a error</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div><p><img src="https://raw.githubusercontent.com/chung567115/chung567115.github.io/hexo-blog/blog-img/34-1.png" alt="Throwable体系"></p><h1 id="各种比较"><a href="#各种比较" class="headerlink" title="各种比较"></a>各种比较</h1><h2 id="Override和Overload的区别"><a href="#Override和Overload的区别" class="headerlink" title="Override和Overload的区别"></a>Override和Overload的区别</h2><table><thead><tr><th style="text-align:center">比较点</th><th style="text-align:center">Override</th><th style="text-align:center">Overload</th></tr></thead><tbody><tr><td style="text-align:center">中文</td><td style="text-align:center">重写</td><td style="text-align:center">重载</td></tr><tr><td style="text-align:center">方法名</td><td style="text-align:center">相同</td><td style="text-align:center">相同</td></tr><tr><td style="text-align:center">形参</td><td style="text-align:center">相同</td><td style="text-align:center">不同</td></tr><tr><td style="text-align:center">返回类型</td><td style="text-align:center">相同</td><td style="text-align:center">可同可不同</td></tr></tbody></table><blockquote><p>Override 典型例子：接口方法的重写<br>Overload 典型例子：构造方法的重载</p></blockquote><h2 id="Interface与abstract类的区别"><a href="#Interface与abstract类的区别" class="headerlink" title="Interface与abstract类的区别"></a>Interface与abstract类的区别</h2><table><thead><tr><th style="text-align:center">比较点</th><th style="text-align:center">Interface</th><th style="text-align:center">abstract类</th></tr></thead><tbody><tr><td style="text-align:center">中文</td><td style="text-align:center">接口</td><td style="text-align:center">抽象类</td></tr><tr><td style="text-align:center">能否实例化</td><td style="text-align:center">不能</td><td style="text-align:center">不能</td></tr><tr><td style="text-align:center">方法能否实现</td><td style="text-align:center">Java 8 可以</td><td style="text-align:center">可以</td></tr><tr><td style="text-align:center">一个类可以</td><td style="text-align:center"><code>implements</code>多个</td><td style="text-align:center"><code>extends</code>一个</td></tr></tbody></table><h2 id="equals-与-的区别"><a href="#equals-与-的区别" class="headerlink" title="equals()与==的区别"></a>equals()与==的区别</h2><p>&emsp;&emsp;<code>equals()</code>用于比较对象(内容)，<code>==</code>常用于比较原生类型(地址)。简单的说，<code>==</code>比较两个人的DNA，<code>equals()</code>一般用来比较两个人身高体重等等，可自定义。<br><div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="false"data-rel="JAVA"><figure class="iseeu highlight /java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">int</span> x = <span class="number">10</span>;</span><br><span class="line"><span class="keyword">int</span> y = <span class="number">10</span>;</span><br><span class="line">String str1 = <span class="string">"abc"</span>;</span><br><span class="line">String str2 = <span class="string">"abc"</span>;</span><br><span class="line">String str3 = <span class="keyword">new</span> String(<span class="string">"abc"</span>);</span><br><span class="line">String str4 = <span class="keyword">new</span> String(<span class="string">"abc"</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// == 比较两个(基本数据类型)地址值</span></span><br><span class="line">System.out.println(x == y); <span class="comment">// true</span></span><br><span class="line">System.out.println(str1 == str2); <span class="comment">// true</span></span><br><span class="line">System.out.println(str3 == str4); <span class="comment">// false</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// String重写的equals()比较两个对象内容</span></span><br><span class="line">System.out.println(str1.equals(str2)); <span class="comment">// true</span></span><br><span class="line">System.out.println(str3.equals(str4)); <span class="comment">// true</span></span><br></pre></td></tr></table></figure></div></p><blockquote><p>要注意Object类中<code>equals()</code>即为<code>==</code>，<code>equals()</code>是可以重写(<code>Override</code>)的。  </p></blockquote><h2 id="String、StringBuffer、StringBuilder"><a href="#String、StringBuffer、StringBuilder" class="headerlink" title="String、StringBuffer、StringBuilder"></a>String、StringBuffer、StringBuilder</h2><table><thead><tr><th style="text-align:center">比较点</th><th style="text-align:center">String</th><th style="text-align:center">StringBuffer</th><th style="text-align:center">StringBuilder</th></tr></thead><tbody><tr><td style="text-align:center">底层实现</td><td style="text-align:center">final char value[]</td><td style="text-align:center">char[] value</td><td style="text-align:center">char[] value</td></tr><tr><td style="text-align:center">可变性(参考底层)</td><td style="text-align:center">不可变</td><td style="text-align:center">可变</td><td style="text-align:center">可变</td></tr><tr><td style="text-align:center">修改时</td><td style="text-align:center"><strong>不会</strong>改变自身</td><td style="text-align:center"><strong>会</strong>改变自身</td><td style="text-align:center"><strong>会</strong>改变自身</td></tr><tr><td style="text-align:center">安全性</td><td style="text-align:center">线程安全</td><td style="text-align:center">线程安全</td><td style="text-align:center">非线程安全</td></tr><tr><td style="text-align:center">使用场景</td><td style="text-align:center">少量数据</td><td style="text-align:center">多线程大量数据</td><td style="text-align:center">单线程大量数据</td></tr></tbody></table><div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="false"data-rel="JAVA"><figure class="iseeu highlight /java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">String str = <span class="string">"abc"</span>; <span class="comment">// str只是一个String对象的引用</span></span><br><span class="line">str = <span class="string">"xyz"</span>; <span class="comment">// 创建了新对象"xyz"，而引用str重新指向新对象</span></span><br></pre></td></tr></table></figure></div><h2 id="强弱软虚四种引用"><a href="#强弱软虚四种引用" class="headerlink" title="强弱软虚四种引用"></a>强弱软虚四种引用</h2><table><thead><tr><th style="text-align:center">比较点</th><th style="text-align:center">强引用</th><th style="text-align:center">软引用</th><th style="text-align:center">弱引用</th><th style="text-align:center">虚引用</th></tr></thead><tbody><tr><td style="text-align:center">特性</td><td style="text-align:center">不会被回收</td><td style="text-align:center">内存足则不回收，内存不足则回收</td><td style="text-align:center">一旦发现便回收</td><td style="text-align:center">必须和引用队列联合使用</td></tr><tr><td style="text-align:center">使用场景</td><td style="text-align:center">平时工作接触的最多(<code>new</code>)</td><td style="text-align:center">可用来实现内存敏感的高速缓存</td><td style="text-align:center">常用于Map数据结构中，引用占用内存空间较大的对象</td><td style="text-align:center">跟踪对象被回收的活动</td></tr></tbody></table><h2 id="comparable接口和comparator接口"><a href="#comparable接口和comparator接口" class="headerlink" title="comparable接口和comparator接口"></a>comparable接口和comparator接口</h2><ul><li>Comparable：在集合内部实现排序的接口，位于java.lang包。</li><li>Comparator：在集合外部实现排序的比较器接口，位于java.util包。</li></ul><div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="false"data-rel="JAVA"><figure class="iseeu highlight /java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Person</span> <span class="keyword">implements</span> <span class="title">Comparable</span> </span>&#123;</span><br><span class="line">    String name;</span><br><span class="line">    <span class="keyword">int</span> age;</span><br><span class="line">    </span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">compareTo</span><span class="params">(Object o)</span> </span>&#123;</span><br><span class="line">        <span class="comment">// 使用字符串的比较</span></span><br><span class="line">        <span class="keyword">int</span> i = name.compareTo(((Person) o).name); </span><br><span class="line">        </span><br><span class="line">        <span class="keyword">if</span> (i == <span class="number">0</span>) &#123; <span class="comment">// 如果名字一样,比较年龄, 返回比较年龄结果</span></span><br><span class="line">            <span class="keyword">return</span> age - ((Person) o).age;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="keyword">return</span> i; <span class="comment">// 名字不一样, 返回比较名字的结果.</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//使用Collections.sort(personList)即可排序</span></span><br></pre></td></tr></table></figure></div><div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="false"data-rel="JAVA"><figure class="iseeu highlight /java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Person</span> </span>&#123;</span><br><span class="line">    String name;</span><br><span class="line">    <span class="keyword">int</span> age;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">static</span> <span class="class"><span class="keyword">class</span> <span class="title">PersonComparator</span> <span class="keyword">implements</span> <span class="title">Comparator</span> </span>&#123;</span><br><span class="line">        <span class="meta">@Override</span></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">compare</span><span class="params">(Object o1, Object o2)</span> </span>&#123;</span><br><span class="line">            <span class="comment">// 使用字符串的比较</span></span><br><span class="line">            <span class="keyword">int</span> i = ((Person) o1).name.compareTo(((Person) o2).name); </span><br><span class="line">            </span><br><span class="line">            <span class="keyword">if</span> (i == <span class="number">0</span>) &#123; <span class="comment">// 如果名字一样,比较年龄,返回比较年龄结果</span></span><br><span class="line">                <span class="keyword">return</span> ((Person) o1).age - ((Person) o2).age;</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                <span class="keyword">return</span> i; <span class="comment">// 名字不一样, 返回比较名字的结果.</span></span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//使用Collections.sort(list, new Person.PersonComparator())即可排序</span></span><br></pre></td></tr></table></figure></div><blockquote><p>Arrays内使用双轴快排(DualPivotQuicksort)，两个中心点三段数据。</p></blockquote><h2 id="IO，BIO，NIO，AIO"><a href="#IO，BIO，NIO，AIO" class="headerlink" title="IO，BIO，NIO，AIO"></a>IO，BIO，NIO，AIO</h2><p>&emsp;&emsp;Java中IO是以流为基础进行输入输出的，在网络编程中，接触到最多的就是利用Socket进行网络通信开发，主要有BIO、NIO、AIO三种实现方式。  </p><table><thead><tr><th style="text-align:center">比较点</th><th style="text-align:center">BIO</th><th style="text-align:center">NIO</th><th style="text-align:center">AIO</th></tr></thead><tbody><tr><td style="text-align:center">中文</td><td style="text-align:center">阻塞IO</td><td style="text-align:center">非阻塞IO</td><td style="text-align:center">异步IO</td></tr><tr><td style="text-align:center">版本</td><td style="text-align:center">–</td><td style="text-align:center">JDK 1.4提出</td><td style="text-align:center">JDK 1.7 提出</td></tr><tr><td style="text-align:center">描述</td><td style="text-align:center">服务端每次都需要创建一个线程来建立连接并处理消息。若建立连接、读写数据时发生阻碍，线程会阻塞。并发情况下，N个连接需要N个线程来处理。</td><td style="text-align:center">使用一个线程来管理所有的Socket 通道，也就是基于Selector机制，查询到事件时(连接、读写)，转发给不同的处理线程(Handler)。</td><td style="text-align:center">在进行读写操作时，只需要调用相应的read/write方法，并传入CompletionHandler(动作完成处理器)，在动作完成后会调用CompletionHandler。</td></tr></tbody></table><h1 id="序列化与反序列化"><a href="#序列化与反序列化" class="headerlink" title="序列化与反序列化"></a>序列化与反序列化</h1><p>&emsp;&emsp;序列化即把对象转换为字节序列；反序列化即把字节序列恢复为对象。其使用场景大致有如下几种：  </p><ul><li>把内存中的对象状态保存到文件或者数据库中。</li><li>用套接字在网络上传送对象。</li><li>通过RMI传输对象。</li></ul><blockquote><p>JVM会把字节流中的serialVersionUID与本地相应实体类的serialVersionUID进行比较，如果相同就认为是一致的，可以进行反序列化。</p></blockquote><h1 id="哪些情况会导致OOM或SOF，怎么解决"><a href="#哪些情况会导致OOM或SOF，怎么解决" class="headerlink" title="哪些情况会导致OOM或SOF，怎么解决"></a>哪些情况会导致OOM或SOF，怎么解决</h1><h2 id="OutOfMemory-OOM"><a href="#OutOfMemory-OOM" class="headerlink" title="OutOfMemory(OOM)"></a>OutOfMemory(OOM)</h2><ul><li>Java堆溢出：一般由于内存泄露或者堆的大小设置不当引起。可以通过虚拟机参数<code>-Xms</code>、<code>-Xmx</code>等设置堆大小。</li><li>方法区溢出：包括运行时常量池溢出，一般由于大量动态生成的Class导致。可以通过<code>-XX:PermSize</code>和<code>-XX:MaxPermSize</code>限制方法区的大小。<blockquote><p>使用JConsole生成Heap Dump文件，然后使用MAT分析排查</p></blockquote></li></ul><h2 id="StackOverflow-SOF"><a href="#StackOverflow-SOF" class="headerlink" title="StackOverflow(SOF)"></a>StackOverflow(SOF)</h2><ul><li>Java虚拟机栈和本地方法栈内存溢出：一般是由于程序中存在死循环或者深度递归调用造成的，栈设置太小也会出现此种溢出。可以通过虚拟机参数<code>-Xss</code>来设置栈大小。</li></ul><h1 id="JNI的使用"><a href="#JNI的使用" class="headerlink" title="JNI的使用"></a>JNI的使用</h1><p>&emsp;&emsp;JNI (Java Native Interface)允许Java代码和其他语言代码(主要是C和C++)进行交互。  </p><ol><li>定义本地native方法</li><li>用javah命令生成.h头文件，拷贝至jni目录</li><li>在jni目录中编写.c文件</li><li>在jni目录中创建Android.mk文件，声明所引用的.c文件和生成的函数库名</li><li>创建Application.mk文件，声明支持的平台(armeabi、armeabi-v7a、x86)</li><li>使用ndk工具编译生成.so成动态链接库文件</li></ol>]]></content>
      
      
      <categories>
          
          <category> 笔经面经 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Java </tag>
            
            <tag> 校招 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>杭州(准)独角兽名单</title>
      <link href="/2018/08/05/%E6%9D%AD%E5%B7%9E(%E5%87%86)%E7%8B%AC%E8%A7%92%E5%85%BD%E5%90%8D%E5%8D%95/"/>
      <url>/2018/08/05/%E6%9D%AD%E5%B7%9E(%E5%87%86)%E7%8B%AC%E8%A7%92%E5%85%BD%E5%90%8D%E5%8D%95/</url>
      
        <content type="html"><![CDATA[<blockquote><p>茫茫大海，如何选择心仪的公司，啊哈哈</p></blockquote><a id="more"></a><h1 id="创投协会和微链发布的-准-独角兽名单"><a href="#创投协会和微链发布的-准-独角兽名单" class="headerlink" title="创投协会和微链发布的(准)独角兽名单"></a>创投协会和微链发布的(准)独角兽名单</h1><hr><p><img src="https://raw.githubusercontent.com/chung567115/chung567115.github.io/hexo-blog/blog-img/33-1.png" alt="杭州独角兽"></p>]]></content>
      
      
      <categories>
          
          <category> 业余知识 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 独角兽 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Java面试之数据库</title>
      <link href="/2018/07/21/Java%20%E9%9D%A2%E8%AF%95%E4%B9%8B%E6%95%B0%E6%8D%AE%E5%BA%93/"/>
      <url>/2018/07/21/Java%20%E9%9D%A2%E8%AF%95%E4%B9%8B%E6%95%B0%E6%8D%AE%E5%BA%93/</url>
      
        <content type="html"><![CDATA[<blockquote><p>笔经面经归纳汇总：数据库</p></blockquote><a id="more"></a><h1 id="MySQL"><a href="#MySQL" class="headerlink" title="MySQL"></a>MySQL</h1><h2 id="数据库事务"><a href="#数据库事务" class="headerlink" title="数据库事务"></a>数据库事务</h2><p>&emsp;&emsp;数据库事务是指作为单个逻辑工作单元执行的一系列操作，要么完全地执行，要么完全地不执行。事务满足以下四大特性：  </p><ol><li><strong>原子性（Atomicity）</strong>：一个事务中的所有操作，要么全部完成，要么全部不完成，不会结束在中间某个环节。事务在执行过程中发生错误，会被回滚到事务开始前的状态。</li><li><strong>一致性（Consistency）</strong>：在事务开始之前和事务结束以后，数据库的完整性没有被破坏。</li><li><strong>隔离性（Isolation）</strong>：数据库允许多个并发事务同时对其数据进行读写和修改的能力，隔离性可以防止多个事务并发执行时由于交叉执行而导致数据的不一致。</li><li><strong>持久性（Durability）</strong>：事务处理结束后，对数据的修改就是永久的，即便系统故障也不会丢失。</li></ol><h2 id="事务隔离级别"><a href="#事务隔离级别" class="headerlink" title="事务隔离级别"></a>事务隔离级别</h2><p>&emsp;&emsp;数据读的三类问题：</p><table><thead><tr><th style="text-align:center">问题</th><th style="text-align:center">解释</th></tr></thead><tbody><tr><td style="text-align:center">脏读</td><td style="text-align:center">事务 A 读取了事务 B 未提交的数据（发现读到的数据是脏数据）</td></tr><tr><td style="text-align:center">不可重复读</td><td style="text-align:center">事务 A 读取了事务 B 已提交的更改数据（发现与前一次读的不一致）</td></tr><tr><td style="text-align:center">幻读</td><td style="text-align:center">事务 A 读取了事务 B 已提交的新增数据（发现之前没有这条数据的）</td></tr></tbody></table><p>&emsp;&emsp;事务的四种隔离级别见下表，MySQL默认为<strong>REPEATABLE_READ</strong>：  </p><table><thead><tr><th style="text-align:center">隔离级别(简写)</th><th style="text-align:center">含义</th><th style="text-align:center">隐患</th></tr></thead><tbody><tr><td style="text-align:center">READ_UNCOMMITTED</td><td style="text-align:center">允许读未提交</td><td style="text-align:center">脏读、不可重复读、幻读</td></tr><tr><td style="text-align:center">READ_COMMITTED</td><td style="text-align:center">允许读已提交</td><td style="text-align:center">不可重复读、幻读</td></tr><tr><td style="text-align:center">REPEATABLE_READ</td><td style="text-align:center">允许重复读</td><td style="text-align:center">幻读</td></tr><tr><td style="text-align:center">SERIALIZABLE</td><td style="text-align:center">序列化读</td><td style="text-align:center">–</td></tr></tbody></table><h2 id="存储引擎"><a href="#存储引擎" class="headerlink" title="存储引擎"></a>存储引擎</h2><table><thead><tr><th style="text-align:center">比较点</th><th style="text-align:center">InnoDB</th><th style="text-align:center">MyISAM</th></tr></thead><tbody><tr><td style="text-align:center">事务</td><td style="text-align:center">支持</td><td style="text-align:center">不支持</td></tr><tr><td style="text-align:center">外键</td><td style="text-align:center">支持</td><td style="text-align:center">不支持</td></tr><tr><td style="text-align:center">锁</td><td style="text-align:center">行锁</td><td style="text-align:center">表锁</td></tr><tr><td style="text-align:center">索引</td><td style="text-align:center">聚集索引（数据和索引捆绑）</td><td style="text-align:center">非聚集索引（数据和索引分离)</td></tr><tr><td style="text-align:center">FullText索引</td><td style="text-align:center">不支持</td><td style="text-align:center">支持</td></tr><tr><td style="text-align:center">跨平台</td><td style="text-align:center">可直接拷贝</td><td style="text-align:center">难直接拷贝</td></tr><tr><td style="text-align:center">表格压缩</td><td style="text-align:center">较难</td><td style="text-align:center">较易</td></tr></tbody></table><h3 id="InnoDB索引结构"><a href="#InnoDB索引结构" class="headerlink" title="InnoDB索引结构"></a>InnoDB索引结构</h3><p>&emsp;&emsp;InnoDB使用B+Tree作为索引结构，InnoDB的数据文件本身就是索引文件，<strong>叶节点保存了完整的数据记录</strong>。这个索引的key是数据表的主键，因此InnoDB表数据文件本身就是主索引。</p><p><img src="https://raw.githubusercontent.com/chung567115/chung567115.github.io/hexo-blog/blog-img/32-1.png" alt="InnoDB"></p><blockquote><p>上图是InnoDB主索引（同时也是数据文件）的示意图，可以看到叶节点包含了完整的数据记录。这种索引叫做<kbd><strong>聚集索引</strong></kbd>。因为InnoDB的数据文件本身要按主键聚集，所以InnoDB要求表必须有主键（MyISAM可以没有），如果没有显式指定，则MySQL系统会自动选择一个可以唯一标识数据记录的列作为主键，如果不存在这种列，则MySQL自动为InnoDB表生成一个隐含字段作为主键，这个字段长度为6个字节，类型为长整形。</p></blockquote><p>&emsp;&emsp;除此之外，InnoDB的辅助索引data域存储相应记录<strong>主键</strong>的值而不是地址。换句话说，InnoDB的所有辅助索引都引用主键作为data域，如下图辅助索引：</p><p><img src="https://raw.githubusercontent.com/chung567115/chung567115.github.io/hexo-blog/blog-img/32-2.png" alt="InnoDB"><br>&emsp;&emsp;聚集索引这种实现方式使得按主键的搜索十分高效，但是<strong>辅助索引搜索需要走两遍索引</strong>：首先检索辅助索引获得主键，然后用主键到主索引中检索获得记录。</p><blockquote><p>了解不同存储引擎的索引实现方式对于正确使用和优化索引都非常有帮助，例如知道了InnoDB的索引实现后，就很容易明白为什么不建议使用过长的字段作为主键，因为所有辅助索引都引用主索引，过长的主索引会令辅助索引变得过大。再例如，用非单调的字段作为主键在InnoDB中不是个好主意，因为InnoDB数据文件本身是一颗B+Tree，非单调的主键会造成在插入新记录时数据文件为了维持B+Tree的特性而频繁的分裂调整，十分低效，而使用自增字段作为主键则是一个很好的选择。</p></blockquote><h3 id="MyISAM索引结构"><a href="#MyISAM索引结构" class="headerlink" title="MyISAM索引结构"></a>MyISAM索引结构</h3><p>&emsp;&emsp;MyISAM引擎也使用B+Tree作为索引结构，但具体实现方式却与InnoDB截然不同，MyISAM索引文件和数据文件是分离的，<strong>叶节点存放的是数据记录的地址</strong>。<br><img src="https://raw.githubusercontent.com/chung567115/chung567115.github.io/hexo-blog/blog-img/32-3.png" alt="MyISAM"></p><p>&emsp;&emsp;在MyISAM中，主索引和辅助索引在结构上没有任何区别，只是主索引要求key是唯一的，而辅助索引的key可以重复。辅助索引的结构如下图所示：</p><p><img src="https://raw.githubusercontent.com/chung567115/chung567115.github.io/hexo-blog/blog-img/32-4.png" alt="MyISAM"><br>&emsp;&emsp;MyISAM中索引检索的算法为首先按照B+Tree搜索算法搜索索引，如果指定的Key存在，则取出其data域的值，然后以data域的值为地址，读取相应数据记录。</p><blockquote><p>MyISAM的索引方式也叫做<kbd><strong>非聚集索引</strong></kbd>，之所以这么称呼是为了与InnoDB的聚集索引区分。</p></blockquote><h2 id="数据库索引"><a href="#数据库索引" class="headerlink" title="数据库索引"></a>数据库索引</h2><p>&emsp;&emsp;数据库索引包括<code>B+树索引</code>、<code>R树索引</code>、<code>Hash索引</code>、<code>FullText索引</code>等。  </p><h3 id="B树"><a href="#B树" class="headerlink" title="B树"></a>B树</h3><p>&emsp;&emsp;一棵 $m$  阶 B 树，或为空树，或满足：<br>​    1. 每个结点至多有 $m$ 棵子树。<br>​    2. 若根结点不是叶子，则至少有两棵子树。<br>​    3. 除根之外的所有非终端结点至少有 $\frac{m}{2}$  棵子树。<br>​    4. 所有非终端结点包含 $n$ 个关键字和 $n+1$ 棵子树，$n$ 满足：$\frac{m}{2} - 1 \leq n \leq m-1$。<br>​    5. 所有叶子结点在同一层，不含信息，表示查找失败。</p><h3 id="B-树"><a href="#B-树" class="headerlink" title="B+树"></a>B+树</h3><p>&emsp;&emsp;一棵 $m$ 阶 B+ 树，或为空树，或满足：<br>​    1. 根结点只有一个，分支数量范围为$[2，m]$。<br>​    2. 每个分支结点包含分支数范围为$[\frac{m}{2}，m]$。<br>​    3. 分支结点的关键字数量等于其子分支的数量减一，关键字数量范围为$[\frac{m}{2} - 1， m - 1]$，关键字<strong>顺序递增</strong>。<br>​    4. 所有叶子结点在同一层。</p><p>&emsp;&emsp;由于B+树的数据都存储在叶子结点中，分支结点均为索引，方便扫库，只需要扫一遍叶子结点即可，但是B树因为其分支结点同样存储着数据，我们要找到具体的数据，需要进行一次中序遍历按序来扫。其中B树和B+树的区别如下：  </p><ul><li><strong>关键字数量不同</strong>；B+树中 n 棵子树的结点中含有 n 个关键字；B树中 m 棵子树的结点中含有 m - 1 个关键字。</li><li><strong>存储位置不同</strong>；B+树中所有叶子结点中包含了全部关键字，且按大小顺序排列；B树的数据存储在每一个结点中，并不仅仅存储在叶子结点上。</li><li><strong>分支结点构造不同</strong>；B+树中所有非终端结点都是索引；B树中非终端结点存储数据。</li><li><strong>查找方式不同</strong>；B+树中查找时走了一条从根结点到叶子结点的路径；B树中在找到具体的数值以后就结束，并不一定到叶子结点。</li></ul><blockquote><p>B树：有序数组+平衡多叉树；<br>B+树：有序数组链表+平衡多叉树；</p></blockquote><p>&emsp;&emsp;B+树的关键字全部存放在叶子节点中，非叶子节点用来做索引，而叶子节点中有一个指针指向一下个叶子节点。做这个优化的目的是为了提高<strong>区间访问的性能</strong>。而正是这个特性决定了B+树更适合用来存储外部数据。</p><h3 id="R树（空间索引）"><a href="#R树（空间索引）" class="headerlink" title="R树（空间索引）"></a>R树（空间索引）</h3><p>&emsp;&emsp;一棵R树满足如下的性质：  </p><ol><li>除根结点之外，所有非根结点包含有 m 至 M 个记录索引，根结点的记录个数可以少于 m 。通常 M = 2m 。</li><li>对于所有叶子结点中存储的记录，I 是最小的可以在空间中完全覆盖这些记录所代表的点的矩形（此处“矩形”可以扩展到高维空间）。</li><li>对于所有非叶子结点上的记录，i 是最小的可以在空间上完全覆盖这些条目所代表的点的矩形。</li><li>所有叶子结点在同一层。</li></ol><blockquote><p>R树是B树在K维上的自然扩展</p></blockquote><h3 id="为什么要使用B-树"><a href="#为什么要使用B-树" class="headerlink" title="为什么要使用B+树"></a>为什么要使用B+树</h3><p>&emsp;&emsp;数据库系统的设计者巧妙利用了磁盘预读原理，将一个节点的大小设为等于一个页，这样每个节点只需要一次I/O就可以完全载入。<strong>B+树中一次检索最多需要 h-1 次 I/O（根节点常驻内存）</strong>，渐进复杂度为$O(h)=O(\log_d N)$。一般实际应用中，出度d是非常大的数字，通常超过100，因此h非常小（通常不超过3）。<br>因此，使用B+树作为索引结构效率是非常高的。<br>&emsp;&emsp;而红黑树这种结构，h明显要深的多，所以红黑树的索引结构效率很低。另一方面，由于逻辑上很近的节点（父子）物理上可能很远，导致无法利用局部性一次性载入内存，所以红黑树的 I/O 也比B+树大得多。</p><h3 id="最左前缀原理"><a href="#最左前缀原理" class="headerlink" title="最左前缀原理"></a>最左前缀原理</h3><p>&emsp;&emsp;例如有表table，含a、b、c、d四列，有联合索引&lt;a, b, c&gt;。</p><ol><li><p>全列匹配</p> <div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="false"data-rel="SQL"><figure class="iseeu highlight /sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">-- 当按照索引中所有列进行精确匹配（= 或 IN）时，会走索引</span></span><br><span class="line"><span class="keyword">SELECT</span> * <span class="keyword">FROM</span> t_test <span class="keyword">WHERE</span> a=<span class="string">'1'</span> <span class="keyword">AND</span> b=<span class="string">'2'</span> <span class="keyword">AND</span> c=<span class="string">'3'</span>; <span class="comment">-- a,b,c都走索引</span></span><br></pre></td></tr></table></figure></div></li><li><p>最左前缀匹配</p> <div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="false"data-rel="SQL"><figure class="iseeu highlight /sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">-- 当查询条件精确匹配索引的左边连续一列或几列时，会走（条件所组成的最左前缀）索引。</span></span><br><span class="line"><span class="keyword">SELECT</span> * <span class="keyword">FROM</span> t_test <span class="keyword">WHERE</span> a=<span class="string">'1'</span>; <span class="comment">-- a走索引</span></span><br><span class="line"><span class="keyword">SELECT</span> * <span class="keyword">FROM</span> t_test <span class="keyword">WHERE</span> a=<span class="string">'1'</span> <span class="keyword">AND</span> b=<span class="string">'2'</span>; <span class="comment">-- a,b都走索引</span></span><br><span class="line"><span class="keyword">SELECT</span> * <span class="keyword">FROM</span> t_test <span class="keyword">WHERE</span> a=<span class="string">'1'</span> <span class="keyword">AND</span> c=<span class="string">'3'</span>; <span class="comment">-- a走索引，c不走索引</span></span><br></pre></td></tr></table></figure></div></li><li><p>查询条件没有指定索引第一列</p> <div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="false"data-rel="SQL"><figure class="iseeu highlight /sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">-- 当查询条件不满足最左前缀，则不会走索引</span></span><br><span class="line"><span class="keyword">SELECT</span> * <span class="keyword">FROM</span> t_test <span class="keyword">WHERE</span> b=<span class="string">'2'</span>; <span class="comment">-- 不走索引</span></span><br><span class="line"><span class="keyword">SELECT</span> * <span class="keyword">FROM</span> t_test <span class="keyword">WHERE</span> c=<span class="string">'3'</span>; <span class="comment">-- 不走索引</span></span><br><span class="line"><span class="keyword">SELECT</span> * <span class="keyword">FROM</span> t_test <span class="keyword">WHERE</span> b=<span class="string">'2'</span> <span class="keyword">AND</span> c=<span class="string">'3'</span>; <span class="comment">-- b,c都不走索引</span></span><br></pre></td></tr></table></figure></div></li><li><p>匹配某列的前缀字符串</p> <div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="false"data-rel="SQL"><figure class="iseeu highlight /sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">-- 可以用到索引，但根据具体情况不同可能只会用其中一个前缀</span></span><br><span class="line"><span class="keyword">SELECT</span> * <span class="keyword">FROM</span> t_test <span class="keyword">WHERE</span> a=<span class="string">'1'</span> <span class="keyword">AND</span> b <span class="keyword">LIKE</span> <span class="string">'2%'</span>;</span><br></pre></td></tr></table></figure></div></li><li><p>范围查询</p> <div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="false"data-rel="SQL"><figure class="iseeu highlight /sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">-- 范围列可以用到索引（必须是最左前缀），但是范围列后面的列无法用到索引。</span></span><br><span class="line"><span class="comment">-- 索引最多用于一个范围列，查询条件中有两个范围列时无法全用到索引。</span></span><br><span class="line"><span class="keyword">SELECT</span> * <span class="keyword">FROM</span> t_test <span class="keyword">WHERE</span> a&lt;<span class="string">'1'</span> <span class="keyword">AND</span> b=<span class="string">'2'</span>; <span class="comment">-- a走索引，b不走索引</span></span><br><span class="line"><span class="keyword">SELECT</span> * <span class="keyword">FROM</span> t_test <span class="keyword">WHERE</span> b&lt;<span class="string">'2'</span> <span class="keyword">AND</span> c&gt;<span class="string">'3'</span>; <span class="comment">-- b,c都不走索引</span></span><br></pre></td></tr></table></figure></div></li><li><p>查询条件含函数或表达式</p> <div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="false"data-rel="SQL"><figure class="iseeu highlight /sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">-- 如果查询条件中含有函数或表达式，MySQL不会为这列使用索引</span></span><br><span class="line"><span class="keyword">SELECT</span> * <span class="keyword">FROM</span> t_test <span class="keyword">WHERE</span> <span class="keyword">left</span>(a, <span class="number">1</span>)=<span class="string">'1'</span>; <span class="comment">--不走索引</span></span><br><span class="line"><span class="keyword">SELECT</span> * <span class="keyword">FROM</span> t_test <span class="keyword">WHERE</span> a=<span class="string">'1'</span> <span class="keyword">AND</span> <span class="keyword">left</span>(b, <span class="number">1</span>)=<span class="string">'2'</span>; <span class="comment">-- a走索引，b不走索引</span></span><br></pre></td></tr></table></figure></div></li></ol><h2 id="左右连接查询"><a href="#左右连接查询" class="headerlink" title="左右连接查询"></a>左右连接查询</h2><ol><li>左连接(left join)：显示左表所有数据和右表相应数据。</li><li>右连接(right join)：显示右表所有数据加左表相应数据。</li><li>内连接(inner join)：显示有效公共数据。</li><li>全连接(full join)：显示所有数据。</li></ol><blockquote><p><strong>左连接只影响右表，右连接只影响左表</strong></p></blockquote><h1 id="Redis"><a href="#Redis" class="headerlink" title="Redis"></a>Redis</h1><h2 id="Redis简介"><a href="#Redis简介" class="headerlink" title="Redis简介"></a>Redis简介</h2><p>&emsp;&emsp;基于C语言开发的一种非关系型数据库，数据放在内存，使用<strong>RDB</strong>[快照]方式或者<strong>AOF</strong>[日志]方式持久化。<br>&emsp;&emsp;Redis的优势包括速度、对富数据类型的支持（String、Hash、List、Set、Zset）、原子性操作、通用性。</p><h2 id="Redis使用场景"><a href="#Redis使用场景" class="headerlink" title="Redis使用场景"></a>Redis使用场景</h2><ul><li>缓存（<strong>热数据</strong>：经常被查询，但不常被改变的数据）</li><li>共享Session（SSO系统）</li><li>队列 / 栈</li><li>位操作（<strong>大数据处理</strong>）</li><li>分布式锁(<strong>setnx命令</strong>)与单线程机制（<strong>秒杀系统</strong>）</li><li>排行榜 / 计数器（<strong>ZSet的zadd命令</strong>）</li><li>发布 / 订阅</li></ul><h1 id="范式"><a href="#范式" class="headerlink" title="范式"></a>范式</h1><h2 id="第一范式（1NF）"><a href="#第一范式（1NF）" class="headerlink" title="第一范式（1NF）"></a>第一范式（1NF）</h2><p>&emsp;&emsp;所谓第一范式（1NF）是指在关系模型中，对域添加的一个规范要求，所有的域都应该是原子性的，即数据库表的每一列都是不可分割的原子数据项，而不能是集合，数组，记录等非原子数据项。即实体中的某个属性有多个值时，必须拆分为不同的属性。在符合第一范式（1NF）表中的每个域值只能是实体的一个属性或一个属性的一部分。  </p><blockquote><p>简而言之，第一范式就是无重复的域。</p></blockquote><h2 id="第二范式（2NF）"><a href="#第二范式（2NF）" class="headerlink" title="第二范式（2NF）"></a>第二范式（2NF）</h2><p>&emsp;&emsp;在1NF的基础上，非码属性必须完全依赖于候选码（在1NF基础上消除非主属性对主码的部分函数依赖）。第二范式（2NF）是在第一范式（1NF）的基础上建立起来的，即满足第二范式（2NF）必须先满足第一范式（1NF）。第二范式（2NF）要求数据库表中的每个实例或记录必须可以被唯一地区分，选取一个能区分每个实体的属性或属性组，作为实体的唯一标识。  </p><blockquote><p>简而言之，第二范式就是在满足第一范式的基础上，属性完全依赖于主键。</p></blockquote><h2 id="第三范式（3NF）"><a href="#第三范式（3NF）" class="headerlink" title="第三范式（3NF）"></a>第三范式（3NF）</h2><p>&emsp;&emsp;在2NF基础上，任何非主属性不依赖于其它非主属性（在2NF基础上消除传递依赖）。第三范式（3NF）是第二范式（2NF）的一个子集，即满足第三范式（3NF）必须满足第二范式（2NF）。简而言之，第三范式（3NF）要求一个关系中不包含已在其它关系已包含的非主关键字信息。  </p><blockquote><p>简而言之，第三范式就是在满足第二范式的基础上，属性不依赖于其它非主属性。</p></blockquote><h1 id="分库后如何实现分页查询"><a href="#分库后如何实现分页查询" class="headerlink" title="分库后如何实现分页查询"></a>分库后如何实现分页查询</h1><ol><li>直接使用跨库的多表联合查询（不建议）。</li><li>向每个数据库均发送一个查询请求，然后对所有查询结果汇总，再处理分页逻辑。</li><li>建立一个总数据库，只负责维护主键和必要的索引，以供分页查询。</li><li>使用Redis维护一个主键序列，分页操作就是截取该序列的一部分，其结果就是主键ID集合，拿到ID后便可映射到多个数据库查询数据。</li></ol><blockquote><p>“多台”数据库访问的问题无解，但同台“多次”数据库访问的问题可以通过程序优化。</p></blockquote><h1 id="SQL注入的原理，如何预防"><a href="#SQL注入的原理，如何预防" class="headerlink" title="SQL注入的原理，如何预防"></a>SQL注入的原理，如何预防</h1><p>&emsp;&emsp;所谓SQL注入，就是通过把SQL命令插入到Web表单提交或输入域名或页面请求的查询字符串，最终达到欺骗服务器执行恶意的SQL命令。  </p><ol><li>对用户的输入进行校验，可以通过正则表达式，或限制长度，对单引号和双”-“进行转换等。</li><li>不要使用动态拼装SQL，应使用参数化的SQL或者直接使用存储过程进行数据查询存取。</li><li>不要使用管理员权限的数据库连接，为每个应用使用单独的权限有限的数据库连接。</li><li>不要把机密信息明文存放，应加密或者Hash掉密码和敏感的信息。</li><li>使用自定义的错误信息对原始错误信息进行包装，把异常信息存放在独立的表中。</li></ol>]]></content>
      
      
      <categories>
          
          <category> 笔经面经 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Java </tag>
            
            <tag> 校招 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Java面试之计算机网络</title>
      <link href="/2018/07/21/Java%20%E9%9D%A2%E8%AF%95%E4%B9%8B%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C/"/>
      <url>/2018/07/21/Java%20%E9%9D%A2%E8%AF%95%E4%B9%8B%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C/</url>
      
        <content type="html"><![CDATA[<blockquote><p>笔经面经归纳汇总：计算机网络</p></blockquote><a id="more"></a><h1 id="OSI与TCP-IP各层"><a href="#OSI与TCP-IP各层" class="headerlink" title="OSI与TCP/IP各层"></a>OSI与TCP/IP各层</h1><p><img src="https://raw.githubusercontent.com/chung567115/chung567115.github.io/hexo-blog/blog-img/31-1.png" alt="OSI与TCP/IP结构"></p><h1 id="TCP、HTTP"><a href="#TCP、HTTP" class="headerlink" title="TCP、HTTP"></a>TCP、HTTP</h1><h2 id="TCP三次握手、四次挥手"><a href="#TCP三次握手、四次挥手" class="headerlink" title="TCP三次握手、四次挥手"></a>TCP三次握手、四次挥手</h2><h3 id="TCP三次握手（建立连接）"><a href="#TCP三次握手（建立连接）" class="headerlink" title="TCP三次握手（建立连接）"></a>TCP三次握手（建立连接）</h3><ol><li>第一次握手：客户端向服务器发送SYN(seq=j)包到服务器；</li><li>第二次握手：服务器收到SYN包，向客户端发送ACK包(ack=j+1)和SYN包(seq=k)；</li><li>第三次握手：客户端收到SYN＋ACK包，向服务器发送ACK包(ack=k+1)，完成三次握手。<br><img src="https://raw.githubusercontent.com/chung567115/chung567115.github.io/hexo-blog/blog-img/31-2.png" alt="三次握手"></li></ol><h3 id="TCP四次挥手（终止连接）"><a href="#TCP四次挥手（终止连接）" class="headerlink" title="TCP四次挥手（终止连接）"></a>TCP四次挥手（终止连接）</h3><ol><li>第一次挥手：客户端向服务器发送FIN包(seq=j)，关闭客户到服务器的数据传送；</li><li>第二次挥手：服务器收到FIN包，向客户端发送ACK包(ack=j+1)；</li><li>第三次挥手：服务器向客户端发送FIN包(seq=k)；</li><li>第四次挥手：客户端收到FIN包，向客户端发送ACK包(ack=k+1)，完成四次挥手。<br><img src="https://raw.githubusercontent.com/chung567115/chung567115.github.io/hexo-blog/blog-img/31-3.png" alt="四次挥手"></li></ol><h3 id="为什么TCP连接是3次而终止是4次"><a href="#为什么TCP连接是3次而终止是4次" class="headerlink" title="为什么TCP连接是3次而终止是4次"></a>为什么TCP连接是3次而终止是4次</h3><p>&emsp;&emsp;连接时，服务端收到SYN后，把ACK和SYN一起打包回发给客户端，只有3次。<br>&emsp;&emsp;终止时，由于TCP连接是全双工的，每个方向都必须单独进行关闭，即FIN和ACK是分开发送的，所以有4次。<br>&emsp;&emsp;当一方完成它的数据发送任务后，发送一个FIN来终止连接。但收到一个FIN只表示对方没有数据发送，而己方仍能发送数据。因此必须单独关闭。  </p><h2 id="HTTP相关"><a href="#HTTP相关" class="headerlink" title="HTTP相关"></a>HTTP相关</h2><h3 id="HTTP的状态码含义"><a href="#HTTP的状态码含义" class="headerlink" title="HTTP的状态码含义"></a>HTTP的状态码含义</h3><table><thead><tr><th style="text-align:center">分类</th><th style="text-align:center">描述</th></tr></thead><tbody><tr><td style="text-align:center">1xx</td><td style="text-align:center">信息，服务器收到请求，需要请求者继续执行操作</td></tr><tr><td style="text-align:center">2xx</td><td style="text-align:center">成功，操作被成功接收并处理</td></tr><tr><td style="text-align:center">3xx</td><td style="text-align:center">重定向，需要进一步的操作以完成请求</td></tr><tr><td style="text-align:center">4xx</td><td style="text-align:center">请求错误，请求包含语法错误或无法完成请求</td></tr><tr><td style="text-align:center">5xx</td><td style="text-align:center">服务器错误，服务器在处理请求时发生错误</td></tr></tbody></table><h3 id="HTTP-Request的几种类型"><a href="#HTTP-Request的几种类型" class="headerlink" title="HTTP Request的几种类型"></a>HTTP Request的几种类型</h3><table><thead><tr><th style="text-align:center">类型</th><th style="text-align:center">描述</th><th style="text-align:center">幂等性</th><th style="text-align:center">安全性</th></tr></thead><tbody><tr><td style="text-align:center">POST</td><td style="text-align:center">向指定资源提交数据进行处理请求（例如提交表单或上传文件）</td><td style="text-align:center">否</td><td style="text-align:center">否</td></tr><tr><td style="text-align:center">PUT</td><td style="text-align:center">向指定资源位置上传其最新内容</td><td style="text-align:center">是</td><td style="text-align:center">否</td></tr><tr><td style="text-align:center">DELETE</td><td style="text-align:center">请求服务器删除所标识的资源</td><td style="text-align:center">是</td><td style="text-align:center">否</td></tr><tr><td style="text-align:center">GET</td><td style="text-align:center">向特定的资源发出请求</td><td style="text-align:center">是</td><td style="text-align:center">是</td></tr><tr><td style="text-align:center">HEAD</td><td style="text-align:center">向服务器索要与GET请求相一致的响应，不过响应体不会被返回</td><td style="text-align:center">是</td><td style="text-align:center">是</td></tr><tr><td style="text-align:center">OPTIONS</td><td style="text-align:center">返回服务器针对特定资源所支持的HTTP请求方法</td><td style="text-align:center">是</td><td style="text-align:center">是</td></tr><tr><td style="text-align:center">TRACE</td><td style="text-align:center">回显服务器收到的请求，主要用于测试或诊断</td><td style="text-align:center">-</td><td style="text-align:center">-</td></tr><tr><td style="text-align:center">CONNECT</td><td style="text-align:center">HTTP/1.1协议中预留给能够将连接改为管道方式的代理服务器</td><td style="text-align:center">-</td><td style="text-align:center">-</td></tr></tbody></table><blockquote><p>幂等性指该方法多次调用最终资源状态是一样的。<br>安全性指访问资源的时候资源本身不会发生改变。</p></blockquote><h3 id="HTTP-1-0、HTTP1-1、HTTP2-0"><a href="#HTTP-1-0、HTTP1-1、HTTP2-0" class="headerlink" title="HTTP 1.0、HTTP1.1、HTTP2.0"></a>HTTP 1.0、HTTP1.1、HTTP2.0</h3><ul><li>HTTP 1.0中，客户端的每次请求都要建立一次单独的连接，在处理完本次请求后，就自动释放连接。</li><li>HTTP 1.1中，支持<strong>长连接</strong>和<strong>流水线请求</strong>处理，在一个TCP连接上可以传送多个HTTP请求和响应，若干个请求串行化<strong>单线程</strong>处理。</li><li>HTTP2.0中，基于<strong>二进制解析</strong>，可<strong>多路复用</strong>，多个请求可同时在一个连接上<strong>并行处理</strong>。</li></ul><p><img src="https://raw.githubusercontent.com/chung567115/chung567115.github.io/hexo-blog/blog-img/31-4.png" alt="HTTP比较"></p><h2 id="TCP与HTTP的报文结构"><a href="#TCP与HTTP的报文结构" class="headerlink" title="TCP与HTTP的报文结构"></a>TCP与HTTP的报文结构</h2><p><img src="https://raw.githubusercontent.com/chung567115/chung567115.github.io/hexo-blog/blog-img/31-5.png" alt="tcp报文结构"><br><img src="https://raw.githubusercontent.com/chung567115/chung567115.github.io/hexo-blog/blog-img/31-6.png" alt="http报文结构"></p><h1 id="Forward与Redirect"><a href="#Forward与Redirect" class="headerlink" title="Forward与Redirect"></a>Forward与Redirect</h1><ul><li>直接转发（Forward）：也称<strong>转发</strong>，浏览器发出请求，服务器把响应内容读取过来，然后再把这些内容发给浏览器。<strong>地址栏显示原来的URL</strong>。</li><li>间接转发（Redirect）：也称<strong>重定向</strong>，浏览器发出请求，服务器端在响应第一次请求的时候，让浏览器向另一个地址发出请求，然后得到响应。<strong>地址栏显示新的URL</strong>。</li></ul><h1 id="Cookie与Session"><a href="#Cookie与Session" class="headerlink" title="Cookie与Session"></a>Cookie与Session</h1><ul><li>Cookie：为了辨别用户身份而储存在客户端的数据。服务器在Http响应头中添加Set-Cookie信息，浏览器收到响应后会根据头中的字段保存Cookie，下一次访问时在请求头中附带Cookie内容，供服务器根据Cookie值进行后续处理。</li><li>Session：为了保存用户信息而储存在服务端的数据。当客户端第一次访问时，服务器会计算出一个sessionID，创建一个对应的Session对象并存储；然后将sessionID保存至浏览器Cookie，下一次访问时服务器根据sessionID来匹配Session，Session中可以存一些键值对。</li></ul><blockquote><p>Cookie最典型的应用是：①判断用户是否登陆过网站，以便下次登录时能够直接登录。②购物车信息处理。</p></blockquote><h1 id="访问一个网页全过程"><a href="#访问一个网页全过程" class="headerlink" title="访问一个网页全过程"></a>访问一个网页全过程</h1><ol><li>输入URL；</li><li>DNS将域名解析成IP地址；</li><li>建立TCP连接；</li><li>OSPF（内部网关协议）决定经过哪些路由器，ARP（地址解析协议）负责求下一个节点地址；</li><li>发送HTTP请求；</li><li>得到响应，展现HTML界面。</li></ol><h1 id="使用Socket通信的几个关键函数"><a href="#使用Socket通信的几个关键函数" class="headerlink" title="使用Socket通信的几个关键函数"></a>使用Socket通信的几个关键函数</h1><ol><li>初始化socket：<code>int socket(int domain, int type, int protocol);</code><ul><li>domain ：指定通信协议族。</li><li>type：指定socket类型。</li><li>protocol ：协议类型。</li><li>返回值：成功返回非负整数。</li></ul></li><li>绑定端口：<code>int bind(int sockfd, const struct sockaddr *addr, socklen_t addrlen);</code><ul><li>sockfd：socket函数返回的套接字。</li><li>addr：要绑定的地址。</li><li>addrlen：地址长度。</li><li>返回值：成功返回0，失败返回-1。</li></ul></li><li>监听端口：<code>int listen(int sockfd, int backlog);</code><ul><li>sockfd：socket函数返回的套接字。</li><li>backlog：已完成三次握手的最大连接个数。</li><li>返回值：成功返回0，失败返回-1。</li></ul></li><li>响应连接请求：<code>int accept(int sockfd, struct sockaddr *addr, socklen_t *addrlen);</code><ul><li>sockfd：服务器套接字。</li><li>addr：将返回对等方的套接字地址。</li><li>addrlen：返回对等方的套接字地址长度。</li><li>返回值：成功返回非负整数，失败返回-1。</li></ul></li><li>建立连接：<code>int connect(int sockfd, const struct sockaddr *addr, socklen_t addrlen);</code><ul><li>sockfd：未连接套接字。</li><li>addr：要连接的套接字地址。</li><li>addrlen：第二个参数addr长度。</li><li>返回值：成功返回0，失败返回-1。</li></ul></li></ol><h1 id="IP地址分类"><a href="#IP地址分类" class="headerlink" title="IP地址分类"></a>IP地址分类</h1><p><img src="https://raw.githubusercontent.com/chung567115/chung567115.github.io/hexo-blog/blog-img/31-7.png" alt="IP地址分类"></p><h1 id="交换机与路由器区别"><a href="#交换机与路由器区别" class="headerlink" title="交换机与路由器区别"></a>交换机与路由器区别</h1><table><thead><tr><th style="text-align:center">比较点</th><th style="text-align:center">交换机</th><th style="text-align:center">路由器</th></tr></thead><tbody><tr><td style="text-align:center">作用</td><td style="text-align:center">用于网络内部数据交换</td><td style="text-align:center">用于不同网络间数据传输</td></tr><tr><td style="text-align:center">工作层</td><td style="text-align:center">数据链路层</td><td style="text-align:center">网络层</td></tr><tr><td style="text-align:center">处理方式</td><td style="text-align:center">硬件处理</td><td style="text-align:center">软件处理</td></tr><tr><td style="text-align:center">工作依靠</td><td style="text-align:center">MAC地址</td><td style="text-align:center">IP地址</td></tr></tbody></table>]]></content>
      
      
      <categories>
          
          <category> 笔经面经 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Java </tag>
            
            <tag> 校招 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Java面试之操作系统</title>
      <link href="/2018/07/21/Java%20%E9%9D%A2%E8%AF%95%E4%B9%8B%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F/"/>
      <url>/2018/07/21/Java%20%E9%9D%A2%E8%AF%95%E4%B9%8B%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F/</url>
      
        <content type="html"><![CDATA[<blockquote><p>笔经面经归纳汇总：计算机操作系统</p></blockquote><a id="more"></a><h1 id="Linux常用命令"><a href="#Linux常用命令" class="headerlink" title="Linux常用命令"></a>Linux常用命令</h1><ul><li>cd命令：切换目录</li><li>ls命令：查看文件与目录</li><li>cp命令：复制文件</li><li>mv命令：移动文件或文件夹</li><li>rm命令：删除文件或文件夹</li><li>mkdir命令：创建文件夹</li><li>grep命令：用于查找文件里符合条件的字符串</li><li>chmod命令：改变文件权限</li><li>ps命令：进程运行情况</li><li>kill命令：停止进程</li><li>atop / htop命令：查看CPU、内存、磁盘、网络等信息 / 查看CPU、内存、进程等实时信息</li><li>tar命令：文件压缩 / 解压</li><li>vim命令：文本编辑</li><li>gcc命令：编译</li></ul><h1 id="内存管理方式"><a href="#内存管理方式" class="headerlink" title="内存管理方式"></a>内存管理方式</h1><p>&emsp;&emsp;用户程序的逻辑地址空间被划分成若干固定大小的区域，称为页或者页面，相应地，内存物理空间也分成相对应的若干个物理块，页和块的大小相等。可将用户程序的任一页放在内存的任一块中，实现了<strong>离散分配</strong>。  </p><h2 id="页存储"><a href="#页存储" class="headerlink" title="页存储"></a>页存储</h2><p>&emsp;&emsp;为了便于在内存中找到进程的每个页面所对应的物理块，系统为每个进程建立一张页表，记录页面在内存中对应的物理块号，页表一般存放在内存中。在配置了页表后，进程执行时，通过查找该表，即可找到每页在内存中的物理块号。可见页表作用是实现从页号到物理块号的地址映射，这种是<strong>页存储</strong>管理方式。如下图所示：<br><img src="https://raw.githubusercontent.com/chung567115/chung567115.github.io/hexo-blog/blog-img/30-1.png" alt="页表"></p><h2 id="段存储"><a href="#段存储" class="headerlink" title="段存储"></a>段存储</h2><p>&emsp;&emsp;将用户程序地址空间分成若干个大小不等的段，每段可以定义一组相对完整的逻辑信息。存储分配时，以段为单位，段与段在内存中可以不相邻接，也实现了离散分配，这种是<strong>段存储</strong>管理方式。如下图所示：<br><img src="https://raw.githubusercontent.com/chung567115/chung567115.github.io/hexo-blog/blog-img/30-2.png" alt="段表"></p><h2 id="段页存储"><a href="#段页存储" class="headerlink" title="段页存储"></a>段页存储</h2><p>&emsp;&emsp;作业的地址空间首先被分成若干个逻辑分段，每段都有自己的段号，然后再将每段分成若干个大小相等的页。对于主存空间也分成大小相等的页，主存的分配以页为单位，这种是<strong>段页存储</strong>管理方式。如下图所示：<br><img src="https://raw.githubusercontent.com/chung567115/chung567115.github.io/hexo-blog/blog-img/30-3.png" alt="段页表"></p><h1 id="物理地址、逻辑地址、虚拟地址"><a href="#物理地址、逻辑地址、虚拟地址" class="headerlink" title="物理地址、逻辑地址、虚拟地址"></a>物理地址、逻辑地址、虚拟地址</h1><ul><li>物理地址：内存单元所限定地址范围中的地址（CPU地址总线传来的地址）。</li><li>逻辑地址：也叫相对地址，机器语言指令中，用来指定一个操作数或一条指令的地址。</li><li>虚拟地址：也叫线性地址，是逻辑地址到物理地址变换之间的中间层。</li></ul><h1 id="虚拟内存"><a href="#虚拟内存" class="headerlink" title="虚拟内存"></a>虚拟内存</h1><p>&emsp;&emsp;虚拟存储器是指<strong>具有请求调入功能和置换功能，能从逻辑上对内存容量加以扩充的一种存储器系统</strong>。<br>&emsp;&emsp;应用程序在运行之前，仅须将那些当前要运行的少数页面或段先装入内存便可运行。程序在运行时，如果它所要访问的页(段)已调入内存，便可继续执行下去；但如果缺页或缺段，此时程序应利用 OS 所提供的请求调页(段)功能，将它们调入内存，以使进程能继续执行下去。如果此时内存已满，则还须再利用页(段)的置换功能。这样，便可使一个大的用户程序能在较小的内存空间中运行，也可在内存中同时装入更多的进程使它们并发执行。从用户角度看，该系统所具有的内存容量，将比实际内存容量大得多，故人们把这样的存储器称为虚拟存储器。  </p>]]></content>
      
      
      <categories>
          
          <category> 笔经面经 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Java </tag>
            
            <tag> 校招 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Java面试之算法</title>
      <link href="/2018/07/21/Java%20%E9%9D%A2%E8%AF%95%E4%B9%8B%E7%AE%97%E6%B3%95/"/>
      <url>/2018/07/21/Java%20%E9%9D%A2%E8%AF%95%E4%B9%8B%E7%AE%97%E6%B3%95/</url>
      
        <content type="html"><![CDATA[<blockquote><p>笔经面经归纳汇总：算法</p></blockquote><a id="more"></a><h1 id="排序算法"><a href="#排序算法" class="headerlink" title="排序算法"></a>排序算法</h1><p><img src="https://raw.githubusercontent.com/chung567115/chung567115.github.io/hexo-blog/blog-img/29-1.png" alt="排序"></p><p> &emsp;&emsp;名词解释：  </p><ul><li>n: 数据规模</li><li>k: “桶”的个数</li><li>In-place: 占用常数内存，不占用额外内存</li><li>Out-place: 占用额外内存</li></ul><h2 id="快排的Partition函数与归并的Merge函数"><a href="#快排的Partition函数与归并的Merge函数" class="headerlink" title="快排的Partition函数与归并的Merge函数"></a>快排的Partition函数与归并的Merge函数</h2><div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="false"data-rel="C"><figure class="iseeu highlight /c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 快速排序</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">QuickSort</span><span class="params">(T a[], <span class="keyword">int</span> low, <span class="keyword">int</span> high)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (low &lt; high) &#123;</span><br><span class="line">        <span class="comment">/************ Partition 函数**************/</span></span><br><span class="line">        pivot = a[low];</span><br><span class="line">        i = low; j = high;</span><br><span class="line">        <span class="keyword">while</span> (i &lt; j) &#123;</span><br><span class="line">            <span class="keyword">while</span> (i &lt; j &amp;&amp; a[j] &gt;= pivot) &#123;</span><br><span class="line">                j--;</span><br><span class="line">            &#125;</span><br><span class="line">            a[i] = a[j];</span><br><span class="line">            <span class="keyword">while</span> (i &lt; j &amp;&amp; a[i] &lt;= pivot) &#123;</span><br><span class="line">                i++;</span><br><span class="line">            &#125;</span><br><span class="line">            a[j] = a[i];</span><br><span class="line">        &#125;</span><br><span class="line">        a[i] = pivot;</span><br><span class="line">        <span class="comment">/*****************************************/</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">// 对子序列快排</span></span><br><span class="line">        QuickSort(a, low, i<span class="number">-1</span>);</span><br><span class="line">        QuickSort(a, i+<span class="number">1</span>, high);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">// 归并排序</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">MergeSort</span> <span class="params">( T a[], <span class="keyword">int</span> low, <span class="keyword">int</span> high )</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> ( low &gt;= high ) &#123;</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        mid = (low + high) / <span class="number">2</span>;</span><br><span class="line">        MergeSort(a, low, mid);</span><br><span class="line">        MergeSort(a, mid+<span class="number">1</span>, high);</span><br><span class="line">        Merge(a, low, mid, high);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/****************** Merge 函数*********************/</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">Merge</span><span class="params">(T a[], <span class="keyword">int</span> low, <span class="keyword">int</span> mid, <span class="keyword">int</span> high)</span> </span>&#123;</span><br><span class="line">    <span class="comment">// 归并到 b[]</span></span><br><span class="line">    i = low; </span><br><span class="line">    k = low;</span><br><span class="line">    <span class="keyword">while</span>(i &lt;= mid &amp;&amp; j &lt;= high ) &#123;</span><br><span class="line">        <span class="keyword">if</span>(a[i] &lt;= a[j]) &#123; </span><br><span class="line">            b[k] = a[i]; i++; </span><br><span class="line">        &#125; <span class="keyword">else</span> &#123; </span><br><span class="line">            b[k] = a[j]; j++; </span><br><span class="line">        &#125;</span><br><span class="line">        k++;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 归并剩余元素</span></span><br><span class="line">    <span class="keyword">while</span>(i &lt;= mid) &#123;</span><br><span class="line">        b[k++] = a[i++];</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">while</span>(j &lt;= high) &#123;</span><br><span class="line">        b[k++] = a[j++];</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 从 b[]复制回 a[]</span></span><br><span class="line">    a[low..high] = b[low..high];</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/*************************************************/</span></span><br></pre></td></tr></table></figure></div><blockquote><p>排序详解可参考博文 <a href="https://www.cnblogs.com/onepixel/articles/7674659.html" target="_blank" rel="noopener">https://www.cnblogs.com/onepixel/articles/7674659.html</a></p></blockquote><h1 id="二分查找"><a href="#二分查找" class="headerlink" title="二分查找"></a>二分查找</h1><div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="false"data-rel="C"><figure class="iseeu highlight /c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">BinarySearch</span><span class="params">( DataType a[], <span class="keyword">int</span> low, <span class="keyword">int</span> high, DataType x )</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> ( low&gt;high ) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="number">-1</span>; <span class="comment">// 查找失败</span></span><br><span class="line">    &#125;</span><br><span class="line">    mid = (low + high) / <span class="number">2</span>; <span class="comment">// 折半</span></span><br><span class="line">    <span class="keyword">if</span> ( a[mid] == x ) &#123;</span><br><span class="line">        <span class="keyword">return</span> mid; <span class="comment">// 找到</span></span><br><span class="line">    &#125; <span class="keyword">else</span> <span class="keyword">if</span> ( x &lt; a[mid] ) &#123;</span><br><span class="line">        <span class="keyword">return</span> BinarySearch(a, low, mid - <span class="number">1</span>, x);</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> BinarySearch(a, mid + <span class="number">1</span>, high, x);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div><h1 id="图的DFS算法与BFS算法"><a href="#图的DFS算法与BFS算法" class="headerlink" title="图的DFS算法与BFS算法"></a>图的DFS算法与BFS算法</h1><div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="false"data-rel="C"><figure class="iseeu highlight /c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// DFS 深度优先搜索</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">DFSTraverse</span><span class="params">(Graph G)</span> </span>&#123;</span><br><span class="line">    visited [<span class="number">0.</span>.G.vexnum<span class="number">-1</span>] = <span class="literal">false</span>; <span class="comment">// 初始化访问标志为未访问(false)</span></span><br><span class="line">    <span class="keyword">for</span>(v = <span class="number">0</span>; v &lt; G.vexnum; v++) &#123;</span><br><span class="line">        <span class="keyword">if</span>(!visited[v]) &#123;</span><br><span class="line">            DFS(G, v); <span class="comment">// 从未被访问的顶点开始 DFS</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">DFS</span><span class="params">(Graph G, <span class="keyword">int</span> v)</span> </span>&#123;</span><br><span class="line">    visit ( v ); </span><br><span class="line">    visited [v] = <span class="literal">true</span>; <span class="comment">// 访问顶点 v 并作标记</span></span><br><span class="line">    <span class="keyword">for</span>(w = FirstAdjVex(G,v); w &gt;= <span class="number">0</span>; w = NextAdjVex(G,v,w)) &#123;</span><br><span class="line">        <span class="keyword">if</span> (!visited[w]) &#123;</span><br><span class="line">            DFS(G, w); <span class="comment">// 分别从每个未访问的邻接点开始 DFS</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">// BFS 广度优先搜索</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">BFSTraverse</span><span class="params">(Graph G)</span> </span>&#123;</span><br><span class="line">    visited[<span class="number">0.</span>.G.vexnum<span class="number">-1</span>] = <span class="literal">false</span>; <span class="comment">// 初始化访问标志为未访问(false)</span></span><br><span class="line">    InitQueue(Q);</span><br><span class="line">    <span class="keyword">for</span>(v = <span class="number">0</span>; v &lt; G.vexnum; v++) &#123;</span><br><span class="line">        <span class="keyword">if</span>(!visited[v]) &#123;</span><br><span class="line">            <span class="comment">// 从 v 出发广度优先搜索</span></span><br><span class="line">            visit(v); </span><br><span class="line">            visited [v] = <span class="literal">true</span>;</span><br><span class="line">            EnQueue(Q, v);</span><br><span class="line">            <span class="keyword">while</span>(!QueueEmpty(Q)) &#123;</span><br><span class="line">                DeQueue(Q, u);</span><br><span class="line">                <span class="keyword">for</span>(w = FirstAdjVex(G, u); w &gt;= <span class="number">0</span>; w = NextAdjVex(G, u, w)) &#123;</span><br><span class="line">                    <span class="keyword">if</span>(!visited[w]) &#123;</span><br><span class="line">                        visit(w); </span><br><span class="line">                        visited[w] = <span class="literal">true</span>;</span><br><span class="line">                        EnQueue(Q, w);</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div><h1 id="最小生成树Kruskal算法、Prim算法"><a href="#最小生成树Kruskal算法、Prim算法" class="headerlink" title="最小生成树Kruskal算法、Prim算法"></a>最小生成树Kruskal算法、Prim算法</h1><ul><li>Kruskal：不构成环的情况下，每次选取最小边（边较少时特别有效）。</li><li>Prim：记 $V$ 是连通网的顶点集， $U$ 是求得生成树的顶点集， $TE$ 是求得生成树的边集：<ol><li>开始时， $U={v_0}$， $TE = \Phi$；</li><li>计算 $U$ 到其余顶点 $V-U$ 的最小代价，将该顶点纳入 $U$，边纳入 $TE$；</li><li>重复 2 直到 $U=V$。</li></ol></li></ul><blockquote><p>同一个连通网的最小生成树可能是不唯一的，但其代价都是最小(唯一的)。</p></blockquote><h1 id="最短路径Dijkstra算法-、Floyd算法"><a href="#最短路径Dijkstra算法-、Floyd算法" class="headerlink" title="最短路径Dijkstra算法  、Floyd算法"></a>最短路径Dijkstra算法  、Floyd算法</h1><ul><li><p>Dijkstra：求一个顶点到其他各顶点的最短路径：</p><ol><li>初始化：用起点 v 到该顶点 w 的直接边(弧)初始化最短路径，否则设为 $\infty$；</li><li>从未求得最短路径的终点中选择路径长度最小的终点 $u$：即求得 $v$ 到 $u$ 的最短路径；</li><li>修改最短路径：计算 $u$ 的邻接点的最短路径，若$(v,…,u)+(u,w)&lt;(v,…,w)$，则以<br>$(v,…,u,w)$代替。</li><li>重复 2–3，直到求得 $v$ 到其余所有顶点的最短路径。</li></ol></li><li><p>Floyd：求每对顶点之间的最短路径：<br>  &emsp;&emsp;依次计算 $A^{(0)}$， $A^{(1)}$， …， $A^{(n)}$。 $A^{(0)}$为邻接矩阵，计算$A^{(k)}$时， $A^{(k)}(i,j)=min{A^{(k-1)}(i,j),A^{(k-1)}(i,k)+A^{(k-1)}(k,j)}$。<br>  &emsp;&emsp;技巧：计算$A^{(k)}$的技巧。第$k$行、第$k$列、对角线的元素保持不变，对其余元素，考查$A(i,j)$与$A(i,k)+A(k,j)$（第 $k$ 列 $i$ 行元素加上第 $k$ 行 $j$ 列元素），如果后者更小则替换$A(i,j)$，同时修改路径。</p></li></ul><h1 id="串匹配KMP算法"><a href="#串匹配KMP算法" class="headerlink" title="串匹配KMP算法"></a>串匹配KMP算法</h1><blockquote><p>参考博文 <a href="http://www.ruanyifeng.com/blog/2013/05/Knuth%E2%80%93Morris%E2%80%93Pratt_algorithm.html" target="_blank" rel="noopener">http://www.ruanyifeng.com/blog/2013/05/Knuth%E2%80%93Morris%E2%80%93Pratt_algorithm.html</a></p></blockquote><h1 id="五大算法思想"><a href="#五大算法思想" class="headerlink" title="五大算法思想"></a>五大算法思想</h1><h2 id="贪心算法"><a href="#贪心算法" class="headerlink" title="贪心算法"></a>贪心算法</h2><p> &emsp;&emsp;例：背包问题，均分纸牌，最大整数  </p><blockquote><p>参考博文 <a href="https://blog.csdn.net/qq_32400847/article/details/51336300" target="_blank" rel="noopener">https://blog.csdn.net/qq_32400847/article/details/51336300</a></p></blockquote><h2 id="动态规划算法"><a href="#动态规划算法" class="headerlink" title="动态规划算法"></a>动态规划算法</h2><p>&emsp;&emsp;例：0-1背包问题，钢条切割问题  </p><blockquote><p>参考博文 <a href="https://blog.csdn.net/qq_32400847/article/details/51148917" target="_blank" rel="noopener">https://blog.csdn.net/qq_32400847/article/details/51148917</a></p></blockquote><h2 id="分治算法"><a href="#分治算法" class="headerlink" title="分治算法"></a>分治算法</h2><p>&emsp;&emsp;例：棋盘覆盖、找出伪币、求最值  </p><blockquote><p>参考博文 <a href="https://blog.csdn.net/qq_32400847/article/details/51029121" target="_blank" rel="noopener">https://blog.csdn.net/qq_32400847/article/details/51029121</a></p></blockquote><h2 id="回溯算法"><a href="#回溯算法" class="headerlink" title="回溯算法"></a>回溯算法</h2><p>&emsp;&emsp;例：0-背包问题、旅行商问题、八皇后问题  </p><blockquote><p>参考博文 <a href="https://blog.csdn.net/qq_32400847/article/details/51474105" target="_blank" rel="noopener">https://blog.csdn.net/qq_32400847/article/details/51474105</a></p></blockquote><h2 id="分支限界算法"><a href="#分支限界算法" class="headerlink" title="分支限界算法"></a>分支限界算法</h2><p>&emsp;&emsp;例：装载问题，旅行售货员问题  </p><blockquote><p>参考博文 <a href="https://blog.csdn.net/qq_32400847/article/details/51813606" target="_blank" rel="noopener">https://blog.csdn.net/qq_32400847/article/details/51813606</a></p></blockquote>]]></content>
      
      
      <categories>
          
          <category> 笔经面经 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Java </tag>
            
            <tag> 校招 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Mac IDEA常用快捷键</title>
      <link href="/2018/06/06/Mac%20IDEA%E5%B8%B8%E7%94%A8%E5%BF%AB%E6%8D%B7%E9%94%AE/"/>
      <url>/2018/06/06/Mac%20IDEA%E5%B8%B8%E7%94%A8%E5%BF%AB%E6%8D%B7%E9%94%AE/</url>
      
        <content type="html"><![CDATA[<blockquote><p>Mac版本IDEA最常用的快捷键归纳</p></blockquote><a id="more"></a><table><thead><tr><th style="text-align:center">快捷键</th><th>描述</th></tr></thead><tbody><tr><td style="text-align:center">command + option + Space</td><td>智能提示</td></tr><tr><td style="text-align:center">command + option + B</td><td>跳转至实现处</td></tr><tr><td style="text-align:center">command + option + L</td><td>格式化代码</td></tr><tr><td style="text-align:center">command + option + T</td><td>建立包围代码块try/catch if/else等</td></tr><tr><td style="text-align:center">command + option + V</td><td>补全变量</td></tr><tr><td style="text-align:center">command + option + ⬅️/➡️</td><td>跳转到前/后面编辑处</td></tr><tr><td style="text-align:center">command + shift + F</td><td>全局查找</td></tr><tr><td style="text-align:center">command + shift + O</td><td>优化导包</td></tr><tr><td style="text-align:center">command + shift + ⬆️/⬇️</td><td>上/下移动代码</td></tr><tr><td style="text-align:center">command + D</td><td>复制一行到下行</td></tr><tr><td style="text-align:center">command + F</td><td>当前文件查找</td></tr><tr><td style="text-align:center">command + H</td><td>显示层次结构</td></tr><tr><td style="text-align:center">command + L</td><td>跳转到指定行</td></tr><tr><td style="text-align:center">command + P</td><td>显示方法参数信息</td></tr><tr><td style="text-align:center">command + X</td><td>选中全部</td></tr><tr><td style="text-align:center">command + 1</td><td>打开Project视图</td></tr><tr><td style="text-align:center">command + shift + ➕/➖</td><td>展开/折叠所有代码</td></tr><tr><td style="text-align:center">shift + shift</td><td>查找类</td></tr><tr><td style="text-align:center">option + Enter</td><td>快捷修复</td></tr><tr><td style="text-align:center">option + ⬆️/⬇️</td><td>连续选中代码</td></tr><tr><td style="text-align:center">control + ⬆️/⬇️</td><td>方法间移动</td></tr></tbody></table>]]></content>
      
      
      <categories>
          
          <category> 开发工具 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Java </tag>
            
            <tag> IDEA </tag>
            
            <tag> Mac </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Mac Book Pro常用快捷键</title>
      <link href="/2018/06/03/Mac%20Book%20Pro%E5%B8%B8%E7%94%A8%E5%BF%AB%E6%8D%B7%E9%94%AE/"/>
      <url>/2018/06/03/Mac%20Book%20Pro%E5%B8%B8%E7%94%A8%E5%BF%AB%E6%8D%B7%E9%94%AE/</url>
      
        <content type="html"><![CDATA[<blockquote><p>Mac Book Pro笔记本常用的快捷键汇总</p></blockquote><a id="more"></a><table><thead><tr><th style="text-align:center">快捷键</th><th>描述</th></tr></thead><tbody><tr><td style="text-align:center">command + control + F</td><td>窗口最大化</td></tr><tr><td style="text-align:center">command (+ option) + M</td><td>(所有)窗口最小化</td></tr><tr><td style="text-align:center">command (+ option) + W</td><td>关闭(所有)窗口</td></tr><tr><td style="text-align:center">command + Q</td><td>退出应用</td></tr><tr><td style="text-align:center">command + shift + C</td><td>打开我的电脑</td></tr><tr><td style="text-align:center">(command +) F3</td><td>显示(桌面)调度中心</td></tr><tr><td style="text-align:center">command + A</td><td>选中全部</td></tr><tr><td style="text-align:center">command + S</td><td>保存</td></tr><tr><td style="text-align:center">command (+ shift) + Z</td><td>撤销(重做)</td></tr><tr><td style="text-align:center">command + X</td><td>剪切</td></tr><tr><td style="text-align:center">command + C</td><td>复制</td></tr><tr><td style="text-align:center">command + V</td><td>粘贴</td></tr><tr><td style="text-align:center">command + shift + option + V</td><td>无格式粘贴</td></tr><tr><td style="text-align:center">command + shift + .</td><td>显示隐藏文件</td></tr><tr><td style="text-align:center">command + ⬅️</td><td>当行开头</td></tr><tr><td style="text-align:center">command + ➡️</td><td>当行结尾</td></tr><tr><td style="text-align:center">command + ⬆️</td><td>文稿开头</td></tr><tr><td style="text-align:center">command + ⬇️</td><td>文稿结尾</td></tr><tr><td style="text-align:center">control + shift + off</td><td>睡眠</td></tr><tr><td style="text-align:center">control + space</td><td>切换输入法</td></tr><tr><td style="text-align:center">三指上滑/四指展开</td><td>调度中心/显示桌面</td></tr><tr><td style="text-align:center">command + shift + A</td><td>企业微信截图</td></tr></tbody></table>]]></content>
      
      
      <categories>
          
          <category> 开发工具 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Mac </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>IDEA快捷键Windows vs Mac</title>
      <link href="/2018/06/03/IDEA%E5%BF%AB%E6%8D%B7%E9%94%AEWindows%20vs%20Mac/"/>
      <url>/2018/06/03/IDEA%E5%BF%AB%E6%8D%B7%E9%94%AEWindows%20vs%20Mac/</url>
      
        <content type="html"><![CDATA[<blockquote><p>IDEA快捷键Windows版本和Mac版本</p></blockquote><a id="more"></a><h1 id="Mac-键盘符号说明"><a href="#Mac-键盘符号说明" class="headerlink" title="Mac 键盘符号说明"></a>Mac 键盘符号说明</h1><ul><li><code>⌘</code> == <code>Command</code></li><li><code>⇧</code> == <code>Shift</code></li><li><code>⇪</code> == <code>Caps Lock</code></li><li><code>⌥</code> == <code>Option</code></li><li><code>⌃</code> == <code>Control</code></li><li><code>↩</code> == <code>Return/Enter</code></li><li><code>⌫</code> == <code>Delete</code></li><li><code>⌦</code> == <code>向前删除键（Fn+Delete）</code></li><li><code>↑</code> == <code>上箭头</code></li><li><code>↓</code> == <code>下箭头</code></li><li><code>←</code> == <code>左箭头</code></li><li><code>→</code> == <code>右箭头</code></li><li><code>Page Up</code> == <code>Fn +↑</code></li><li><code>Page Down</code> == <code>Fn +↓</code></li><li><code>Home</code> == <code>Fn + ←</code></li><li><code>End</code> == <code>Fn + →</code></li><li><code>⇥</code> == <code>右制表符（Tab键）</code></li><li><code>⇤</code> == <code>左制表符（Shift+Tab）</code></li><li><code>⎋</code> == <code>Escape (Esc)</code></li><li><code>⏏</code> == <code>电源开关键</code></li></ul><h1 id="Ctrl"><a href="#Ctrl" class="headerlink" title="Ctrl"></a>Ctrl</h1><table><thead><tr><th style="text-align:center">Win 快捷键</th><th style="text-align:center">Mac 快捷键</th><th style="text-align:center">介绍</th></tr></thead><tbody><tr><td style="text-align:center">Ctrl + F</td><td style="text-align:center">Command + F</td><td style="text-align:center">在当前文件进行文本查找</td></tr><tr><td style="text-align:center">Ctrl + R</td><td style="text-align:center">Command + R</td><td style="text-align:center">在当前文件进行文本替换</td></tr><tr><td style="text-align:center">Ctrl + Z</td><td style="text-align:center">Command + Z</td><td style="text-align:center">撤销</td></tr><tr><td style="text-align:center">Ctrl + Y</td><td style="text-align:center">Command + Delete</td><td style="text-align:center">删除光标所在行 或 删除选中的行</td></tr><tr><td style="text-align:center">Ctrl + D</td><td style="text-align:center">Command + D</td><td style="text-align:center">复制光标所在行 或 复制选择内容，并把复制内容插入光标位置下面</td></tr><tr><td style="text-align:center">Ctrl + W</td><td style="text-align:center">Option + 方向键上</td><td style="text-align:center">递进式选择代码块。可选中光标所在的单词或段落，连续按会在原有选中的基础上再扩展选中范围</td></tr><tr><td style="text-align:center">Ctrl + E</td><td style="text-align:center">Command + E</td><td style="text-align:center">显示最近打开的文件记录列表</td></tr><tr><td style="text-align:center">Ctrl + N</td><td style="text-align:center">Command + O</td><td style="text-align:center">根据输入的 类名 查找类文件</td></tr><tr><td style="text-align:center">Ctrl + J</td><td style="text-align:center">Command + J</td><td style="text-align:center">插入自定义动态代码模板</td></tr><tr><td style="text-align:center">Ctrl + P</td><td style="text-align:center">Command + P</td><td style="text-align:center">方法参数提示显示</td></tr><tr><td style="text-align:center">Ctrl + U</td><td style="text-align:center">Command + U</td><td style="text-align:center">前往当前光标所在的方法的父类的方法 / 接口定义</td></tr><tr><td style="text-align:center">Ctrl + B</td><td style="text-align:center">Command + B</td><td style="text-align:center">进入光标所在的方法/变量的接口或是定义处，等效于 <code>Ctrl + 左键单击</code></td></tr><tr><td style="text-align:center">Ctrl + /</td><td style="text-align:center">Command + /</td><td style="text-align:center">注释光标所在行代码，会根据当前不同文件类型使用不同的注释符号</td></tr><tr><td style="text-align:center">Ctrl + F1</td><td style="text-align:center">Command + F1</td><td style="text-align:center">在光标所在的错误代码处显示错误信息</td></tr><tr><td style="text-align:center">Ctrl + F11</td><td style="text-align:center">Option + F3</td><td style="text-align:center">选中文件 / 文件夹，使用助记符设定 / 取消书签</td></tr><tr><td style="text-align:center">Ctrl + Space</td><td style="text-align:center">Control + Space</td><td style="text-align:center">基础代码补全，默认在 Windows 系统上被输入法占用，需要进行修改，建议修改为 <code>Ctrl + 逗号</code></td></tr><tr><td style="text-align:center">Ctrl + Delete</td><td style="text-align:center">Option + Fn + Delete</td><td style="text-align:center">删除光标后面的单词或是中文句</td></tr><tr><td style="text-align:center">Ctrl + BackSpace</td><td style="text-align:center">Option + Delete</td><td style="text-align:center">删除光标前面的单词或是中文句</td></tr><tr><td style="text-align:center">Ctrl + 1,2,3…9</td><td style="text-align:center">Control + 1,2,3…9</td><td style="text-align:center">定位到对应数值的书签位置</td></tr><tr><td style="text-align:center">Ctrl + 加号</td><td style="text-align:center">Command + 加号</td><td style="text-align:center">展开代码</td></tr><tr><td style="text-align:center">Ctrl + 减号</td><td style="text-align:center">Command + 减号</td><td style="text-align:center">折叠代码</td></tr><tr><td style="text-align:center">Ctrl + 左键单击</td><td style="text-align:center">Control + 左键单击</td><td style="text-align:center">在打开的文件标题上，弹出该文件路径</td></tr><tr><td style="text-align:center">Ctrl + 左方向键</td><td style="text-align:center">Option + 左方向键</td><td style="text-align:center">光标跳转到当前单词 / 中文句的左侧开头位置</td></tr><tr><td style="text-align:center">Ctrl + 右方向键</td><td style="text-align:center">Option + 右方向键</td><td style="text-align:center">光标跳转到当前单词 / 中文句的右侧开头位置</td></tr><tr><td style="text-align:center">Ctrl + 前方向键</td><td style="text-align:center">预设中没有该快捷键</td><td style="text-align:center">等效于鼠标滚轮向前效果</td></tr><tr><td style="text-align:center">Ctrl + 后方向键</td><td style="text-align:center">预设中没有该快捷键</td><td style="text-align:center">等效于鼠标滚轮向后效果</td></tr></tbody></table><h1 id="Alt"><a href="#Alt" class="headerlink" title="Alt"></a>Alt</h1><table><thead><tr><th style="text-align:center">Win 快捷键</th><th style="text-align:center">Mac 快捷键</th><th style="text-align:center">介绍</th></tr></thead><tbody><tr><td style="text-align:center">Alt + `</td><td style="text-align:center">Control + V</td><td style="text-align:center">显示版本控制常用操作菜单弹出层</td></tr><tr><td style="text-align:center">Alt + F1</td><td style="text-align:center">Option + F1</td><td style="text-align:center">显示当前文件选择目标弹出层，弹出层中有很多目标可以进行选择</td></tr><tr><td style="text-align:center">Alt + F7</td><td style="text-align:center">Option + F7</td><td style="text-align:center">查询所选对象/变量被引用</td></tr><tr><td style="text-align:center">Alt + Enter</td><td style="text-align:center">Option + Enter</td><td style="text-align:center">IntelliJ IDEA 根据光标所在问题，提供快速修复选择，光标放在的位置不同提示的结果也不同</td></tr><tr><td style="text-align:center">Alt + Insert</td><td style="text-align:center">Command + N</td><td style="text-align:center">代码自动生成，如生成对象的 set / get 方法，构造函数，toString() 等</td></tr><tr><td style="text-align:center">Alt + 左方向键</td><td style="text-align:center">Control + 左方向键</td><td style="text-align:center">切换当前已打开的窗口中的子视图，比如Debug窗口中有Output、Debugger等子视图，用此快捷键就可以在子视图中切换</td></tr><tr><td style="text-align:center">Alt + 右方向键</td><td style="text-align:center">Control + 右方向键</td><td style="text-align:center">切换当前已打开的窗口中的子视图，比如Debug窗口中有Output、Debugger等子视图，用此快捷键就可以在子视图中切换</td></tr><tr><td style="text-align:center">Alt + 前方向键</td><td style="text-align:center">Control + 前方向键</td><td style="text-align:center">当前光标跳转到当前文件的前一个方法名位置</td></tr><tr><td style="text-align:center">Alt + 后方向键</td><td style="text-align:center">Control + 后方向键</td><td style="text-align:center">当前光标跳转到当前文件的后一个方法名位置</td></tr><tr><td style="text-align:center">Alt + 1,2,3…9</td><td style="text-align:center">Command + 1,2,3…9</td><td style="text-align:center">显示对应数值的选项卡，其中 1 是 Project 用得最多</td></tr></tbody></table><h1 id="Shift"><a href="#Shift" class="headerlink" title="Shift"></a>Shift</h1><table><thead><tr><th style="text-align:center">Win 快捷键</th><th style="text-align:center">Mac 快捷键</th><th style="text-align:center">介绍</th></tr></thead><tbody><tr><td style="text-align:center">Shift + F11</td><td style="text-align:center">Command + F3</td><td style="text-align:center">弹出书签显示层</td></tr><tr><td style="text-align:center">Shift + Tab</td><td style="text-align:center">Shift + Tab</td><td style="text-align:center">取消缩进</td></tr><tr><td style="text-align:center">Shift + Enter</td><td style="text-align:center">Shift + Enter</td><td style="text-align:center">开始新一行。光标所在行下空出一行，光标定位到新行位置</td></tr><tr><td style="text-align:center">Shift + 左键单击</td><td style="text-align:center">Shift + 左键单击</td><td style="text-align:center">在打开的文件名上按此快捷键，可以关闭当前打开文件</td></tr></tbody></table><h1 id="Ctrl-Alt"><a href="#Ctrl-Alt" class="headerlink" title="Ctrl + Alt"></a>Ctrl + Alt</h1><table><thead><tr><th style="text-align:center">Win 快捷键</th><th style="text-align:center">Mac 快捷键</th><th style="text-align:center">介绍</th></tr></thead><tbody><tr><td style="text-align:center">Ctrl + Alt + L</td><td style="text-align:center">Command + Option + L</td><td style="text-align:center">格式化代码，可以对当前文件和整个包目录使用</td></tr><tr><td style="text-align:center">Ctrl + Alt + O</td><td style="text-align:center">Control + Option + O</td><td style="text-align:center">优化导入的类，可以对当前文件和整个包目录使用</td></tr><tr><td style="text-align:center">Ctrl + Alt + T</td><td style="text-align:center">Command + Option + T</td><td style="text-align:center">对选中的代码弹出环绕选项弹出层</td></tr><tr><td style="text-align:center">Ctrl + Alt + S</td><td style="text-align:center">Command + 逗号</td><td style="text-align:center">打开 IntelliJ IDEA 系统设置</td></tr><tr><td style="text-align:center">Ctrl + Alt + Enter</td><td style="text-align:center">Command + Option + Enter</td><td style="text-align:center">光标所在行上空出一行，光标定位到新行</td></tr><tr><td style="text-align:center">Ctrl + Alt + 左方向键</td><td style="text-align:center">Command + Option + 左方向键</td><td style="text-align:center">退回到上一个操作的地方</td></tr><tr><td style="text-align:center">Ctrl + Alt + 右方向键</td><td style="text-align:center">Command + Option + 右方向键</td><td style="text-align:center">前进到上一个操作的地方</td></tr></tbody></table><h1 id="Ctrl-Shift"><a href="#Ctrl-Shift" class="headerlink" title="Ctrl + Shift"></a>Ctrl + Shift</h1><table><thead><tr><th style="text-align:center">Win 快捷键</th><th style="text-align:center">Mac 快捷键</th><th style="text-align:center">介绍</th></tr></thead><tbody><tr><td style="text-align:center">Ctrl + Shift + F</td><td style="text-align:center">Command + Shift + F</td><td style="text-align:center">根据输入内容查找整个项目 或 指定目录内文件</td></tr><tr><td style="text-align:center">Ctrl + Shift + R</td><td style="text-align:center">Command + Shift + F</td><td style="text-align:center">根据输入内容替换对应内容，范围为整个项目 或 指定目录内文件</td></tr><tr><td style="text-align:center">Ctrl + Shift + J</td><td style="text-align:center">Control + Shift + J</td><td style="text-align:center">自动将下一行合并到当前行末尾</td></tr><tr><td style="text-align:center">Ctrl + Shift + Z</td><td style="text-align:center">Command + Shift + Z</td><td style="text-align:center">取消撤销</td></tr><tr><td style="text-align:center">Ctrl + Shift + W</td><td style="text-align:center">Option + 方向键下</td><td style="text-align:center">递进式取消选择代码块。可选中光标所在的单词或段落，连续按会在原有选中的基础上再扩展取消选中范围</td></tr><tr><td style="text-align:center">Ctrl + Shift + N</td><td style="text-align:center">Command + Shift + O</td><td style="text-align:center">通过文件名定位 / 打开文件 / 目录，打开目录需要在输入的内容后面多加一个正斜杠</td></tr><tr><td style="text-align:center">Ctrl + Shift + U</td><td style="text-align:center">Command + Shift + U</td><td style="text-align:center">对选中的代码进行大 / 小写轮流转换</td></tr><tr><td style="text-align:center">Ctrl + Shift + T</td><td style="text-align:center">Command + Shift + T</td><td style="text-align:center">对当前类生成单元测试类，如果已经存在的单元测试类则可以进行选择</td></tr><tr><td style="text-align:center">Ctrl + Shift + C</td><td style="text-align:center">Command + Shift + C</td><td style="text-align:center">复制当前文件磁盘路径到剪贴板</td></tr><tr><td style="text-align:center">Ctrl + Shift + B</td><td style="text-align:center">Control + Shift + B</td><td style="text-align:center">跳转到类型声明处</td></tr><tr><td style="text-align:center">Ctrl + Shift + /</td><td style="text-align:center">Command + Option + /</td><td style="text-align:center">代码块注释</td></tr><tr><td style="text-align:center">Ctrl + Shift + [</td><td style="text-align:center">Command + Shift + [</td><td style="text-align:center">选中从光标所在位置到它的顶部中括号位置</td></tr><tr><td style="text-align:center">Ctrl + Shift + ]</td><td style="text-align:center">Command + Shift + ]</td><td style="text-align:center">选中从光标所在位置到它的底部中括号位置</td></tr><tr><td style="text-align:center">Ctrl + Shift + 加号</td><td style="text-align:center">Command + Shift + 加号</td><td style="text-align:center">展开所有代码</td></tr><tr><td style="text-align:center">Ctrl + Shift + 减号</td><td style="text-align:center">Command + Shift + 减号</td><td style="text-align:center">折叠所有代码</td></tr><tr><td style="text-align:center">Ctrl + Shift + F7</td><td style="text-align:center">Command + Shift + F7</td><td style="text-align:center">高亮显示所有该选中文本，按Esc高亮消失</td></tr><tr><td style="text-align:center">Ctrl + Shift + F12</td><td style="text-align:center">Command + Shift + F12</td><td style="text-align:center">编辑器最大化</td></tr><tr><td style="text-align:center">Ctrl + Shift + Enter</td><td style="text-align:center">Command + Shift + Enter</td><td style="text-align:center">自动结束代码，行末自动添加分号</td></tr><tr><td style="text-align:center">Ctrl + Shift + Backspace</td><td style="text-align:center">Ctrl + Shift + Backspace</td><td style="text-align:center">退回到上次修改的地方</td></tr><tr><td style="text-align:center">Ctrl + Shift + 1,2,3…9</td><td style="text-align:center">Control + Shift + 1,2,3…9</td><td style="text-align:center">快速添加指定数值的书签</td></tr><tr><td style="text-align:center">Ctrl + Shift + 左键单击</td><td style="text-align:center">Command + Shift + 左键单击</td><td style="text-align:center">把光标放在某个类变量上，按此快捷键可以直接定位到该类中</td></tr><tr><td style="text-align:center">Ctrl + Shift + 左方向键</td><td style="text-align:center">Option + Shift + 左方向键</td><td style="text-align:center">在代码文件上，光标跳转到当前单词 / 中文句的左侧开头位置，同时选中该单词 / 中文句</td></tr><tr><td style="text-align:center">Ctrl + Shift + 右方向键</td><td style="text-align:center">Option + Shift + 右方向键</td><td style="text-align:center">在代码文件上，光标跳转到当前单词 / 中文句的右侧开头位置，同时选中该单词 / 中文句</td></tr><tr><td style="text-align:center">Ctrl + Shift + 前方向键</td><td style="text-align:center">Command + Shift + 前方向键</td><td style="text-align:center">光标放在方法名上，将方法移动到上一个方法前面，调整方法排序</td></tr><tr><td style="text-align:center">Ctrl + Shift + 后方向键</td><td style="text-align:center">Command + Shift + 后方向键</td><td style="text-align:center">光标放在方法名上，将方法移动到下一个方法前面，调整方法排序</td></tr></tbody></table><h1 id="Alt-Shift"><a href="#Alt-Shift" class="headerlink" title="Alt + Shift"></a>Alt + Shift</h1><table><thead><tr><th style="text-align:center">Win 快捷键</th><th style="text-align:center">Mac</th><th style="text-align:center">快捷键</th><th>介绍</th></tr></thead><tbody><tr><td style="text-align:center">Alt + Shift + N</td><td style="text-align:center">Option + Shift + B</td><td style="text-align:center">选择 / 添加 task</td></tr><tr><td style="text-align:center">Alt + Shift + 左键双击</td><td style="text-align:center">Option + Shift + 左键双击</td><td style="text-align:center">选择被双击的单词 / 中文句，按住不放，可以同时选择其他单词 / 中文句</td></tr><tr><td style="text-align:center">Alt + Shift + 前方向键</td><td style="text-align:center">Option + Shift + 前方向键</td><td style="text-align:center">移动光标所在行向上移动</td></tr><tr><td style="text-align:center">Alt + Shift + 后方向键</td><td style="text-align:center">Option + Shift + 后方向键</td><td style="text-align:center">移动光标所在行向下移动</td></tr></tbody></table><h1 id="Ctrl-Shift-Alt"><a href="#Ctrl-Shift-Alt" class="headerlink" title="Ctrl + Shift + Alt"></a>Ctrl + Shift + Alt</h1><table><thead><tr><th style="text-align:center">Win 快捷键</th><th style="text-align:center">Mac 快捷键</th><th style="text-align:center">介绍</th></tr></thead><tbody><tr><td style="text-align:center">Ctrl + Shift + Alt + V</td><td style="text-align:center">Command + Shift + Option + V</td><td style="text-align:center">无格式黏贴</td></tr><tr><td style="text-align:center">Ctrl + Shift + Alt + S</td><td style="text-align:center">Command + ;</td><td style="text-align:center">打开当前项目设置</td></tr></tbody></table><h1 id="其他"><a href="#其他" class="headerlink" title="其他"></a>其他</h1><table><thead><tr><th style="text-align:center">Win 快捷键</th><th style="text-align:center">Mac 快捷键</th><th style="text-align:center">介绍</th></tr></thead><tbody><tr><td style="text-align:center">F2</td><td style="text-align:center">F2</td><td style="text-align:center">跳转到下一个高亮错误 或 警告位置</td></tr><tr><td style="text-align:center">F4</td><td style="text-align:center">F4</td><td style="text-align:center">编辑源</td></tr><tr><td style="text-align:center">F11</td><td style="text-align:center">F3</td><td style="text-align:center">添加书签</td></tr><tr><td style="text-align:center">F12</td><td style="text-align:center">F12</td><td style="text-align:center">回到前一个工具窗口</td></tr><tr><td style="text-align:center">Tab</td><td style="text-align:center">Tab</td><td style="text-align:center">缩进</td></tr><tr><td style="text-align:center">ESC</td><td style="text-align:center">ESC</td><td style="text-align:center">从工具窗口进入代码文件窗口</td></tr></tbody></table>]]></content>
      
      
      <categories>
          
          <category> 开发工具 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> IDEA </tag>
            
            <tag> Mac </tag>
            
            <tag> Windows </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>美团Java实习面试</title>
      <link href="/2018/06/02/%E7%BE%8E%E5%9B%A2Java%E5%AE%9E%E4%B9%A0%E9%9D%A2%E8%AF%95/"/>
      <url>/2018/06/02/%E7%BE%8E%E5%9B%A2Java%E5%AE%9E%E4%B9%A0%E9%9D%A2%E8%AF%95/</url>
      
        <content type="html"><![CDATA[<blockquote><p>2018年5月9日 11:00 ，接到美团Java实习生电话面试，面试进行了50分钟，记录如下：</p></blockquote><a id="more"></a><h1 id="自我介绍"><a href="#自我介绍" class="headerlink" title="自我介绍"></a>自我介绍</h1><h1 id="Redis缓存更新策略"><a href="#Redis缓存更新策略" class="headerlink" title="Redis缓存更新策略"></a>Redis缓存更新策略</h1><h1 id="RabbbitMQ削峰实现"><a href="#RabbbitMQ削峰实现" class="headerlink" title="RabbbitMQ削峰实现"></a>RabbbitMQ削峰实现</h1><h1 id="Java异常机制（Throwable能否catch）"><a href="#Java异常机制（Throwable能否catch）" class="headerlink" title="Java异常机制（Throwable能否catch）"></a>Java异常机制（Throwable能否catch）</h1><h1 id="HashMap、ConcurrentHashMap（几段）"><a href="#HashMap、ConcurrentHashMap（几段）" class="headerlink" title="HashMap、ConcurrentHashMap（几段）"></a>HashMap、ConcurrentHashMap（几段）</h1><h1 id="访问一个网页全过程"><a href="#访问一个网页全过程" class="headerlink" title="访问一个网页全过程"></a>访问一个网页全过程</h1><h1 id="Linux常用命令"><a href="#Linux常用命令" class="headerlink" title="Linux常用命令"></a>Linux常用命令</h1><h1 id="sleep-和wait"><a href="#sleep-和wait" class="headerlink" title="sleep()和wait()"></a>sleep()和wait()</h1><h1 id="solr"><a href="#solr" class="headerlink" title="solr"></a>solr</h1><h1 id="http几种方法的区别，header里面的内容"><a href="#http几种方法的区别，header里面的内容" class="headerlink" title="http几种方法的区别，header里面的内容"></a>http几种方法的区别，header里面的内容</h1><h1 id="查询所有科目成绩都大于80的学生-SQL-语句"><a href="#查询所有科目成绩都大于80的学生-SQL-语句" class="headerlink" title="查询所有科目成绩都大于80的学生 SQL 语句"></a>查询所有科目成绩都大于80的学生 SQL 语句</h1><h1 id="设计唯一且自增的-int-型-ID"><a href="#设计唯一且自增的-int-型-ID" class="headerlink" title="设计唯一且自增的 int 型 ID"></a>设计唯一且自增的 int 型 ID</h1><h1 id="Integer-缓存"><a href="#Integer-缓存" class="headerlink" title="Integer  缓存"></a>Integer  缓存</h1><h1 id="堆结构"><a href="#堆结构" class="headerlink" title="堆结构"></a>堆结构</h1><h1 id="static-修饰的用法，静态类使用场景"><a href="#static-修饰的用法，静态类使用场景" class="headerlink" title="static 修饰的用法，静态类使用场景"></a>static 修饰的用法，静态类使用场景</h1><h1 id="Java-创建对象的几种方式：new-clone-反射-反序列化"><a href="#Java-创建对象的几种方式：new-clone-反射-反序列化" class="headerlink" title="Java 创建对象的几种方式：new clone 反射 反序列化"></a>Java 创建对象的几种方式：new clone 反射 反序列化</h1><h1 id="有什么问题要咨询"><a href="#有什么问题要咨询" class="headerlink" title="有什么问题要咨询"></a>有什么问题要咨询</h1>]]></content>
      
      
      <categories>
          
          <category> 笔经面经 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Java </tag>
            
            <tag> 美团 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>蘑菇街Java实习面试</title>
      <link href="/2018/05/29/%E8%98%91%E8%8F%87%E8%A1%97Java%E5%AE%9E%E4%B9%A0%E9%9D%A2%E8%AF%95/"/>
      <url>/2018/05/29/%E8%98%91%E8%8F%87%E8%A1%97Java%E5%AE%9E%E4%B9%A0%E9%9D%A2%E8%AF%95/</url>
      
        <content type="html"><![CDATA[<blockquote><p>2018年4月17日16时20分接到蘑菇街Java实习生电话初面，面试进行了30分钟，记录如下：</p></blockquote><a id="more"></a><h1 id="自我介绍"><a href="#自我介绍" class="headerlink" title="自我介绍"></a>自我介绍</h1><h1 id="Java-和-C"><a href="#Java-和-C" class="headerlink" title="Java 和 C++"></a>Java 和 C++</h1><table><thead><tr><th style="text-align:center">比较点</th><th style="text-align:center">Java</th><th style="text-align:center">C++</th></tr></thead><tbody><tr><td style="text-align:center">面向对象思想</td><td style="text-align:center">完全对象化</td><td style="text-align:center">可采用非面向对象(兼容C)</td></tr><tr><td style="text-align:center">内存管理机制</td><td style="text-align:center">Java自身管理</td><td style="text-align:center">程序员管理</td></tr><tr><td style="text-align:center">异常机制</td><td style="text-align:center">完善</td><td style="text-align:center">欠缺</td></tr><tr><td style="text-align:center">第三方库</td><td style="text-align:center">丰富(Log、JUnit等等)</td><td style="text-align:center">较少(STL)</td></tr><tr><td style="text-align:center">执行效率</td><td style="text-align:center">慢</td><td style="text-align:center">快</td></tr><tr><td style="text-align:center">操控底层</td><td style="text-align:center">麻烦</td><td style="text-align:center">方便</td></tr></tbody></table><h1 id="访问网页全过程"><a href="#访问网页全过程" class="headerlink" title="访问网页全过程"></a>访问网页全过程</h1><ol><li>输入URL；</li><li>DNS将域名解析成IP地址；</li><li>建立TCP连接；</li><li>OSPF（内部网关协议）决定经过哪些路由器，ARP（地址解析协议）负责求下一个节点地址；</li><li>发送HTTP请求；</li><li>得到响应，展现HTML界面。</li></ol><h1 id="GET-POST-区别"><a href="#GET-POST-区别" class="headerlink" title="GET POST 区别"></a>GET POST 区别</h1><table><thead><tr><th style="text-align:center">类型</th><th style="text-align:center">描述</th><th style="text-align:center">幂等性</th><th>安全性</th></tr></thead><tbody><tr><td style="text-align:center">POST</td><td style="text-align:center">向指定资源提交数据进行处理请求（例如提交表单或上传文件）</td><td style="text-align:center">否</td><td>否</td></tr><tr><td style="text-align:center">PUT</td><td style="text-align:center">向指定资源位置上传其最新内容</td><td style="text-align:center">是</td><td>否</td></tr><tr><td style="text-align:center">DELETE</td><td style="text-align:center">请求服务器删除所标识的资源</td><td style="text-align:center">是</td><td>否</td></tr><tr><td style="text-align:center">GET</td><td style="text-align:center">向特定的资源发出请求</td><td style="text-align:center">是</td><td>是</td></tr></tbody></table><h1 id="TCP-UDP-HTTP"><a href="#TCP-UDP-HTTP" class="headerlink" title="TCP UDP HTTP"></a>TCP UDP HTTP</h1><table><thead><tr><th style="text-align:center">类型</th><th style="text-align:center">TCP</th><th style="text-align:center">UDP</th><th style="text-align:center">HTTP</th></tr></thead><tbody><tr><td style="text-align:center">是否连接</td><td style="text-align:center">面向连接</td><td style="text-align:center">面向非连接</td><td style="text-align:center">基于TCP</td></tr><tr><td style="text-align:center">传输可靠性</td><td style="text-align:center">可靠</td><td style="text-align:center">不可靠</td><td style="text-align:center">–</td></tr><tr><td style="text-align:center">应用场合</td><td style="text-align:center">传输大量的数据，对可靠性要求较高的场合</td><td style="text-align:center">传送少量数据、对可靠性要求不高的场景</td><td style="text-align:center">–</td></tr><tr><td style="text-align:center">速度</td><td style="text-align:center">慢</td><td style="text-align:center">快</td><td style="text-align:center">–</td></tr></tbody></table><h1 id="Linux常用命令"><a href="#Linux常用命令" class="headerlink" title="Linux常用命令"></a>Linux常用命令</h1><ul><li>vim命令：文本编辑</li><li>gcc命令：编译</li><li>ps命令：进程运行情况</li><li>kill命令：停止进程</li><li>atop / htop命令：查看内存使用情况</li></ul><h1 id="Redis"><a href="#Redis" class="headerlink" title="Redis"></a>Redis</h1><p>&emsp;&emsp;基于C语言开发的一种非关系型数据库，数据放在内存，使用RDB[快照]方式或者AOF[日志]方式持久化。 Redis的优势包括速度、对富数据类型的支持（String、Hash、List、Set、Zset）、原子性操作、通用性。</p><h1 id="RabbitMQ"><a href="#RabbitMQ" class="headerlink" title="RabbitMQ"></a>RabbitMQ</h1><p>&emsp;&emsp;消息队列中间件是分布式系统中重要的组件，主要主要解决应用耦合、异步消息、流量削锋等问题，具有异步性、可靠性（存储到本地硬盘）、松耦合、分布式的特性。</p><ul><li>主要特点是异步处理</li><li>主要目的是减少请求响应时间、解耦</li><li>主要使用场景是将比较耗时且不需同步返回结果的操作当做消息存入队列</li></ul><h1 id="Nginx"><a href="#Nginx" class="headerlink" title="Nginx"></a>Nginx</h1><ul><li>正向代理：隐藏真实的请求客户端，服务端不知道真实的客户端是谁，正向代理服务器会代替客户端向服务器发送请求。正向代理代理的对象是客户端。</li><li>反向代理：隐藏真实的响应服务端，客户端不知道真实的服务端是谁，反向代理服务器会把请求转发到真实的服务器。反向代理代理的对象是服务端。</li></ul><blockquote><p>10086总机就是一种反向代理，客户不知道真正提供服务人的是谁。</p></blockquote><h1 id="Spring-Boot-启动流程（不会）"><a href="#Spring-Boot-启动流程（不会）" class="headerlink" title="Spring Boot 启动流程（不会）"></a>Spring Boot 启动流程（不会）</h1><p>参考博文 <a href="https://www.cnblogs.com/zheting/p/6707035.html" target="_blank" rel="noopener">https://www.cnblogs.com/zheting/p/6707035.html</a><br><img src="https://raw.githubusercontent.com/chung567115/chung567115.github.io/hexo-blog/blog-img/24-1.png" alt="Spring Boot 启动流程"></p><h1 id="自定义starter（不会）"><a href="#自定义starter（不会）" class="headerlink" title="自定义starter（不会）"></a>自定义starter（不会）</h1><p>参考博文 <a href="https://blog.csdn.net/liuchuanhong1/article/details/55057135" target="_blank" rel="noopener">https://blog.csdn.net/liuchuanhong1/article/details/55057135</a></p><h1 id="多线程"><a href="#多线程" class="headerlink" title="多线程"></a>多线程</h1><p>&emsp;&emsp;实现多线程的几种方式</p><ul><li>继承Thread类创建线程</li><li>实现Callable接口创建线程</li><li>实现Runnable接口创建新线程(可用Future返回结果)</li></ul><h1 id="ThreadLocal"><a href="#ThreadLocal" class="headerlink" title="ThreadLocal"></a>ThreadLocal</h1><p>&emsp;&emsp;设计理念是为了减少同一个线程内多个函数或者组件之间一些公共变量的传递的复杂度。作用是提供线程内部的局部变量，这些变量在多线程环境下访问(get/set)时能保证与其它线程里的变量相对独立。打个比方，多人(多个线程)使用自己的交通卡(线程私有变量)乘公交转地铁(两个函数)。</p><blockquote><p>synchronized用于线程间的数据共享，而ThreadLocal则用于线程间的数据隔离。</p></blockquote><h2 id="ThreadLocal-不清空会有什么影响（答得不好）"><a href="#ThreadLocal-不清空会有什么影响（答得不好）" class="headerlink" title="ThreadLocal 不清空会有什么影响（答得不好）"></a>ThreadLocal 不清空会有什么影响（答得不好）</h2><p>&emsp;&emsp;如果使用了线程池，那么即使即使父线程已经结束，子线程依然存在并被池化。这样，线程池中的线程在下一次请求被执行的时候，ThreadLocal 对象的 get() 方法返回的将不是当前线程中设定的变量，因为池中的子线程根本不是当前线程创建的，当前线程设定的 ThreadLocal 变量也就无法传递给线程池中的线程。<br>&emsp;&emsp;因此，必须将外部线程中的 ThreadLocal 变量显式地传递给线程池中的线程，或者每个请求来的时候先 threadLocal.set(null) 。</p><h1 id="ThreadPool"><a href="#ThreadPool" class="headerlink" title="ThreadPool"></a>ThreadPool</h1><p>&emsp;&emsp;使用线程池的优势：</p><ul><li>降低资源消耗：重复利用已创建的线程，降低创建和销毁造成的消耗。</li><li>提高响应速度：任务可以不需要等到线程创建就能立即执行(参考上条)。</li><li>提高管理性：可以进行统一的分配、调优和监控。</li></ul><h1 id="有什么问题要问的"><a href="#有什么问题要问的" class="headerlink" title="有什么问题要问的"></a>有什么问题要问的</h1>]]></content>
      
      
      <categories>
          
          <category> 笔经面经 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Java </tag>
            
            <tag> 蘑菇街 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>酷家乐Java实习面试</title>
      <link href="/2018/05/29/%E9%85%B7%E5%AE%B6%E4%B9%90Java%E5%AE%9E%E4%B9%A0%E9%9D%A2%E8%AF%95/"/>
      <url>/2018/05/29/%E9%85%B7%E5%AE%B6%E4%B9%90Java%E5%AE%9E%E4%B9%A0%E9%9D%A2%E8%AF%95/</url>
      
        <content type="html"><![CDATA[<blockquote><p>2018年3月20日15时00分到酷家乐赴约Java实习现场面试，进行了接近2小时，记录如下：</p></blockquote><a id="more"></a><h1 id="面试"><a href="#面试" class="headerlink" title="面试"></a>面试</h1><h2 id="自我介绍"><a href="#自我介绍" class="headerlink" title="自我介绍"></a>自我介绍</h2><h2 id="多线程实现"><a href="#多线程实现" class="headerlink" title="多线程实现"></a>多线程实现</h2><ol><li>继承Thread类创建线程</li><li>实现Callable接口创建线程</li><li>实现Runnable接口创建新线程</li></ol><h2 id="流量削峰的一种解决方案"><a href="#流量削峰的一种解决方案" class="headerlink" title="流量削峰的一种解决方案"></a>流量削峰的一种解决方案</h2><ul><li>MQ推送模式改为定时或者批量拉取模式</li><li>消息接收方实现批量处理等方式</li></ul><h2 id="介绍Redis"><a href="#介绍Redis" class="headerlink" title="介绍Redis"></a>介绍Redis</h2><p>&emsp;&emsp;基于C语言开发的一种非关系型数据库，数据放在内存，使用<strong>RDB</strong>[快照]方式或者<strong>AOF</strong>[日志]方式持久化。<br>&emsp;&emsp;Redis的优势包括速度、对富数据类型的支持（String、Hash、List、Set、Zset）、原子性操作、通用性。</p><h2 id="Redis使用场景（回答得不好）"><a href="#Redis使用场景（回答得不好）" class="headerlink" title="Redis使用场景（回答得不好）"></a>Redis使用场景（<em>回答得不好</em>）</h2><ul><li>缓存（<strong> 热数据 </strong>）</li><li>共享Session</li><li>队列 / 栈</li><li>位操作（<strong> 大数据处理 </strong>）</li><li>分布式锁与单线程机制（<strong> 秒杀系统 </strong>）</li><li>排行榜 / 计数器（<strong> ZSet ZADD命令 </strong>）</li><li>发布 / 订阅</li></ul><h2 id="Redis如何保证原子性（不会）"><a href="#Redis如何保证原子性（不会）" class="headerlink" title="Redis如何保证原子性（不会）"></a>Redis如何保证原子性（<em>不会</em>）</h2><ol><li>单个操作是原子性的</li><li>多个操作也支持事务，即原子性，通过MULTI和EXEC指令包起来</li></ol><h2 id="介绍对MyBatis的理解"><a href="#介绍对MyBatis的理解" class="headerlink" title="介绍对MyBatis的理解"></a>介绍对MyBatis的理解</h2><p>&emsp;&emsp;MyBatis 是一款优秀的持久层框架，它支持定制化 SQL、存储过程以及高级映射。MyBatis 避免了几乎所有的 JDBC 代码和手动设置参数以及获取结果集，它可以使用简单的 XML 或注解来配置和映射原生信息，将接口和 Java 的 POJO 映射成数据库中的记录。</p><h2 id="SpringMVC的核心"><a href="#SpringMVC的核心" class="headerlink" title="SpringMVC的核心"></a>SpringMVC的核心</h2><ul><li>控制器核心类：DispatcherServlet</li><li>加载配置文件核心类：ContextLoaderListener</li><li>处理url映射核心类：BeanNameUrlHandlerMapping</li><li>处理视图资源核心类：ResourceBundleViewResolver</li><li>方法动态调用核心类ParameterMethodNameResolver</li></ul><h2 id="介绍对Spring的理解"><a href="#介绍对Spring的理解" class="headerlink" title="介绍对Spring的理解"></a>介绍对Spring的理解</h2><p>&emsp;&emsp;Spring是一个轻量级的控制反转(IoC)和面向切面(AOP)的容器框架。</p><ul><li>IoC：控制反转（Inversion of Control）和依赖注入（Dependecy Injection）广义上讲是同一个概念，具体的讲：在Spring中创建被调用者的工作不再由调用者来完成，因此称为控制反转。创建被调用者的工作由Spring来完成，然后注入调用者，因此也称为依赖注入。</li><li>AOP：面向切面编程（AOP）在Spring中主要表现为两个方面 1. 面向切面编程提供声明式事务管理 。2. Spring支持用户自定义的切面。</li></ul><h2 id="Java-8新特性（答得不好）"><a href="#Java-8新特性（答得不好）" class="headerlink" title="Java 8新特性（答得不好）"></a>Java 8新特性（答得不好）</h2><p>&emsp;&emsp;主要有以下几个新特性：</p><ul><li><strong>默认方法</strong>：在接口里面有了一个实现的方法</li><li>Lambda 表达式：Lambda允许把函数作为一个方法的参数</li><li>Stream API：把真正的函数式编程风格引入到Java中</li><li>Date Time API：加强对日期与时间的处理</li><li>Optional 类：Optional 类已成为 Java 8 类库的一部分，用来解决空指针异常</li><li>方法引用：可以直接引用已有Java类或对象的方法或构造器</li><li>新编译工具：Nashorn引擎（一个新的JavaScript引擎）、 类依赖分析器</li></ul><h2 id="λ表达式的理解"><a href="#λ表达式的理解" class="headerlink" title="λ表达式的理解"></a>λ表达式的理解</h2><p>&emsp;&emsp;流式数据处理</p><h2 id="对RESTful的理解"><a href="#对RESTful的理解" class="headerlink" title="对RESTful的理解"></a>对RESTful的理解</h2><p>&emsp;&emsp;<strong>URL定位资源，HTTP动词描述操作</strong></p><ul><li>GET    用来获取资源</li><li>POST  用来新建 / 更新资源</li><li>PUT    用来更新资源</li><li>DELETE  用来删除资源</li></ul><h2 id="对微服务的了解"><a href="#对微服务的了解" class="headerlink" title="对微服务的了解"></a>对微服务的了解</h2><p>&emsp;&emsp;微服务架构风格是一种使用一套小服务来开发单个应用的方式，每个服务运行在自己的进程中，并使用轻量级机制通信（通常是HTTP API），这些服务能够通过自动化部署机制来独立部署、可以使用不同的编程语言实现、可以使用不同的数据存储技术，并保持最低限度的集中式管理。</p><h2 id="DiskLruCache海量图片缓存"><a href="#DiskLruCache海量图片缓存" class="headerlink" title="DiskLruCache海量图片缓存"></a>DiskLruCache海量图片缓存</h2><p>&emsp;&emsp;<strong>三级缓存</strong>:内存LruCache + 磁盘DiskLruCache + 网络Retrofit 2</p><blockquote><p>这是面试官问到本人以前做过的Android项目</p></blockquote><h2 id="遇到过什么技术难题，最终如何解决的"><a href="#遇到过什么技术难题，最终如何解决的" class="headerlink" title="遇到过什么技术难题，最终如何解决的"></a>遇到过什么技术难题，最终如何解决的</h2><h2 id="有什么需要问的"><a href="#有什么需要问的" class="headerlink" title="有什么需要问的"></a>有什么需要问的</h2><hr><h1 id="笔试（1H，共4道题，忘了一道）"><a href="#笔试（1H，共4道题，忘了一道）" class="headerlink" title="笔试（1H，共4道题，忘了一道）"></a>笔试（1H，共4道题，忘了一道）</h1><h2 id="给定一元素可重复的有序数组和一个值，找出数组内该值首次出现和最后出现的数组下标"><a href="#给定一元素可重复的有序数组和一个值，找出数组内该值首次出现和最后出现的数组下标" class="headerlink" title="给定一元素可重复的有序数组和一个值，找出数组内该值首次出现和最后出现的数组下标"></a>给定一元素可重复的有序数组和一个值，找出数组内该值首次出现和最后出现的数组下标</h2><ol><li>不限时间复杂度</li><li>时间复杂度 &lt; O（N）<blockquote><p>可用改进的二分法解答：若当前单位的左右值均不等于给定值时命中。</p></blockquote></li></ol><h2 id="给定一单向列表头部，判断队列有无环路"><a href="#给定一单向列表头部，判断队列有无环路" class="headerlink" title="给定一单向列表头部，判断队列有无环路"></a>给定一单向列表头部，判断队列有无环路</h2><ol><li>不限空间复杂度</li><li>空间复杂度  &lt; O（N）<blockquote><p>可用双指针追逐法解答：步长分别为 k 和 k+1，某一步两指针相遇则有环路。</p></blockquote></li></ol><h2 id="游戏道具：足够大圆桌、足够多黑白围棋。游戏规则：黑白方回合制落子，直至桌面无法再放一颗棋子，则最后落子方胜。如何保证必赢？"><a href="#游戏道具：足够大圆桌、足够多黑白围棋。游戏规则：黑白方回合制落子，直至桌面无法再放一颗棋子，则最后落子方胜。如何保证必赢？" class="headerlink" title="游戏道具：足够大圆桌、足够多黑白围棋。游戏规则：黑白方回合制落子，直至桌面无法再放一颗棋子，则最后落子方胜。如何保证必赢？"></a>游戏道具：足够大圆桌、足够多黑白围棋。游戏规则：黑白方回合制落子，直至桌面无法再放一颗棋子，则最后落子方胜。如何保证必赢？</h2><blockquote><p>第一步占圆心，然后与对方镜像对称下棋，能保证必赢。</p></blockquote>]]></content>
      
      
      <categories>
          
          <category> 笔经面经 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Java </tag>
            
            <tag> 酷家乐 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>51信用卡校招笔试</title>
      <link href="/2018/05/07/51%E4%BF%A1%E7%94%A8%E5%8D%A1%E6%A0%A1%E6%8B%9B%E7%AC%94%E8%AF%95/"/>
      <url>/2018/05/07/51%E4%BF%A1%E7%94%A8%E5%8D%A1%E6%A0%A1%E6%8B%9B%E7%AC%94%E8%AF%95/</url>
      
        <content type="html"><![CDATA[<blockquote><p>2018年5月7日19:00–21:00，参与了51信用卡春招在线考试，题型为20道单项选择题、10道不定项选择题、两道编程题、一道问答题。现将编程题记录如下：</p></blockquote><a id="more"></a><h1 id="字符串AB"><a href="#字符串AB" class="headerlink" title="字符串AB"></a>字符串AB</h1><p><strong>题目描述</strong><br>&emsp;&emsp;有两个都是大写的字符串 A 和 B ，判断 A 中是否包含 B 中所有的字符。<br>&emsp;&emsp;注意：字符串 B 里的字符在 A 中不需要连续或有序。</p><p><strong>输入示例 1</strong><br><div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="false"data-rel="PLAIN"><figure class="iseeu highlight /plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ABCU51NB;NB51</span><br></pre></td></tr></table></figure></div></p><p><strong>输出示例 1</strong><br><div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="false"data-rel="JAVA"><figure class="iseeu highlight /java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">true</span></span><br></pre></td></tr></table></figure></div></p><p><strong>输入示例 2</strong><br><div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="false"data-rel="PLAIN"><figure class="iseeu highlight /plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ACGBEF;DB</span><br></pre></td></tr></table></figure></div></p><p><strong>输出示例 2</strong><br><div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="false"data-rel="JAVA"><figure class="iseeu highlight /java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">false</span></span><br></pre></td></tr></table></figure></div></p><blockquote><p>时间限制：C/C++语言 1 秒；其他语言 2 秒<br>空间限制：C/C++语言 32768 K；其他语言 65536 K</p></blockquote><div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="false"data-rel="JAVA"><figure class="iseeu highlight /java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 本题AC</span></span><br><span class="line"><span class="keyword">import</span> java.util.Scanner;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Main</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        Scanner scanner = <span class="keyword">new</span> Scanner(System.in);</span><br><span class="line">        String str = scanner.nextLine();</span><br><span class="line">        <span class="keyword">boolean</span> flag = <span class="keyword">true</span>;</span><br><span class="line">        <span class="keyword">int</span> index = str.indexOf(<span class="string">";"</span>);</span><br><span class="line">        StringBuffer A = <span class="keyword">new</span> StringBuffer(str.substring(<span class="number">0</span>, index));</span><br><span class="line">        StringBuffer B = <span class="keyword">new</span> StringBuffer(str.substring(index + <span class="number">1</span>, str.length()));</span><br><span class="line">        <span class="keyword">if</span> (A.length() &lt; B.length()) &#123;</span><br><span class="line">            System.out.println(<span class="keyword">false</span>);</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; B.length(); i++) &#123;</span><br><span class="line">            String substr = B.substring(i, i + <span class="number">1</span>);</span><br><span class="line">            <span class="keyword">int</span> indexOfA = A.indexOf(substr);</span><br><span class="line">            <span class="keyword">if</span> (indexOfA &lt; <span class="number">0</span> || indexOfA &gt; A.length() - <span class="number">1</span>) &#123;</span><br><span class="line">                flag = <span class="keyword">false</span>;</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                A.deleteCharAt(indexOfA);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        System.out.println(flag);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div><h1 id="红绿蓝"><a href="#红绿蓝" class="headerlink" title="红绿蓝"></a>红绿蓝</h1><p><strong>题目描述</strong><br>&emsp;&emsp;我们使用 R、G、B 分别表示红、绿、蓝三种颜色，给定一个包含这三个颜色的长度为 n 的数组，现在要求对数组进行分组，使相同颜色的相邻，并按照红、绿、蓝的顺序进行排序。<br>&emsp;&emsp;注意：排序需要在原数组中进行。</p><p><strong>输入示例 1</strong><br><div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="false"data-rel="PLAIN"><figure class="iseeu highlight /plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">RGRB</span><br></pre></td></tr></table></figure></div></p><p><strong>输出示例 1</strong><br><div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="false"data-rel="PLAIN"><figure class="iseeu highlight /plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">RRGB</span><br></pre></td></tr></table></figure></div></p><blockquote><p>时间限制：C/C++语言 1 秒；其他语言 2 秒<br>空间限制：C/C++语言 32768 K；其他语言 65536 K</p></blockquote><div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="false"data-rel="JAVA"><figure class="iseeu highlight /java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 本题AC</span></span><br><span class="line"><span class="keyword">import</span> java.util.Scanner;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Main</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        Scanner scanner = <span class="keyword">new</span> Scanner(System.in);</span><br><span class="line">        String str = scanner.nextLine();</span><br><span class="line">        StringBuffer color = <span class="keyword">new</span> StringBuffer(str);</span><br><span class="line">        <span class="keyword">int</span> loc = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; color.length(); i++) &#123;</span><br><span class="line">            String substr = color.substring(i, i + <span class="number">1</span>);</span><br><span class="line">            <span class="keyword">if</span> (substr.equals(<span class="string">"R"</span>)) &#123;</span><br><span class="line">                String tempR = color.substring(loc, loc + <span class="number">1</span>);</span><br><span class="line">                color.replace(loc, loc + <span class="number">1</span>, <span class="string">"R"</span>);</span><br><span class="line">                color.replace(i, i + <span class="number">1</span>, tempR);</span><br><span class="line">                loc++;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        loc = color.length() - <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> j = color.length() - <span class="number">1</span>; j &gt;= <span class="number">0</span>; j--) &#123;</span><br><span class="line">            String substr = color.substring(j, j + <span class="number">1</span>);</span><br><span class="line">            <span class="keyword">if</span> (substr.equals(<span class="string">"B"</span>)) &#123;</span><br><span class="line">                String tempB = color.substring(loc, loc + <span class="number">1</span>);</span><br><span class="line">                color.replace(loc, loc + <span class="number">1</span>, <span class="string">"B"</span>);</span><br><span class="line">                color.replace(j, j + <span class="number">1</span>, tempB);</span><br><span class="line">                loc--;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">        System.out.println(color);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>]]></content>
      
      
      <categories>
          
          <category> 笔经面经 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Java </tag>
            
            <tag> 51信用卡 </tag>
            
            <tag> 校招 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Java中父类和子类的代码执行顺序</title>
      <link href="/2018/05/02/Java%E4%B8%AD%E7%88%B6%E7%B1%BB%E5%92%8C%E5%AD%90%E7%B1%BB%E7%9A%84%E4%BB%A3%E7%A0%81%E6%89%A7%E8%A1%8C%E9%A1%BA%E5%BA%8F/"/>
      <url>/2018/05/02/Java%E4%B8%AD%E7%88%B6%E7%B1%BB%E5%92%8C%E5%AD%90%E7%B1%BB%E7%9A%84%E4%BB%A3%E7%A0%81%E6%89%A7%E8%A1%8C%E9%A1%BA%E5%BA%8F/</url>
      
        <content type="html"><![CDATA[<blockquote><p>Java中，父类和子类的各种静态的、非静态的函数或变量，到底是个什么样的初始化顺序呢？</p></blockquote><a id="more"></a><h1 id="父类代码"><a href="#父类代码" class="headerlink" title="父类代码"></a>父类代码</h1><div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="false"data-rel="JAVA"><figure class="iseeu highlight /java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Parent</span> </span>&#123;</span><br><span class="line">    <span class="keyword">static</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">"Parent static block"</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    &#123;</span><br><span class="line">        System.out.println(<span class="string">"Parent non static block"</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">final</span> <span class="keyword">static</span> Value i = <span class="keyword">new</span> Value(<span class="string">"Parent static value"</span>);</span><br><span class="line"></span><br><span class="line">    Value j = <span class="keyword">new</span> Value(<span class="string">"Parent non static value"</span>);</span><br><span class="line"></span><br><span class="line">    Parent() &#123;</span><br><span class="line">        System.out.println(<span class="string">"Parent Constructor"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div><h1 id="子类代码"><a href="#子类代码" class="headerlink" title="子类代码"></a>子类代码</h1><div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="false"data-rel="JAVA"><figure class="iseeu highlight /java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Child</span> <span class="keyword">extends</span> <span class="title">Parent</span> </span>&#123;</span><br><span class="line">    <span class="keyword">static</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">"Child static block"</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">final</span> <span class="keyword">static</span> Value i = <span class="keyword">new</span> Value(<span class="string">"Child static value"</span>);</span><br><span class="line"></span><br><span class="line">    &#123;</span><br><span class="line">        System.out.println(<span class="string">"Child non static block"</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    Value j = <span class="keyword">new</span> Value(<span class="string">"Child non static value"</span>);</span><br><span class="line"></span><br><span class="line">    Child() &#123;</span><br><span class="line">        System.out.println(<span class="string">"Child Constructor"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div><h1 id="变量类代码"><a href="#变量类代码" class="headerlink" title="变量类代码"></a>变量类代码</h1><div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="false"data-rel="JAVA"><figure class="iseeu highlight /java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Value</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Value</span><span class="params">(String value)</span> </span>&#123;</span><br><span class="line">        System.out.println(value);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div><h1 id="测试代码"><a href="#测试代码" class="headerlink" title="测试代码"></a>测试代码</h1><div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="false"data-rel="JAVA"><figure class="iseeu highlight /java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Main</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        Child child = <span class="keyword">new</span> Child();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div><h1 id="打印结果"><a href="#打印结果" class="headerlink" title="打印结果"></a>打印结果</h1><div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="false"data-rel="XML"><figure class="iseeu highlight /xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">Parent static block</span><br><span class="line">Parent static value</span><br><span class="line">Child static block</span><br><span class="line">Child static value</span><br><span class="line">Parent non static block</span><br><span class="line">Parent non static value</span><br><span class="line">Parent Constructor</span><br><span class="line">Child non static block</span><br><span class="line">Child non static value</span><br><span class="line">Child Constructor</span><br></pre></td></tr></table></figure></div><h1 id="分析总结"><a href="#分析总结" class="headerlink" title="分析总结"></a>分析总结</h1><p>&emsp;&emsp;单从结果可以看出，实例化一个子类对象时，程序步骤如下：</p><ol><li>执行父类静态代码块和静态变量</li><li>执行子类静态代码块和静态变量</li><li>执行父类非静态代码块和非静态变量</li><li>执行父类构造函数</li><li>执行子类非静态代码块和非静态变量</li><li>执行子类构造函数</li></ol><p>&emsp;&emsp;可以得出顺序：父类静态 $\rightarrow$ 子类静态 $\rightarrow$ 父类非静态 $\rightarrow$ 父类构造函数 $\rightarrow$ 子类非静态 $\rightarrow$ 子类构造函数</p><blockquote><p>注意：以上流程3和5步骤中具体的执行顺序，是由代码书写顺序决定的</p></blockquote>]]></content>
      
      
      <categories>
          
          <category> Java </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Java </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Java中 List、Set、Map 之间的区别</title>
      <link href="/2018/04/18/Java%E4%B8%AD%20List%E3%80%81Set%E3%80%81Map%20%E4%B9%8B%E9%97%B4%E7%9A%84%E5%8C%BA%E5%88%AB/"/>
      <url>/2018/04/18/Java%E4%B8%AD%20List%E3%80%81Set%E3%80%81Map%20%E4%B9%8B%E9%97%B4%E7%9A%84%E5%8C%BA%E5%88%AB/</url>
      
        <content type="html"><![CDATA[<blockquote><p>小博此篇记录了开发过程中常用的几种集合详解，三者的区别对比均从<code>IDEA</code>相关层次图里面所得知，基于<code>JDK8</code>。</p></blockquote><a id="more"></a><h1 id="List-列表"><a href="#List-列表" class="headerlink" title="List(列表)"></a>List(列表)</h1><p>&emsp;&emsp;<code>List</code>的元素以线性方式存储，可以存放重复对象，<code>List</code>主要有以下两个实现类：</p><ul><li><code>ArrayList</code> : 长度可变的数组，可以对元素进行随机的访问，向<code>ArrayList</code>中插入与删除元素的速度慢。 <code>JDK8</code> 中<code>ArrayList</code>扩容的实现是通过<code>grow()</code>方法里使用语句<code>newCapacity = oldCapacity + (oldCapacity &gt;&gt; 1)</code>（即1.5倍扩容）计算容量，然后调用<code>Arrays.copyof()</code>方法进行对原数组进行复制。</li><li><code>LinkedList</code>: 采用链表数据结构，插入和删除速度快，但访问速度慢。 </li></ul><h1 id="Set-集合"><a href="#Set-集合" class="headerlink" title="Set(集合)"></a>Set(集合)</h1><p>&emsp;&emsp;<code>Set</code>中的对象不按特定(HashCode)的方式排序，并且没有重复对象，<code>Set</code>主要有以下两个实现类：</p><ul><li><code>HashSet</code>： <code>HashSet</code>按照哈希算法来存取集合中的对象，存取速度比较快。当<code>HashSet</code>中的元素个数超过数组大小*<code>loadFactor</code>（默认值为0.75）时，就会进行近似两倍扩容（<code>newCapacity = (oldCapacity &lt;&lt; 1) + 1</code>）。</li><li><code>TreeSet</code> ：<code>TreeSet</code>实现了<code>SortedSet</code>接口，能够对集合中的对象进行排序。</li></ul><h1 id="Map-映射"><a href="#Map-映射" class="headerlink" title="Map(映射)"></a>Map(映射)</h1><p>&emsp;&emsp;<code>Map</code>是一种把键对象和值对象映射的集合，它的每一个元素都包含一个键对象和值对象。 <code>Map</code>主要有以下两个实现类：</p><ul><li><code>HashMap</code>：<code>HashMap</code>基于散列表实现，其插入和查询<code>&lt;K,V&gt;</code>的开销是固定的，可以通过构造器设置容量和负载因子来调整容器的性能。 </li><li><code>LinkedHashMap</code>：类似于<code>HashMap</code>，但是迭代遍历它时，取得<code>&lt;K,V&gt;</code>的顺序是其插入次序，或者是最近最少使用(<code>LRU</code>)的次序。</li><li><code>TreeMap</code>：<code>TreeMap</code>基于红黑树实现。查看<code>&lt;K,V&gt;</code>时，它们会被排序。<code>TreeMap</code>是唯一的带有<code>subMap()</code>方法的<code>Map</code>，<code>subMap()</code>可以返回一个子树。 </li></ul><h2 id="HashMap"><a href="#HashMap" class="headerlink" title="HashMap"></a>HashMap</h2><p>&emsp;&emsp;底层实现：<code>HashMap</code>底层整体结构是一个数组，数组中的每个元素又是一个链表。每次添加一个对象（put）时会产生一个链表对象（<code>Object</code>类型），<code>Map</code>中的每个<code>Entry</code>就是数组中的一个元素（<code>Map.Entry</code>就是一个<code>&lt;Key,Value&gt;</code>），它具有由当前元素指向下一个元素的引用，这就构成了链表。<br>&emsp;&emsp;存储原理：当向<code>HsahMap</code>中添加元素的时候，先根据<code>HashCode</code>重新计算<code>Key</code>的<code>Hash</code>值，得到数组下标，如果数组该位置已经存在其他元素，那么这个位置的元素将会以链表的形式存放，新加入的放在链头，最先加入的放在链尾，如果数组该位置元素不存在，那么就直接将该元素放到此数组中的该位置。<br>&emsp;&emsp;去重原理：不同的<code>Key</code>算到数组下标相同的几率很小，新建一个<code>&lt;K,V&gt;</code>放入到<code>HashMap</code>的时候，首先会计算Key的数组下标，如果数组该位置已经存在其他元素，则比较两个Key，若相同则覆盖写入，若不同则形成链表。<br>&emsp;&emsp;读取原理：从<code>HashMap</code>中读取（get）元素时，首先计算<code>Key</code>的<code>HashCode</code>，找到数组下标，然后在对应位置的链表中找到需要的元素。<br> &emsp;&emsp;扩容机制：当<code>HashMap</code>中的元素个数超过数组大小*<code>loadFactor</code>（默认值为0.75）时，就会进行2倍扩容（<code>oldThr &lt;&lt; 1</code>）。</p><h1 id="三者区别"><a href="#三者区别" class="headerlink" title="三者区别"></a>三者区别</h1><table><thead><tr><th style="text-align:center">比较</th><th style="text-align:center">List</th><th style="text-align:center">Set</th><th style="text-align:center">Map</th></tr></thead><tbody><tr><td style="text-align:center">继承接口</td><td style="text-align:center">Collection</td><td style="text-align:center">Collection</td><td style="text-align:center"></td></tr><tr><td style="text-align:center">常见实现类</td><td style="text-align:center">AbstractList(其常用子类有ArrayList、LinkedList、Vector)</td><td style="text-align:center">AbstractSet(其常用子类有HashSet、LinkedHashSet、TreeSet)</td><td style="text-align:center">HashMap、HashTable</td></tr><tr><td style="text-align:center">常见方法</td><td style="text-align:center">add( )、remove( )、clear( )、get( )、contains( )、size( )</td><td style="text-align:center">add( )、remove( )、clear( )、contains( )、size( )</td><td style="text-align:center">put( )、get( )、remove( )、clear( )、containsKey( )、containsValue( )、keySet( )、values( )、size( )</td></tr><tr><td style="text-align:center">元素</td><td style="text-align:center">可重复</td><td style="text-align:center">不可重复(用<code>equals()</code>判断)</td><td style="text-align:center">不可重复</td></tr><tr><td style="text-align:center">顺序</td><td style="text-align:center">有序</td><td style="text-align:center">无序(实际上由HashCode决定)</td><td style="text-align:center"></td></tr><tr><td style="text-align:center">线程安全</td><td style="text-align:center">Vector线程安全</td><td style="text-align:center"></td><td style="text-align:center">Hashtable线程安全</td></tr></tbody></table>]]></content>
      
      
      <categories>
          
          <category> Java </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Java </tag>
            
            <tag> 数据结构 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>进程、线程、死锁</title>
      <link href="/2018/04/18/%E8%BF%9B%E7%A8%8B%E3%80%81%E7%BA%BF%E7%A8%8B%E3%80%81%E6%AD%BB%E9%94%81/"/>
      <url>/2018/04/18/%E8%BF%9B%E7%A8%8B%E3%80%81%E7%BA%BF%E7%A8%8B%E3%80%81%E6%AD%BB%E9%94%81/</url>
      
        <content type="html"><![CDATA[<blockquote><p>关于进程、线程、死锁，计算机操作系统课本里面怎么说~</p></blockquote><a id="more"></a><h1 id="进程"><a href="#进程" class="headerlink" title="进程"></a>进程</h1><p>&emsp;&emsp;进程：系统进行资源分配和调度的一个独立单位。每一个进程都有一个自己的地址空间，即进程空间或（虚空间）。进程有 5 种基本状态：创建、就绪、阻塞、执行、终止。<br>&emsp;&emsp;&emsp;&emsp;&emsp;&emsp;&emsp;&emsp;&emsp;&emsp;<img src="https://raw.githubusercontent.com/chung567115/chung567115.github.io/hexo-blog/blog-img/18-1.png" alt="进程状态转换图"></p><h1 id="线程"><a href="#线程" class="headerlink" title="线程"></a>线程</h1><p>&emsp;&emsp;线程：CPU调度的一个基本单位。线程与同属一个进程的其他线程共享进程所拥有的全部资源。线程有 3 个基本状态：就绪、执行、阻塞。</p><h1 id="进程和线程的区别"><a href="#进程和线程的区别" class="headerlink" title="进程和线程的区别"></a>进程和线程的区别</h1><ol><li>进程是资源的分配和调度的一个独立单元，而线程是CPU调度的基本单元</li><li>进程拥有独立的资源，而各线程共享所属进程的所有资源（寄存器、堆栈等）</li><li>进程结束后它拥有的所有线程都将销毁，而线程的结束不会影响同个进程中的其他线程</li><li>一个程序至少有一个进程，一个进程至少有一个线程</li><li>线程中执行时一般都要进行同步和互斥，因为他们共享同一进程的所有资源</li></ol><h1 id="并行和并发"><a href="#并行和并发" class="headerlink" title="并行和并发"></a>并行和并发</h1><ul><li>并行：CPU同时计算（一场象棋比赛）</li><li>并发：CPU通过调度算法计算（一局象棋对战）</li></ul><h1 id="死锁"><a href="#死锁" class="headerlink" title="死锁"></a>死锁</h1><p>&emsp;&emsp;死锁是指多个进程在执行过程中，由于竞争资源或者由于彼此通信而造成的一种阻塞的现象，若无外力作用，它们都将无法推进下去。<br>&emsp;&emsp;死锁产生的必要条件（只要其中任一条件不成立，死锁就不会发生）：</p><ul><li>互斥条件：进程对所分配的资源进行排他性控制，即在一段时间内某资源仅为一个进程所占有。此时若有其他进程请求该资源，则请求进程只能等待。</li><li>不剥夺条件：进程所获得的资源在未使用完毕之前，不能被其他进程强行夺走，即只能 由获得该资源的进程主动释放。</li><li>请求和保持条件：进程已经保持了至少一个资源，但又提出了新的资源请求，而该资源 已被其他进程占有，此时请求进程被阻塞，但对自己已获得的资源保持不放。</li><li>环路等待条件：存在一个进程——资源的环形链，即进程集合{P0，P1，P2，···，Pn}中的P0正在等待一个P1占用的资源；P1正在等待P2占用的资源，……，Pn正在等待已被P0占用的资源。</li></ul><h2 id="避免死锁"><a href="#避免死锁" class="headerlink" title="避免死锁"></a>避免死锁</h2><p>&emsp;&emsp;可通过以下三种手段避免死锁：</p><ol><li>加锁顺序（线程按一定顺序加锁，若所有线程都按相同顺序获得锁，就能避免死锁）</li><li>加锁时限（线程获取锁时加上时限，超时则放弃并释放所占有的锁，就能避免死锁）</li><li>死锁检测（一个更优的预防机制，主要针对不可能实现按序加锁和加锁时限的场景）</li></ol><p>&emsp;&emsp;每当一个线程获得了锁，便在相关的数据结构中（Map、Graph等）将其记下。当一个线程请求锁失败时，这个线程可以遍历锁的关系图看看是否有死锁发生。<br>&emsp;&emsp;检测出死锁时，有一种解决方案是给这些线程设置优先级，让一个或多个线程回退，剩下的线程继续保持它们需要的锁。</p><blockquote><p>如果赋予这些线程的优先级是固定不变的，同一批线程总是会拥有更高的优先级。为避免这个问题，可以在死锁发生的时候设置随机的优先级。</p></blockquote>]]></content>
      
      
      <categories>
          
          <category> Java </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Java </tag>
            
            <tag> 计算机操作系统 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>synchronized、volatile、lock详解</title>
      <link href="/2018/04/18/synchronized%E3%80%81volatile%E3%80%81Lock%E8%AF%A6%E8%A7%A3/"/>
      <url>/2018/04/18/synchronized%E3%80%81volatile%E3%80%81Lock%E8%AF%A6%E8%A7%A3/</url>
      
        <content type="html"><![CDATA[<blockquote><p>在Java并发编程过程中，我们难免会遇到<code>synchronized</code>、<code>volatile</code>和<code>lock</code>，其中<code>lock</code>是一个类，而其余两个则是Java关键字。以下记录了小博开发过程中对这三者的理解</p></blockquote><a id="more"></a><blockquote><p>关于线程与进程请参考博文 <a href="http://blog.csdn.net/luoweifu/article/details/46595285" target="_blank" rel="noopener">以操作系统的角度述说线程与进程</a></p></blockquote><h1 id="synchronized"><a href="#synchronized" class="headerlink" title="synchronized"></a>synchronized</h1><p>&emsp;&emsp;<code>synchronized</code>是Java中的关键字，是一种同步锁。有以下几种用法：</p><p>1、修饰方法：在范围操作符之后，返回类型声明之前使用。每次只能有一个线程进入该方法，此时线程获得的是成员锁。<br><div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="false"data-rel="JAVA"><figure class="iseeu highlight /java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">synchronized</span> <span class="keyword">void</span> <span class="title">syncMethod</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="comment">//doSomething</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div></p><p>2、修饰代码块：每次只能有一个线程进入该代码块，此时线程获得的是成员锁。<br><div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="false"data-rel="JAVA"><figure class="iseeu highlight /java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">synMethod</span><span class="params">(<span class="keyword">int</span> arg)</span></span>&#123;</span><br><span class="line"><span class="keyword">synchronized</span>(arg) &#123;</span><br><span class="line"><span class="comment">//doSomething</span></span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div></p><p>3、修饰对象：如果当前线程进入，那么其他线程在该类所有对象上的任何操作都不能进行，此时当前线程获得的是对象锁。<br><div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="false"data-rel="JAVA"><figure class="iseeu highlight /java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SyncThread</span> <span class="keyword">implements</span> <span class="title">Runnable</span> </span>&#123;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String args[])</span> </span>&#123;</span><br><span class="line">SyncThread syncThread = <span class="keyword">new</span> SyncThread();</span><br><span class="line">Thread therad1 = <span class="keyword">new</span> Thread(syncThread, <span class="string">"therad1"</span>);</span><br><span class="line">Thread therad2 = <span class="keyword">new</span> Thread(syncThread, <span class="string">"therad2"</span>);</span><br><span class="line">Thread therad3 = <span class="keyword">new</span> Thread(syncThread, <span class="string">"therad3"</span>);</span><br><span class="line">therad1.start();</span><br><span class="line">therad2.start();</span><br><span class="line">therad3.start();</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="keyword">synchronized</span> (<span class="keyword">this</span>) &#123;</span><br><span class="line">System.out.println(Thread.currentThread().getName());</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div></p><p>4、修饰类：如果当前线程进入，那么其他线程在该类中所有操作不能进行，包括静态变量和静态方法，此时当前线程获得的是对象锁。<br><div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="false"data-rel="JAVA"><figure class="iseeu highlight /java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">syncClass</span> </span>&#123;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">method</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="keyword">synchronized</span>(syncClass.class) &#123;</span><br><span class="line"><span class="comment">//doSomething</span></span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div></p><h1 id="volatile"><a href="#volatile" class="headerlink" title="volatile"></a>volatile</h1><p>&emsp;&emsp;<code>volatile</code> 关键字的作用是<strong>禁止指令的重排序</strong>，强制从公共堆栈中取得变量的值，而不是从线程私有的数据栈中取变量的值。<br><code>volatile</code>与<code>synchronized</code>的区别如下：</p><ul><li><code>volatile</code> 不会发生线程阻塞，而 <code>synchronized</code> 会发生线程阻塞。</li><li><code>volatile</code> 只能修饰变量，而 <code>synchronized</code> 可以修饰方法、代码块等。</li><li><code>volatile</code> 不能保证原子性（不能保证线程安全），而 <code>synchronized</code> 可以保证原子性。</li><li><code>volatile</code> 解决的是变量在多线程之间的可见性，而 <code>synchronized</code> 解决的是多线程之间访问资源的同步性。</li></ul><h1 id="lock"><a href="#lock" class="headerlink" title="lock"></a>lock</h1><p>&emsp;&emsp;<code>synchronized</code>是<em>隐式锁</em>，在需要同步的对象中加入此控制，而<code>lock</code>是<em>显示锁</em>，需要显示指定起始位置和终止位置。</p><ul><li>使用<code>lock</code>时在<code>finally</code>中必须释放锁，不然容易造成线程死锁；而使用<code>synchronized</code>时，获取锁的线程会在执行完同步代码后释放锁（或者JVM会在线程执行发生异常时释放锁）。</li><li>使用<code>lock</code>时线程不会一直等待；而使用<code>synchronized</code>时，假设A线程获得锁后阻塞，其他线程会一直等待。</li><li><code>lock</code>可重入、可中断、可公平也可不公平；而<code>synchronized</code>可重入但不可中断、非公平。<blockquote><p>锁的类型请参考博文 <a href="http://www.cnblogs.com/dolphin0520/p/3923167.html" target="_blank" rel="noopener">Java并发编程：Lock</a></p></blockquote></li></ul>]]></content>
      
      
      <categories>
          
          <category> Java </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Java </tag>
            
            <tag> 并发编程 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Windows IDEA常用快捷键</title>
      <link href="/2018/04/13/Windows%20IDEA%E5%B8%B8%E7%94%A8%E5%BF%AB%E6%8D%B7%E9%94%AE/"/>
      <url>/2018/04/13/Windows%20IDEA%E5%B8%B8%E7%94%A8%E5%BF%AB%E6%8D%B7%E9%94%AE/</url>
      
        <content type="html"><![CDATA[<blockquote><p>Windows版本IDEA最常用的快捷键归纳</p></blockquote><a id="more"></a><table><thead><tr><th style="text-align:center">快捷键</th><th style="text-align:center">功能说明</th></tr></thead><tbody><tr><td style="text-align:center">Alt + Enter</td><td style="text-align:center">快捷修复</td></tr><tr><td style="text-align:center">Alt + Insert</td><td style="text-align:center">生成Getter/Setter等代码</td></tr><tr><td style="text-align:center">Alt + ↑ / ↓</td><td style="text-align:center">方法间移动</td></tr><tr><td style="text-align:center">Ctrl + Alt + B</td><td style="text-align:center">跳转到实现处</td></tr><tr><td style="text-align:center">Ctrl + Alt + L</td><td style="text-align:center">格式化代码</td></tr><tr><td style="text-align:center">Ctrl + Alt + O</td><td style="text-align:center">自动导包</td></tr><tr><td style="text-align:center">Ctrl + Alt + Space</td><td style="text-align:center">自动补全</td></tr><tr><td style="text-align:center">Ctrl + Alt + T</td><td style="text-align:center">新建代码块如try/catch</td></tr><tr><td style="text-align:center">Ctrl + Alt + V</td><td style="text-align:center">补全变量</td></tr><tr><td style="text-align:center">Ctrl + Shift + Enter</td><td style="text-align:center">自动补全</td></tr><tr><td style="text-align:center">Ctrl + Shift + F</td><td style="text-align:center">全局搜索</td></tr><tr><td style="text-align:center">Ctrl + Shift + +/-</td><td style="text-align:center">展开/折叠 所有代码</td></tr><tr><td style="text-align:center">Ctrl + Shift + ↑/↓</td><td style="text-align:center">上/下移动 一行代码</td></tr><tr><td style="text-align:center">Ctrl + Shift + /</td><td style="text-align:center">注释代码块</td></tr><tr><td style="text-align:center">Ctrl + D</td><td style="text-align:center">复制一行</td></tr><tr><td style="text-align:center">Ctrl + F</td><td style="text-align:center">当前文件查找</td></tr><tr><td style="text-align:center">Ctrl + F12</td><td style="text-align:center">查看当前类所有方法</td></tr><tr><td style="text-align:center">Ctrl + H</td><td style="text-align:center">显示类结构图</td></tr><tr><td style="text-align:center">Ctrl + J</td><td style="text-align:center">查看快捷模板</td></tr><tr><td style="text-align:center">Ctrl + P</td><td style="text-align:center">方法参数提示</td></tr><tr><td style="text-align:center">Ctrl + Q</td><td style="text-align:center">查看说明文档</td></tr><tr><td style="text-align:center">Ctrl + W</td><td style="text-align:center">连续选中代码块</td></tr><tr><td style="text-align:center">Ctrl + X</td><td style="text-align:center">剪切一行</td></tr><tr><td style="text-align:center">Ctrl + Y</td><td style="text-align:center">删除一行</td></tr><tr><td style="text-align:center">Ctrl + Z</td><td style="text-align:center">撤销</td></tr><tr><td style="text-align:center">Ctrl + /</td><td style="text-align:center">注释一行</td></tr><tr><td style="text-align:center">Shift + Enter</td><td style="text-align:center">新建一行</td></tr><tr><td style="text-align:center">Shift + F6</td><td style="text-align:center">重命名(当前文件所有)</td></tr><tr><td style="text-align:center">/** + Shift + Enter</td><td style="text-align:center">说明注释</td></tr></tbody></table>]]></content>
      
      
      <categories>
          
          <category> 开发工具 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Java </tag>
            
            <tag> IDEA </tag>
            
            <tag> Windows </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>京东校招笔试</title>
      <link href="/2018/04/09/%E4%BA%AC%E4%B8%9C%E6%A0%A1%E6%8B%9B%E7%AC%94%E8%AF%95/"/>
      <url>/2018/04/09/%E4%BA%AC%E4%B8%9C%E6%A0%A1%E6%8B%9B%E7%AC%94%E8%AF%95/</url>
      
        <content type="html"><![CDATA[<blockquote><p>2018年4月9日19:00–21:00，参与了京东春招在线考试，3道编程题记录如下：</p></blockquote><a id="more"></a><h1 id="生成回文串"><a href="#生成回文串" class="headerlink" title="生成回文串"></a>生成回文串</h1><p><strong>题目描述：</strong><br>&emsp;&emsp;对于一个字符串，从前开始读和从后开始读是一样的，我们就称这个字符串是回文串。例如$ABCBA$，$AA$，$A$是回文串，而$ABCD$和$AAB$不是回文串。牛牛特别喜欢回文串，他手中有一个字符串 $s$ ，牛牛在思考能否从字符串中移除部分（0个或多个）字符使其变为回文串。并且牛牛认为空串不是回文串。<br>&emsp;&emsp;牛牛发现移除的方案可能有很多种，希望你帮他计算一下一共有多少种移除方案可以使 $s$ 变为回文串。<em>对于两种移除方案，如果移除的字符构成的序列不一样就是不同的方案。</em></p><p><strong>输入描述</strong><br>输入包括一个字符串$ s (1 \leq length(s) \leq 50 )$，$s$ 中只包含大写字母。</p><p><strong>输出描述</strong><br>对于每个测试用例，输出一个正整数表示方案数。</p><p><strong>样例输入1</strong><br><div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="false"data-rel="PLAIN"><figure class="iseeu highlight /plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">XXY</span><br></pre></td></tr></table></figure></div></p><p><strong>样例输出1</strong><br><div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="false"data-rel="PLAIN"><figure class="iseeu highlight /plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">4</span><br></pre></td></tr></table></figure></div></p><p><strong>样例输入2</strong><br><div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="false"data-rel="PLAIN"><figure class="iseeu highlight /plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ABA</span><br></pre></td></tr></table></figure></div></p><p><strong>样例输出2</strong><br><div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="false"data-rel="PLAIN"><figure class="iseeu highlight /plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">5</span><br></pre></td></tr></table></figure></div></p><blockquote><p>时间限制：C/C++语言 1秒；其他语言 2秒<br>内存限制：C/C++语言 32768KB；其他语言 65536KB</p></blockquote><div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="false"data-rel="JAVA"><figure class="iseeu highlight /java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">未完成</span><br></pre></td></tr></table></figure></div><h1 id="分解整数"><a href="#分解整数" class="headerlink" title="分解整数"></a>分解整数</h1><p><strong>题目描述：</strong><br>&emsp;&emsp; 牛牛的数学老师给了他一个整数 $N$ ，问牛牛能否将 $N$ 分解为两个整数 $X$ 和 $Y$ 相乘，并且满足 $X$ 为奇数， $Y$ 为偶数。即奇数 $X$ 和偶数 $Y$ 满足 $X * Y = N$ 。牛牛被这个问题难住了，希望你能帮他计算。</p><p><strong>输入描述</strong><br>输入的第一行包含一个正整数 $t (1 \leq t \leq 1000)$，表示测试样例数。接下来 $t$ 行，每行一个正整数 $N (2 \leq N \leq 2^{63})$，表示给出的 $N $，保证 $N$ 不是 2 的幂次。</p><p><strong>输出描述</strong><br>如果能找到这样的 $X$，$Y$ 则依次输出，以空格分割，如果有多解，输出 $Y$ 最小的那组解。否则输出 $No$。</p><p><strong>样例输入</strong><br><div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="false"data-rel="PLAIN"><figure class="iseeu highlight /plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">2</span><br><span class="line">10</span><br><span class="line">5</span><br></pre></td></tr></table></figure></div></p><p><strong>样例输出</strong><br><div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="false"data-rel="PLAIN"><figure class="iseeu highlight /plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">5 2</span><br><span class="line">No</span><br></pre></td></tr></table></figure></div></p><blockquote><p>时间限制：C/C++语言 3秒；其他语言 6秒<br>内存限制：C/C++语言 32768KB；其他语言 65536KB</p></blockquote><div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="false"data-rel="JAVA"><figure class="iseeu highlight /java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.util.*;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Main</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        Scanner in = <span class="keyword">new</span> Scanner(System.in);</span><br><span class="line">        <span class="keyword">int</span> t = in.nextInt();</span><br><span class="line">        Long num[] = <span class="keyword">new</span> Long[t];</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; t; i++) &#123;</span><br><span class="line">            num[i] = in.nextLong();</span><br><span class="line">            find(num[i]);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">static</span> <span class="keyword">void</span> <span class="title">find</span><span class="params">(Long num)</span> </span>&#123;</span><br><span class="line">        Long x = <span class="number">1L</span>, y = <span class="number">2L</span>;</span><br><span class="line">        <span class="keyword">boolean</span> NONE = <span class="keyword">true</span>;</span><br><span class="line">        <span class="keyword">if</span> (num % <span class="number">2</span> == <span class="number">0</span>) &#123;</span><br><span class="line">            <span class="keyword">for</span> (Long k = <span class="number">1L</span>; k &lt; num / <span class="number">4</span>; k++) &#123;</span><br><span class="line">                y = <span class="number">2</span> * k;</span><br><span class="line">                x = num / y;</span><br><span class="line">                <span class="keyword">if</span> (num % y == <span class="number">0</span> &amp;&amp; x % <span class="number">2</span> == <span class="number">1</span>) &#123;</span><br><span class="line">                    NONE = <span class="keyword">false</span>;</span><br><span class="line">                    <span class="keyword">break</span>;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        System.out.println(NONE ? <span class="string">"No"</span> : x + <span class="string">" "</span> + y);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div><h1 id="括号匹配"><a href="#括号匹配" class="headerlink" title="括号匹配"></a>括号匹配</h1><p><strong>题目描述：</strong><br>&emsp;&emsp;如果一个括号序列中的每一个左括号都有一个右括号与之完成配对，这个序列就是一个合法的括号匹配序列。例如$((()))$，$()()()$是合法的括号匹配序列。而$(((())$，$()((()$不是。牛牛得到了一系列的括号序列，他要从这个序列中任意选取两个位置进行一次交换操作（必须进行且仅一次），牛牛想知道能否通过这次操作，把这个序列变为合法括号匹配序列。例如序列$())($，对第三个位置和第四个位置进行交换，就能变成一个合法序列。</p><p><strong>输入描述</strong><br>输入的第一行包括测试样例数 $t (1 \leq  t \leq 1000)$，接下来的 $t$ 行，每行一个括号序列 $s (1 \leq length(s) \leq 100000)$，表示每个括号序列。</p><p><strong>输出描述</strong><br>如果可以通过一次交换操作变换为合法括号匹配序列，则输出 $Yes$ ，否则输出 $No$ 。</p><p><strong>样例输入</strong><br><div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="false"data-rel="PLAIN"><figure class="iseeu highlight /plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">2</span><br><span class="line">())(</span><br><span class="line">)))(((</span><br></pre></td></tr></table></figure></div></p><p><strong>样例输出</strong><br><div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="false"data-rel="PLAIN"><figure class="iseeu highlight /plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">Yes</span><br><span class="line">No</span><br></pre></td></tr></table></figure></div></p><blockquote><p>时间限制：C/C++语言 2秒；其他语言 4秒<br>内存限制：C/C++语言 32768KB；其他语言 65536KB</p></blockquote><div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="false"data-rel="JAVA"><figure class="iseeu highlight /java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//(70%)</span></span><br><span class="line"><span class="keyword">import</span> java.util.*;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Main</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        Scanner in = <span class="keyword">new</span> Scanner(System.in);</span><br><span class="line">        <span class="keyword">int</span> t = Integer.parseInt(in.nextLine());</span><br><span class="line">        String[] s = <span class="keyword">new</span> String[t];</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; t; i++) &#123;</span><br><span class="line">            s[i] = in.nextLine();</span><br><span class="line">            judge(s[i]);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">static</span> <span class="keyword">void</span> <span class="title">judge</span><span class="params">(String s)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">boolean</span> flag = <span class="keyword">true</span>;</span><br><span class="line">        <span class="keyword">int</span> error = <span class="number">0</span>;</span><br><span class="line">        Stack stack = <span class="keyword">new</span> Stack();</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; s.trim().length(); i++) &#123;</span><br><span class="line">            <span class="keyword">if</span> (s.trim().substring(i, i + <span class="number">1</span>).equals(<span class="string">"("</span>)) &#123;</span><br><span class="line">                stack.push(<span class="string">"("</span>);</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                <span class="keyword">if</span> (error == <span class="number">1</span>) &#123;</span><br><span class="line">                    flag = <span class="keyword">false</span>;</span><br><span class="line">                    <span class="keyword">break</span>;</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">if</span> (stack.empty()) &#123;</span><br><span class="line">                    error++;</span><br><span class="line">                &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                    stack.pop();</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (flag) &#123;</span><br><span class="line">            <span class="keyword">if</span> (error == <span class="number">1</span>) &#123;</span><br><span class="line">                stack.pop();</span><br><span class="line">                <span class="keyword">if</span> (!stack.empty()) &#123;</span><br><span class="line">                    flag = <span class="keyword">false</span>;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                <span class="keyword">if</span> (!stack.empty()) &#123;</span><br><span class="line">                    flag = <span class="keyword">false</span>;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        System.out.println(flag ? <span class="string">"Yes"</span> : <span class="string">"No"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>]]></content>
      
      
      <categories>
          
          <category> 笔经面经 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Java </tag>
            
            <tag> 校招 </tag>
            
            <tag> 京东 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>携程校招笔试</title>
      <link href="/2018/03/29/%E6%90%BA%E7%A8%8B%E6%A0%A1%E6%8B%9B%E7%AC%94%E8%AF%95/"/>
      <url>/2018/03/29/%E6%90%BA%E7%A8%8B%E6%A0%A1%E6%8B%9B%E7%AC%94%E8%AF%95/</url>
      
        <content type="html"><![CDATA[<blockquote><p>2018年3月29日19:00–20:30，参与了携程旅行春招在线考试，第一部分20道选择题，第二部分3道编程题。现将编程题记录如下：</p></blockquote><a id="more"></a><h1 id="移动数组中的“0”"><a href="#移动数组中的“0”" class="headerlink" title="移动数组中的“0”"></a>移动数组中的“0”</h1><p><strong>题目描述：</strong><br>&emsp;&emsp;给定一个整型数组，将数组中所有的“0”移动到末尾，非“0”项保持顺序不变，<strong><em>在原始数组上进行移动操作，勿创建新的数组</em></strong>。</p><p><strong>输入</strong><br>第一行是数组长度<br>后续每一行是数组的一条记录</p><p><strong>输出</strong><br>调整后的数组内容</p><p><strong>样例输入</strong><br><div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="false"data-rel="PLAIN"><figure class="iseeu highlight /plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">4</span><br><span class="line">0</span><br><span class="line">7</span><br><span class="line">0</span><br><span class="line">2</span><br></pre></td></tr></table></figure></div></p><p><strong>样例输出</strong><br><div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="false"data-rel="PLAIN"><figure class="iseeu highlight /plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">7</span><br><span class="line">2</span><br><span class="line">0</span><br><span class="line">0</span><br></pre></td></tr></table></figure></div></p><blockquote><p>时间限制：C/C++语言 1000MS；其他语言 3000MS<br>内存限制：C/C++语言 65536KB；其他语言 589824KB</p></blockquote><div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="false"data-rel="JAVA"><figure class="iseeu highlight /java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.util.Scanner;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Main</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        Scanner scanner = <span class="keyword">new</span> Scanner(System.in);</span><br><span class="line">        <span class="keyword">int</span> n = scanner.nextInt();</span><br><span class="line">        <span class="keyword">int</span> zero = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">int</span> arr[] = <span class="keyword">new</span> <span class="keyword">int</span>[n];</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>, j = <span class="number">0</span>; i &lt; n; i++) &#123;</span><br><span class="line">            <span class="keyword">int</span> scan = scanner.nextInt();</span><br><span class="line">            <span class="keyword">if</span> (scan == <span class="number">0</span>) &#123;</span><br><span class="line">                zero++;</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                arr[j++] = scan;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        scanner.close();</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> j = zero; j &gt; <span class="number">0</span>; j--) &#123;</span><br><span class="line">            arr[n - j] = <span class="number">0</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> k = <span class="number">0</span>; k &lt; n; k++) &#123;</span><br><span class="line">            System.out.println(arr[k]);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div><h1 id="二维矩阵旋转"><a href="#二维矩阵旋转" class="headerlink" title="二维矩阵旋转"></a>二维矩阵旋转</h1><p><strong>题目描述：</strong><br>&emsp;&emsp;给一个$N*N$的二维矩阵，将该矩阵顺时针旋转90度。</p><p><strong>输入</strong><br>输入一个$N*N$二维矩阵</p><p><strong>输出</strong><br>将输入的二维矩阵顺时针旋转90度</p><p><strong>样例输入</strong><br>$$<br>\begin{bmatrix}<br>1 &amp; 4 &amp; 7 \\<br>2 &amp; 5 &amp; 8 \\<br>3 &amp; 6 &amp; 9 \<br>\end{bmatrix}<br>$$</p><p><strong>样例输出</strong><br>$$<br>\begin{bmatrix}<br>3 &amp; 2 &amp; 1 \\<br>6 &amp; 5 &amp; 4 \\<br>9 &amp; 8 &amp; 7 \<br>\end{bmatrix}<br>$$</p><blockquote><p>时间限制：C/C++语言 1000MS；其他语言 3000MS<br>内存限制：C/C++语言 65536KB；其他语言 589824KB</p></blockquote><div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="false"data-rel="JAVA"><figure class="iseeu highlight /java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.util.HashMap;</span><br><span class="line"><span class="keyword">import</span> java.util.Map;</span><br><span class="line"><span class="keyword">import</span> java.util.Scanner;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Main</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String args[])</span> </span>&#123;</span><br><span class="line">        Scanner scanner = <span class="keyword">new</span> Scanner(System.in);</span><br><span class="line">        Map&lt;Integer, String&gt; map = <span class="keyword">new</span> HashMap&lt;&gt;();</span><br><span class="line">        <span class="keyword">int</span> N = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">while</span> (scanner.hasNext()) &#123;</span><br><span class="line">            map.put(N++, scanner.next());</span><br><span class="line">        &#125;</span><br><span class="line">        scanner.close();</span><br><span class="line"></span><br><span class="line">        <span class="keyword">int</span> n = (<span class="keyword">int</span>) Math.sqrt(N);</span><br><span class="line">        String num[][] = <span class="keyword">new</span> String[n][n];</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; n; i++) &#123;</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; n; j++) &#123;</span><br><span class="line">                num[i][j] = map.get(i * n + j);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> p = <span class="number">0</span>; p &lt; n; p++) &#123;</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> q = n - <span class="number">1</span>; q &gt;= <span class="number">0</span>; q--) &#123;</span><br><span class="line">                System.out.print(num[q][p]);</span><br><span class="line">                System.out.print(<span class="string">"\t"</span>);</span><br><span class="line">            &#125;</span><br><span class="line">            System.out.print(<span class="string">"\n"</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div><h1 id="搜索符合用户需求且价格最低的房型"><a href="#搜索符合用户需求且价格最低的房型" class="headerlink" title="搜索符合用户需求且价格最低的房型"></a>搜索符合用户需求且价格最低的房型</h1><p><strong>题目描述：</strong><br>&emsp;&emsp;有N种房型，每种房型有如下属性：可入住成人数，可入住儿童数，价格；根据用户输入的X(需入住成人数)，Y(需入住儿童数)，Z(需入住几晚)，返回N种房型的间数及价格。<br>输出样例(特别说明)：</p><p><img src="https://raw.githubusercontent.com/chung567115/chung567115.github.io/hexo-blog/blog-img/14-1.png" alt="说明图"></p><p><strong>输入</strong><br>第一行表示一共有几种房型，设为整型N；<br>接下来的N行，每行三列分别表示每种房型能够容纳的成人数、能够容纳的儿童数、单价；<br>最后一行的三列分别表示需要入住的成人数、儿童数，几晚。</p><p><strong>输出</strong><br>打出房型输入的顺序号，顺序号&gt;0，表示选择了此房型数量；<br>顺序号为0表示未选择此房型，最后一列为总价格。</p><p><strong>样例输入</strong><br><div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="false"data-rel="PLAIN"><figure class="iseeu highlight /plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">2</span><br><span class="line">2 2 100</span><br><span class="line">4 3 180</span><br><span class="line">3 2 1</span><br></pre></td></tr></table></figure></div></p><p><strong>样例输出</strong><br>正常输出：<br><div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="false"data-rel="PLAIN"><figure class="iseeu highlight /plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">0,1,180.0</span><br></pre></td></tr></table></figure></div></p><p>异常输出：<br><div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="false"data-rel="PLAIN"><figure class="iseeu highlight /plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">-1</span><br></pre></td></tr></table></figure></div></p><blockquote><p>时间限制：C/C++语言 1000MS；其他语言 3000MS<br>内存限制：C/C++语言 65536KB；其他语言 589824KB</p></blockquote><p>（没有做……有兴趣的朋友可以贴出代码）</p>]]></content>
      
      
      <categories>
          
          <category> 笔经面经 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Java </tag>
            
            <tag> 校招 </tag>
            
            <tag> 携程 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>美团校招笔试</title>
      <link href="/2018/03/22/%E7%BE%8E%E5%9B%A2%E6%A0%A1%E6%8B%9B%E7%AC%94%E8%AF%95/"/>
      <url>/2018/03/22/%E7%BE%8E%E5%9B%A2%E6%A0%A1%E6%8B%9B%E7%AC%94%E8%AF%95/</url>
      
        <content type="html"><![CDATA[<blockquote><p>2018年3月22日19:00–21:20，参与了美团点评春招在线考试，前两部分的智力题和基础题均为选择题，共40分。两道编程题每题30分，共60分。现将编程题记录如下：</p></blockquote><a id="more"></a><h1 id="字符串距离"><a href="#字符串距离" class="headerlink" title="字符串距离"></a>字符串距离</h1><p><strong>题目描述</strong><br>&emsp;&emsp;给出两个相同长度的由字符 $a$ 和 $b$ 构成的字符串，定义它们的距离为对应位置不同的字符的数量。如串 $aab$与 串 $aba$ 的距离为 2；串 $ba$ 与串 $aa$ 的距离为 1；串 $baa$ 和串 $baa$ 的距离为 0。<br>&emsp;&emsp;下面给出两个字符串 $S$ 与 $T$，其中 $S$ 的长度不小于 $T$ 的长度。我们用 $|S|$ 代表 $S$ 的长度，$|T|$ 代表 $T$ 的长度，那么在 $S$ 中一共有 $|S|-|T|+1$ 个与 $T$ 长度相同的子串，现在你需要计算 $T$ 串与这些 $|S|-|T|+1$ 个子串的距离的和。<br>&emsp;&emsp;假设 $S$ 与 $T$ 只包含 $a$ 和 $b$ ，且 $1 \leq |T| \leq  |S| \leq 2^{25}$ 。</p><p><em>输入</em><br><div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="false"data-rel="PLAIN"><figure class="iseeu highlight /plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">abbba</span><br><span class="line">ab</span><br></pre></td></tr></table></figure></div></p><p><em>输出</em><br><div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="false"data-rel="PLAIN"><figure class="iseeu highlight /plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">4</span><br></pre></td></tr></table></figure></div></p><blockquote><p>时间限制：C/C++语言 2000MS；其他语言 4000MS<br>内存限制：C/C++语言 65536KB；其他语言 589824KB</p></blockquote><div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="false"data-rel="JAVA"><figure class="iseeu highlight /java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.util.Scanner;    </span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Main</span></span>&#123;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">int</span> <span class="title">getDistance</span><span class="params">(String S, String T, <span class="keyword">int</span> len)</span> </span>&#123;</span><br><span class="line"><span class="keyword">int</span> distant = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; len; i++) &#123;</span><br><span class="line"><span class="keyword">if</span> (S.charAt(i) != T.charAt(i)) &#123;</span><br><span class="line">distant += <span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> distant;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">Scanner scanner = <span class="keyword">new</span> Scanner(System.in);</span><br><span class="line">String S = scanner.nextLine();</span><br><span class="line">String T = scanner.nextLine();</span><br><span class="line">scanner.close();</span><br><span class="line"><span class="keyword">int</span> DISTANT = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">int</span> sLen = S.length();</span><br><span class="line"><span class="keyword">int</span> tLen = T.length();</span><br><span class="line"><span class="keyword">int</span> n = sLen - tLen + <span class="number">1</span>;</span><br><span class="line"><span class="keyword">if</span> (sLen == <span class="number">1</span>) &#123;</span><br><span class="line">DISTANT = S.equals(T) ? <span class="number">0</span> : <span class="number">1</span>;</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line"><span class="keyword">if</span> (sLen == tLen) &#123;</span><br><span class="line">DISTANT = getDistance(S, T, tLen);</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; n; i++) &#123;</span><br><span class="line">DISTANT += getDistance(S.substring(i, i + tLen), T, tLen);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">System.out.println(DISTANT);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div><h1 id="数字字符"><a href="#数字字符" class="headerlink" title="数字字符"></a>数字字符</h1><p><strong>题目描述</strong><br>&emsp;&emsp;在十进制表示中，任意一个正整数都可以用字符‘0’-‘9’表示出来。但是当‘0’-‘9’这些字符每种字符的数量有限时，可能有些正整数就无法表示出来了。比如你有两个‘1’ ，一个‘2’ ，那么你能表示出 11，12，121 等等，但是无法表示出 10，122，200 等数。<br>&emsp;&emsp;现在你手上拥有一些字符，它们都是‘0’-‘9’的字符。你可以选出其中一些字符然后将它们组合成一个数字，那么你所无法组成的最小的正整数是多少？</p><p><em>输入</em><br><div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="false"data-rel="PLAIN"><figure class="iseeu highlight /plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">55</span><br></pre></td></tr></table></figure></div></p><p><em>输出</em><br><div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="false"data-rel="PLAIN"><figure class="iseeu highlight /plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">1</span><br></pre></td></tr></table></figure></div></p><blockquote><p>时间限制：C/C++语言 2000MS；其他语言 4000MS<br>内存限制：C/C++语言 65536KB；其他语言 589824KB</p></blockquote><p>（只有20%通过率）<br><div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="false"data-rel="JAVA"><figure class="iseeu highlight /java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.util.Scanner;</span><br><span class="line"><span class="keyword">import</span> java.util.HashMap;</span><br><span class="line"><span class="keyword">import</span> java.util.Map;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Main</span> </span>&#123;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">Scanner scanner = <span class="keyword">new</span> Scanner(System.in);</span><br><span class="line">String NUMS = scanner.nextLine();</span><br><span class="line">scanner.close();</span><br><span class="line">Map map = <span class="keyword">new</span> HashMap&lt;String, Integer&gt;();</span><br><span class="line"><span class="keyword">int</span> result = <span class="number">1</span>;</span><br><span class="line"><span class="keyword">int</span> n = NUMS.length();</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; n; i++) &#123;</span><br><span class="line">String str = NUMS.substring(i, i + <span class="number">1</span>);</span><br><span class="line"><span class="keyword">if</span> (map.containsKey(str)) &#123;</span><br><span class="line">map.put(str, (Integer) map.get(str) + <span class="number">1</span>);</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">map.put(str, <span class="number">1</span>);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">1</span>; j &lt; Math.pow(<span class="number">10</span>, n + <span class="number">1</span>); j++) &#123;</span><br><span class="line">String jStr = String.valueOf(j);</span><br><span class="line"><span class="keyword">if</span> (!map.containsKey(jStr) || ((Integer) map.get(jStr)) == <span class="number">0</span>) &#123;</span><br><span class="line">result = j;</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line"><span class="keyword">int</span> c = (Integer) map.get(jStr);</span><br><span class="line">map.put(jStr, c - <span class="number">1</span>);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">System.out.println(result);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div></p>]]></content>
      
      
      <categories>
          
          <category> 笔经面经 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Java </tag>
            
            <tag> 校招 </tag>
            
            <tag> 美团 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>注解@Resource和@Autowire的区别</title>
      <link href="/2018/03/08/%E6%B3%A8%E8%A7%A3@Resource%E5%92%8C@Autowire%E7%9A%84%E5%8C%BA%E5%88%AB/"/>
      <url>/2018/03/08/%E6%B3%A8%E8%A7%A3@Resource%E5%92%8C@Autowire%E7%9A%84%E5%8C%BA%E5%88%AB/</url>
      
        <content type="html"><![CDATA[<blockquote><p>平时在项目中用@Resource和@Autowired都能达到自动注入的效果，可是他们有什么不同呢？</p></blockquote><a id="more"></a><ul><li><code>@Resource</code>和<code>@Autowired</code>都可以用来装配bean，都可以用于字段或setter方法。</li><li><code>@Autowired</code>默认<strong>按类型</strong>装配，默认情况下必须要求依赖对象必须存在，如果要允许null值，可以设置它的required属性为false。</li><li><code>@Resource</code>默认<strong>按名称</strong>装配，当找不到与名称匹配的bean时才按照类型进行装配。名称可以通过name属性指定，如果没有指定name属性，当注解写在字段上时，默认取字段名，当注解写在setter方法上时，默认取属性名进行装配。<blockquote><p>注意：如果name属性一旦指定，就只会按照名称进行装配。</p></blockquote></li></ul><ul><li><p><code>@Autowire</code>和<code>@Qualifier</code>配合使用效果和<code>@Resource</code>一样：</p><div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="false"data-rel="JAVA"><figure class="iseeu highlight /java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Autowired</span>(required = <span class="keyword">false</span>) <span class="meta">@Qualifier</span>(<span class="string">"example"</span>)</span><br><span class="line"><span class="keyword">private</span> Example example;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Resource</span>(name = <span class="string">"example"</span>)</span><br><span class="line"><span class="keyword">private</span> Example example;</span><br></pre></td></tr></table></figure></div></li><li><p><code>@Resource</code>装配顺序</p><ol><li>如果同时指定name和type，则从容器中查找唯一匹配的bean装配，找不到则抛出异常</li><li>如果指定name属性，则从容器中查找名称匹配的bean装配，找不到则抛出异常</li><li>如果指定type属性，则从容器中查找类型唯一匹配的bean装配，找不到或者找到多个抛出异常</li><li>如果都不指定，则自动按照byName方式装配，如果没有匹配，则回退一个原始类型进行匹配，如果匹配则自动装配</li></ol></li></ul><h1 id="简要对比表格"><a href="#简要对比表格" class="headerlink" title="简要对比表格"></a>简要对比表格</h1><table><thead><tr><th style="text-align:center">注解对比</th><th style="text-align:center"><code>@Resource</code></th><th style="text-align:center"><code>@Autowire</code></th></tr></thead><tbody><tr><td style="text-align:center">注解来源</td><td style="text-align:center">JDK</td><td style="text-align:center">Spring</td></tr><tr><td style="text-align:center">装配方式</td><td style="text-align:center">优先按名称</td><td style="text-align:center">优先按类型</td></tr><tr><td style="text-align:center">属性</td><td style="text-align:center">name、type</td><td style="text-align:center">required</td></tr></tbody></table>]]></content>
      
      
      <categories>
          
          <category> Java </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Java </tag>
            
            <tag> Spring Boot </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Spring Boot application starters罗列</title>
      <link href="/2018/02/01/Spring%20Boot%20application%20starters%E7%BD%97%E5%88%97/"/>
      <url>/2018/02/01/Spring%20Boot%20application%20starters%E7%BD%97%E5%88%97/</url>
      
        <content type="html"><![CDATA[<blockquote><p>Spring Boot确实方便，但是各式各样的starter真的是眼花缭乱…</p></blockquote><a id="more"></a><p><a href="https://docs.spring.io/spring-boot/docs/current-SNAPSHOT/reference/htmlsingle/#using-boot-starter" target="_blank" rel="noopener">官网原文链接</a></p><table><thead><tr><th style="text-align:center">Name</th><th style="text-align:center">Description    </th></tr></thead><tbody><tr><td style="text-align:center"> spring-boot-starter</td><td style="text-align:center">Core starter, including auto-configuration support, logging and YAML</td></tr><tr><td style="text-align:center"> spring-boot-starter-activemq</td><td style="text-align:center">Starter for JMS messaging using Apache ActiveMQ</td></tr><tr><td style="text-align:center"> spring-boot-starter-amqp</td><td style="text-align:center">Starter for using Spring AMQP and Rabbit MQ</td></tr><tr><td style="text-align:center"> spring-boot-starter-aop</td><td style="text-align:center">Starter for aspect-oriented programming with Spring AOP and AspectJ</td></tr><tr><td style="text-align:center"> spring-boot-starter-artemis</td><td style="text-align:center">Starter for JMS messaging using Apache Artemis</td></tr><tr><td style="text-align:center"> spring-boot-starter-batch</td><td style="text-align:center">Starter for using Spring Batch</td></tr><tr><td style="text-align:center"> spring-boot-starter-cache</td><td style="text-align:center">Starter for using Spring Framework’s caching support</td></tr><tr><td style="text-align:center"> spring-boot-starter-cloud-connectors</td><td style="text-align:center">Starter for using Spring Cloud Connectors which simplifies connecting to services in cloud platforms like Cloud Foundry and Heroku</td></tr><tr><td style="text-align:center"> spring-boot-starter-data-cassandra</td><td style="text-align:center">Starter for using Cassandra distributed database and Spring Data Cassandra</td></tr><tr><td style="text-align:center"> spring-boot-starter-data-cassandra-reactive</td><td style="text-align:center">Starter for using Cassandra distributed database and Spring Data Cassandra Reactive</td></tr><tr><td style="text-align:center"> spring-boot-starter-data-couchbase</td><td style="text-align:center">Starter for using Couchbase document-oriented database and Spring Data Couchbase</td></tr><tr><td style="text-align:center"> spring-boot-starter-data-couchbase-reactive</td><td style="text-align:center">Starter for using Couchbase document-oriented database and Spring Data Couchbase Reactive</td></tr><tr><td style="text-align:center"> spring-boot-starter-data-elasticsearch</td><td style="text-align:center">Starter for using Elasticsearch search and analytics engine and Spring Data Elasticsearch</td></tr><tr><td style="text-align:center"> spring-boot-starter-data-jpa</td><td style="text-align:center">Starter for using Spring Data JPA with Hibernate</td></tr><tr><td style="text-align:center"> spring-boot-starter-data-ldap</td><td style="text-align:center">Starter for using Spring Data LDAP</td></tr><tr><td style="text-align:center"> spring-boot-starter-data-mongodb</td><td style="text-align:center">Starter for using MongoDB document-oriented database and Spring Data MongoDB</td></tr><tr><td style="text-align:center"> spring-boot-starter-data-mongodb-reactive</td><td style="text-align:center">Starter for using MongoDB document-oriented database and Spring Data MongoDB Reactive</td></tr><tr><td style="text-align:center"> spring-boot-starter-data-neo4j</td><td style="text-align:center">Starter for using Neo4j graph database and Spring Data Neo4j</td></tr><tr><td style="text-align:center"> spring-boot-starter-data-redis</td><td style="text-align:center">Starter for using Redis key-value data store with Spring Data Redis and the Lettuce client</td></tr><tr><td style="text-align:center"> spring-boot-starter-data-redis-reactive</td><td style="text-align:center">Starter for using Redis key-value data store with Spring Data Redis reactive and the Lettuce client</td></tr><tr><td style="text-align:center"> spring-boot-starter-data-rest</td><td style="text-align:center">Starter for exposing Spring Data repositories over REST using Spring Data REST</td></tr><tr><td style="text-align:center"> spring-boot-starter-data-solr</td><td style="text-align:center">Starter for using the Apache Solr search platform with Spring Data Solr</td></tr><tr><td style="text-align:center"> spring-boot-starter-freemarker</td><td style="text-align:center">Starter for building MVC web applications using FreeMarker views</td></tr><tr><td style="text-align:center"> spring-boot-starter-groovy-templates</td><td style="text-align:center">Starter for building MVC web applications using Groovy Templates views</td></tr><tr><td style="text-align:center"> spring-boot-starter-hateoas</td><td style="text-align:center">Starter for building hypermedia-based RESTful web application with Spring MVC and Spring HATEOAS</td></tr><tr><td style="text-align:center"> spring-boot-starter-integration</td><td style="text-align:center">Starter for using Spring Integration</td></tr><tr><td style="text-align:center"> spring-boot-starter-jdbc</td><td style="text-align:center">Starter for using JDBC with the Tomcat JDBC connection pool</td></tr><tr><td style="text-align:center"> spring-boot-starter-jersey</td><td style="text-align:center">Starter for building RESTful web applications using JAX-RS and Jersey. An alternative to spring-boot-starter-web</td></tr><tr><td style="text-align:center"> spring-boot-starter-jooq</td><td style="text-align:center">Starter for using jOOQ to access SQL databases. An alternative to spring-boot-starter-data-jpa or </td></tr><tr><td style="text-align:center"> spring-boot-starter-json</td><td style="text-align:center">Starter for reading and writing json</td></tr><tr><td style="text-align:center"> spring-boot-starter-jta-atomikos</td><td style="text-align:center">Starter for JTA transactions using Atomikos</td></tr><tr><td style="text-align:center"> spring-boot-starter-jta-bitronix</td><td style="text-align:center">Starter for JTA transactions using Bitronix</td></tr><tr><td style="text-align:center"> spring-boot-starter-jta-narayana</td><td style="text-align:center">Spring Boot Narayana JTA Starter</td></tr><tr><td style="text-align:center"> spring-boot-starter-mail</td><td style="text-align:center">Starter for using Java Mail and Spring Framework’s email sending support</td></tr><tr><td style="text-align:center"> spring-boot-starter-mustache</td><td style="text-align:center">Starter for building web applications using Mustache views</td></tr><tr><td style="text-align:center"> spring-boot-starter-quartz</td><td style="text-align:center">Spring Boot Quartz Starter</td></tr><tr><td style="text-align:center"> spring-boot-starter-security</td><td style="text-align:center">Starter for using Spring Security</td></tr><tr><td style="text-align:center"> spring-boot-starter-test</td><td style="text-align:center">Starter for testing Spring Boot applications with libraries including JUnit, Hamcrest and Mockito</td></tr><tr><td style="text-align:center"> spring-boot-starter-thymeleaf</td><td style="text-align:center">Starter for building MVC web applications using Thymeleaf views</td></tr><tr><td style="text-align:center"> spring-boot-starter-validation</td><td style="text-align:center">Starter for using Java Bean Validation with Hibernate Validator</td></tr><tr><td style="text-align:center"> spring-boot-starter-web</td><td style="text-align:center">Starter for building web, including RESTful, applications using Spring MVC. Uses Tomcat as the default embedded container</td></tr><tr><td style="text-align:center"> spring-boot-starter-web-services</td><td style="text-align:center">Starter for using Spring Web Services</td></tr><tr><td style="text-align:center"> spring-boot-starter-webflux</td><td style="text-align:center">Starter for building WebFlux applications using Spring Framework’s Reactive Web support</td></tr><tr><td style="text-align:center"> spring-boot-starter-websocket</td><td style="text-align:center">Starter for building WebSocket applications using Spring Framework’s WebSocket support</td></tr></tbody></table>]]></content>
      
      
      <categories>
          
          <category> Spring Boot </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Java </tag>
            
            <tag> Spring Boot </tag>
            
            <tag> 微服务 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>【置顶】Spring Boot快速入门</title>
      <link href="/2018/01/14/Spring%20Boot%E5%BF%AB%E9%80%9F%E5%85%A5%E9%97%A8/"/>
      <url>/2018/01/14/Spring%20Boot%E5%BF%AB%E9%80%9F%E5%85%A5%E9%97%A8/</url>
      
        <content type="html"><![CDATA[<blockquote><p>相信小伙伴们在使用Spring或SpringMVC的过程中，或多或少会被各种配置问题所牵绊，这些配置不仅徒增工作量，而且在跨平台部署时容易出现问题。因此，Spring Boot应运而生，它集成了大量常用的第三方库配置（例如Jackson、JDBC、MongoDB、Redis、Mail等等），这些第三方库几乎都可以零配置的开箱即用，可以帮助我们快速搭建一个项目，从而让开发者能够更加专注于业务逻辑。</p></blockquote><a id="more"></a><p>&emsp;&emsp;Spring Boot的优点及特性，就不再逐一罗列了，本场Chat针对Spring Boot的初学者，让我们先快速学会怎么用，至于更深入的探讨，留待后续Chat进行。</p><h1 id="版本列表"><a href="#版本列表" class="headerlink" title="版本列表"></a>版本列表</h1><table><thead><tr><th style="text-align:center">名称</th><th style="text-align:center">版本</th><th style="text-align:center">备注         </th></tr></thead><tbody><tr><td style="text-align:center"> Spring Boot</td><td style="text-align:center">1.5.9</td><td style="text-align:center"></td></tr><tr><td style="text-align:center"> JDK</td><td style="text-align:center">1.8.0</td><td style="text-align:center"></td></tr><tr><td style="text-align:center"> MySQL</td><td style="text-align:center">5.7.15</td><td style="text-align:center"></td></tr><tr><td style="text-align:center"> IDEA Ultimate</td><td style="text-align:center">2017.2</td><td style="text-align:center">不能用社区版        </td></tr><tr><td style="text-align:center"> Maven</td><td style="text-align:center">3.5.2</td><td style="text-align:center">可用阿里仓库提速        </td></tr></tbody></table><h1 id="快速构建项目"><a href="#快速构建项目" class="headerlink" title="快速构建项目"></a>快速构建项目</h1><p>&emsp;&emsp;关于Spring Boot项目的构建，IDEA为我们提供了良好的支持，在IDEA中New–&gt;Project–&gt;Spring Initializr–&gt;Next–&gt;Next(可自己填写相关信息)–&gt;选中Web栏目的Web依赖–&gt;Next–&gt;Finish(可自己填写相关信息)，一个简单Spring Boot项目搭建好了。没错不用惊讶，搭好了。接下来我们看看IDEA自动生成目录结构（以读者填写的具体信息为准）。</p><ul><li>main<ul><li>java<ul><li>xin.chung.springboot<ul><li>SpringbootApplication.java(项目入口文件)</li></ul></li></ul></li><li>resources<ul><li>static（静态资源包）</li><li>templates（页面模板包）</li><li>application.properties（项目属性配置文件）</li></ul></li></ul></li><li>test<ul><li>java<ul><li>xin.chung.springboot<ul><li>SpringbootApplicationTests.java（测试文件）</li></ul></li></ul></li></ul></li></ul><p>&emsp;&emsp;IDEA自动为我们生成了几个文件，其中application.properties文件为项目属性配置文件，一般包含服务器、数据库、日志等方面的配置，以及一些自定义的属性。SpringbootApplicationTests.java是JUnit测试类，用来进行开发过程中的单元测试。这两类文件，留待后面详细介绍。而至于这个SpringbootApplication.java文件，它其实是项目的入口文件，内容也非常简单，如下：</p><div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="false"data-rel="JAVA"><figure class="iseeu highlight /java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@SpringBootApplication</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SpringbootApplication</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        SpringApplication.run(SpringbootApplication.class, args);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div><p>&emsp;&emsp;当我们运行这个类或主方法时，框架就会自动为我们开启服务。若见日志打印如下，说明启动成功，从日志可以看到，我们的Tomcat 8080端口已经准备就绪。</p><div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="false"data-rel="VIM"><figure class="iseeu highlight /vim"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">  .   ____          _            __ _ _</span><br><span class="line"> /\\ / ___<span class="string">'_ __ _ _(_)_ __  __ _ \ \ \ \</span></span><br><span class="line"><span class="string">( ( )\___ | '</span>_ | <span class="string">'_| | '</span>_ \/ _` | \ \ \ \</span><br><span class="line"> \\/  ___)| |_)| | | | | || (_| |  ) ) ) )</span><br><span class="line">  <span class="string">'  |____| .__|_| |_|_| |_\__, | / / / /</span></span><br><span class="line"><span class="string"> =========|_|==============|___/=/_/_/_/</span></span><br><span class="line"><span class="string"> :: Spring Boot ::        (v1.5.9.RELEASE)</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">······</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">Tomcat started on port(s): 8080 (http)</span></span><br><span class="line"><span class="string">Started SpringbootApplication in 4.694 seconds (JVM running for 7.789)</span></span><br></pre></td></tr></table></figure></div><blockquote><p>关于项目构建途径或项目启动的其他方式，大家可在读者圈一起交流。</p></blockquote><h1 id="项目属性配置"><a href="#项目属性配置" class="headerlink" title="项目属性配置"></a>项目属性配置</h1><h2 id="单元测试"><a href="#单元测试" class="headerlink" title="单元测试"></a>单元测试</h2><p>&emsp;&emsp;在后续话题开始之前，我们有必要先探讨下单元测试。以往我们写一段测试代码，有一个前置步骤：用<code>ClassPathXmlApplicationContext</code>装载上下文，然后用<code>ApplicationContext</code>对象获取Bean实例。接下来，才能进行我们的测试代码编写。<br>&emsp;&emsp;而在Spring Boot中，极大简化了测试代码，它为我们提供了<code>@RunWith</code>注解和<code>@SpringBootTest</code>注解分别用来指定测试运行类和运行Spring Boot基础测试环境。此时，你可以直接使用<code>@Resource</code>或<code>@Autowired</code>注入所需Bean并使用，示例如下：</p><div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="false"data-rel="JAVA"><figure class="iseeu highlight /java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@RunWith</span>(SpringRunner.class)</span><br><span class="line"><span class="meta">@SpringBootTest</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">PropertiesTests</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Resource</span></span><br><span class="line">    <span class="keyword">private</span> DemoService demoService;<span class="comment">//仅作展示，还未编写</span></span><br><span class="line"></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">test</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(demoService.getDemo().toString());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div><blockquote><p>由于单元测试贯穿本场Chat，所以每个章节都会在相应的地方讨论Spring Boot中JUnit的具体使用方法，此处只写出最简单的使用示例</p></blockquote><h2 id="属性配置"><a href="#属性配置" class="headerlink" title="属性配置"></a>属性配置</h2><p>&emsp;&emsp;在前面提到过的application.properties文件中，我们可以进行一些项目的配置，也可以自定义一些项目所需要的属性参数然后用<code>@Value</code>注解在Java文件中引用，例如：</p><div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="false"data-rel="PLAIN"><figure class="iseeu highlight /plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"># Server 服务相关</span><br><span class="line">server.port=8080</span><br><span class="line">server.context-path=/demo</span><br><span class="line"># Log 日志相关</span><br><span class="line">logging.path=/var/logs</span><br><span class="line">logging.file=demo.log</span><br><span class="line"># Other 自定义</span><br><span class="line">author=chung</span><br><span class="line">addr=http://gitbook.cn/gitchat/activity/5a444c451f6ee91a25846ac1</span><br></pre></td></tr></table></figure></div><p>&emsp;&emsp;我们可以编写如下测试代码，验证<code>.properties</code>文件中的值是否能被我们在Java文件中所使用，至于打印结果我就不贴出来了。</p><div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="false"data-rel="JAVA"><figure class="iseeu highlight /java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@RunWith</span>(SpringRunner.class)</span><br><span class="line"><span class="meta">@SpringBootTest</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">PropertiesTests</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Value</span>(<span class="string">"$&#123;author&#125;"</span>)</span><br><span class="line">    <span class="keyword">private</span> String author;</span><br><span class="line">    <span class="meta">@Value</span>(<span class="string">"$&#123;addr&#125;"</span>)</span><br><span class="line">    <span class="keyword">private</span> String addr;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">test</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"author:"</span> + author + <span class="string">"--addr:"</span> + addr);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div><p>&emsp;&emsp;实际上，我们也可以使用YAML作为项目的配置文件，这种语言更加简洁明了。以上<code>.properties</code>文件，可等价如下<code>.yml</code>文件（<strong>切记<code>:</code>后面的空格不能少，同时注意每行的缩进</strong>）：</p><div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="false"data-rel="YML"><figure class="iseeu highlight /yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># Server 服务相关</span></span><br><span class="line"><span class="attr">server:</span></span><br><span class="line"><span class="attr">  port:</span> <span class="number">8080</span></span><br><span class="line"><span class="attr">  context-path:</span> <span class="string">/demo</span></span><br><span class="line"><span class="comment"># Log 日志相关</span></span><br><span class="line"><span class="attr">logging:</span></span><br><span class="line"><span class="attr">  path:</span> <span class="string">/var/logs</span></span><br><span class="line"><span class="attr">  file:</span> <span class="string">demo.log</span></span><br><span class="line"><span class="comment"># Other 自定义</span></span><br><span class="line"><span class="attr">author:</span> <span class="string">chung</span></span><br><span class="line"><span class="attr">addr:</span> <span class="attr">http://gitbook.cn/gitchat/activity/5a444c451f6ee91a25846ac1</span></span><br></pre></td></tr></table></figure></div><p>&emsp;&emsp;但是以上两种写法都有同一个弊端：项目里面自定义配置项往往会有很多，频繁使用<code>@Value</code>注入将给项目的后期维护带来极大不便。这个时候，我们就可以建立一个属性对象，利用<code>@ConfigurationProperties</code>注解来绑定属性，有效简化繁杂的注入操作。例如：</p><div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="false"data-rel="YML"><figure class="iseeu highlight /yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># Other</span></span><br><span class="line"><span class="attr">gitchat:</span></span><br><span class="line"><span class="attr">  author:</span> <span class="string">chung</span></span><br><span class="line"><span class="attr">  addr:</span> <span class="attr">http://gitbook.cn/gitchat/activity/5a444c451f6ee91a25846ac1</span></span><br></pre></td></tr></table></figure></div><div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="false"data-rel="JAVA"><figure class="iseeu highlight /java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="comment">// prefix对应配置文件中的前缀</span></span><br><span class="line"><span class="meta">@ConfigurationProperties</span>(prefix = <span class="string">"gitchat"</span>)</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">GitChat</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> String author;</span><br><span class="line">    <span class="keyword">private</span> String addr;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/***省略Getter Setter***/</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div><p>&emsp;&emsp;同理，我们可以编写如下测试代码，验证这种属性对象的方式能否正常使用。</p><div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="false"data-rel="JAVA"><figure class="iseeu highlight /java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Resource</span></span><br><span class="line"><span class="keyword">private</span> GitChat gitChat;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">test</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    System.out.println(<span class="string">"author:"</span> + gitChat.getAuthor() + <span class="string">" addr:"</span> + gitChat.getAddr());</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div><p>&emsp;&emsp;可以看到，当属性越来越多，我们利用对象的方式优势也就越大，而至于<code>.properties</code>和<code>.yml</code>选哪种，就看个人喜好了。</p><h1 id="控制器基本用法"><a href="#控制器基本用法" class="headerlink" title="控制器基本用法"></a>控制器基本用法</h1><h2 id="关于Controller"><a href="#关于Controller" class="headerlink" title="关于Controller"></a>关于Controller</h2><p>&emsp;&emsp;讨论完了项目的属性配置，让我们探讨一下在Spring Boot中如何使用控制器。在Spring Boot Controller的编码中，我们常用到的注解如下：</p><ul><li>标注控制层组件的注解<code>@Controller</code>、<code>@RestController</code></li><li>配置URL映射的注解<code>@RequestMapping</code></li><li>获取参数的注解<code>@PathVariable</code>(URL中)、<code>@RequestParam</code>(HTTP请求中)</li><li>校验参数的注解<code>@Valid</code></li></ul><p>&emsp;&emsp;相信以上那些，大家或多或少有点熟悉，其实还有一些简洁的组合注解，这些注解在配合使用<code>RESTful API</code>时，会非常优雅非常有逼格：</p><ul><li><code>@GetMapping(&quot;&quot;)</code></li><li><code>@PostMapping(&quot;&quot;)</code></li><li><code>@PutMapping(&quot;&quot;)</code></li><li><code>@DeleteMapping(&quot;&quot;)</code></li></ul><p>&emsp;&emsp;而实际上，<code>XXXMapping(&quot;YYY&quot;)</code> 和 <code>@RequestMapping(value = &quot;YYY&quot;,method = RequestMethod.XXX)</code>没有区别，点进源码一切你就会恍然大悟。<br>&emsp;&emsp;看完这些注解，接下来我们瞧瞧怎么把它们用进控制器。先拿<code>@Controller</code>和<code>@RestController</code>来说，如果使用<code>@Controller</code>注解，表示控制器返回的是模板，而使用<code>@RestController</code>注解，则表示返回的可能是JSON或文本等等。<br>&emsp;&emsp;见如下代码，编写完成后启动项目，浏览器访问<a href="http://localhost:8080/demo/say" target="_blank" rel="noopener">http://localhost:8080/demo/say</a>，你会看到Hello World！，就是这么简单粗暴，什么Jackson配置之类的，让框架替你解决就好了。</p><div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="false"data-rel="JAVA"><figure class="iseeu highlight /java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@RestController</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">DemoController</span> </span>&#123;</span><br><span class="line">    <span class="meta">@RequestMapping</span>(<span class="string">"/say"</span>)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">sayHello</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">"Hello World!"</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div><blockquote><p><strong>注意</strong>：</p><ol><li>项目配置文件选择application.properties与application.yml之一即可(删掉其中一个)</li><li>若上一章中没有配置server.context-path=/demo或者context-path: /demo，则应访问<a href="http://localhost:8080/say" target="_blank" rel="noopener">http://localhost:8080/say</a></li><li>添加完依赖后，右键pom.xml–&gt;Maven–&gt;Reimport，重新导入</li></ol></blockquote><p>&emsp;&emsp;至于<code>@Controller</code>注解，我们常用来和模板引擎<code>Thymeleaf</code>一起使用，这里我们不讨论模板引擎，简单看看<code>@Controller</code>的使用：</p><ol><li>在pom文件中导入<code>Thymeleaf</code>依赖(IDEA的提示功能很强大，好好利用)</li><li>编写Controller代码，返回hello页面模板</li><li>编写页面模板hello.html</li></ol><div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="false"data-rel="XML"><figure class="iseeu highlight /xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-thymeleaf<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure></div><div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="false"data-rel="JAVA"><figure class="iseeu highlight /java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Controller</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">DemoController</span> </span>&#123;</span><br><span class="line">    <span class="meta">@RequestMapping</span>(<span class="string">"/say"</span>)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">sayHello</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">"hello"</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div><div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="false"data-rel="HTML"><figure class="iseeu highlight /html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">title</span>&gt;</span>Hello<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">p</span>&gt;</span>Hello World!<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure></div><p>&emsp;&emsp;同样，启动项目，访问<a href="http://localhost:8080/demo/say" target="_blank" rel="noopener">http://localhost:8080/demo/say</a>，我们发现，Hello World!还是那个Hello World!，但是它们背后的故事可就大不相同了。</p><blockquote><p>实际上，我们点进源码就会发现，<code>@RestController</code>其实就是<code>@ResponseBody</code>＋<code>@Controller</code>，玩到后来还是被套路了…</p></blockquote><p>&emsp;&emsp;再来看看控制器中其它注解的使用，就拿那几个代表性的传说中和<code>RESTful</code>完美搭配的那几个家伙为例，我们在<code>@RestController</code>注解标识的控制器中，编写如下方法：</p><div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="false"data-rel="JAVA"><figure class="iseeu highlight /java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@GetMapping</span>(<span class="string">"/getGitChat/&#123;id&#125;"</span>)</span><br><span class="line"><span class="function"><span class="keyword">public</span> GitChat <span class="title">getGitChat</span><span class="params">(@PathVariable String id)</span> </span>&#123;</span><br><span class="line">    GitChat gitChat = <span class="keyword">new</span> GitChat(<span class="keyword">null</span>, <span class="string">"chung"</span>, <span class="keyword">new</span> Date(), <span class="string">"http://gitbook.cn/gitchat/activity/"</span> + id);</span><br><span class="line">    <span class="keyword">return</span> gitChat;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div><p>&emsp;&emsp;其中<code>@GetMapping</code>表示此方法仅响应GET请求，其请求路径也附在括号内。而<code>@PathVariable</code>则获取了路径中的一个参数，这个参数在路径中用大括号标注。<br>&emsp;&emsp;还要再编写实体类GitChat如下：</p><div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="false"data-rel="JAVA"><figure class="iseeu highlight /java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">GitChat</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> Integer id;</span><br><span class="line">    <span class="keyword">private</span> String author;</span><br><span class="line">    <span class="keyword">private</span> Date date;</span><br><span class="line">    <span class="keyword">private</span> String url;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/***省略NoArgsConstructor AllArgsConstructor***/</span></span><br><span class="line">    <span class="comment">/***省略Getter Setter***/</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div><p>&emsp;&emsp;此时重启项目，再访问<a href="http://localhost:8080/demo/getGitChat/5a444c451f6ee91a25846ac1" target="_blank" rel="noopener">http://localhost:8080/demo/getGitChat/5a444c451f6ee91a25846ac1</a>，就可以看到框架已经自动帮我们把对象转换为JSON显示在了浏览器，如下：</p><div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="false"data-rel="JSON"><figure class="iseeu highlight /json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">    <span class="attr">"id"</span>: <span class="literal">null</span>,</span><br><span class="line">    <span class="attr">"author"</span>: <span class="string">"chung"</span>,</span><br><span class="line">    <span class="attr">"date"</span>: <span class="number">1514896266452</span>,</span><br><span class="line">    <span class="attr">"url"</span>: <span class="string">"http://gitbook.cn/gitchat/activity/5a444c451f6ee91a25846ac1"</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div><p>&emsp;&emsp;在上面的例子中，我们用到了<code>@PathVariable</code>注解，它可以帮助我们从路径中获取参数。而与其不同的<code>@RequestParam</code>注解，它可以帮助我们从请求中获取参数，例如：</p><div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="false"data-rel="JAVA"><figure class="iseeu highlight /java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@GetMapping</span>(<span class="string">"/getGitChat"</span>)</span><br><span class="line"><span class="function"><span class="keyword">public</span> GitChat <span class="title">getGitChatByRequestParam</span><span class="params">(@RequestParam(defaultValue = <span class="string">"5a444c451f6ee91a25846ac1"</span>)</span> String id) </span>&#123;</span><br><span class="line">    GitChat gitChat = <span class="keyword">new</span> GitChat(<span class="keyword">null</span>, <span class="string">"chung"</span>, <span class="keyword">new</span> Date(), <span class="string">"http://gitbook.cn/gitchat/activity/"</span> + id);</span><br><span class="line">    <span class="keyword">return</span> gitChat;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div><p>&emsp;&emsp;此时重启项目，访问<a href="http://localhost:8080/demo/getGitChat?id=5a444c451f6ee91a25846ac1" target="_blank" rel="noopener">http://localhost:8080/demo/getGitChat?id=5a444c451f6ee91a25846ac1</a>也将得到同样的结果，</p><blockquote><p><strong>注意</strong>：如果缺少<code>?id=*</code>这段，访问时将会报错，为避免这样的问题，我们可以设置默认值<code>@RequestParam(defaultValue = &quot;5a444c451f6ee91a25846ac1&quot;)</code>。</p></blockquote><h2 id="单元测试-1"><a href="#单元测试-1" class="headerlink" title="单元测试"></a>单元测试</h2><p>&emsp;&emsp;在上一章我们讨论了Spring Boot中JUnit的简单写法，其实，我们可以使用IDEA插入单元测试，这样更加便捷，省去了我们新建包、新建文件、新建类的时间，步骤如下：</p><ol><li>在代码中选中<code>DemoController</code>右键–&gt;Go To–&gt;Test–&gt;Create New Test–&gt;勾选需要测试的方法–&gt;OK</li><li>这时IDEA已经在test目录下相应的包内为我们创建好了<code>DemoControllerTest</code>文件</li><li>我们使用Spring提供的<code>MockMvc</code>类来完成测试，用<code>@AutoConfigureMockMvc</code>注解让框架自动配置，并使用<code>@Resource</code>注入MockMvc</li><li>编写接口测试代码并打印，测试代码及结果如下两段</li></ol><div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="false"data-rel="JAVA"><figure class="iseeu highlight /java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@RunWith</span>(SpringRunner.class)</span><br><span class="line"><span class="meta">@SpringBootTest</span></span><br><span class="line"><span class="meta">@AutoConfigureMockMvc</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">DemoControllerTest</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Resource</span></span><br><span class="line">    <span class="keyword">private</span> MockMvc mockMvc;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">getGitChatByRequestParam</span><span class="params">()</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        mockMvc.perform(</span><br><span class="line">            MockMvcRequestBuilders</span><br><span class="line">                .get(<span class="string">"/getGitChat"</span>)</span><br><span class="line">                .param(<span class="string">"id"</span>, <span class="string">"5a444c451f6ee91a25846ac1"</span>)</span><br><span class="line">        )</span><br><span class="line">            .andDo(print())</span><br><span class="line">            .andReturn();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div><div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="false"data-rel="YML"><figure class="iseeu highlight /yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">MockHttpServletResponse:</span></span><br><span class="line">       <span class="string">Status</span> <span class="string">=</span> <span class="number">200</span></span><br><span class="line"><span class="string">Error</span> <span class="string">message</span> <span class="string">=</span> <span class="literal">null</span></span><br><span class="line">      <span class="string">Headers</span> <span class="string">=</span> <span class="string">&#123;Content-Type=[application/json;charset=UTF-8]&#125;</span></span><br><span class="line"> <span class="string">Content</span> <span class="string">type</span> <span class="string">=</span> <span class="string">application/json;charset=UTF-8</span></span><br><span class="line">         <span class="string">Body</span> <span class="string">=</span> <span class="string">&#123;"author":"chung","date":1514893447007,"url":"http://gitbook.cn/gitchat/activity/5a444c451f6ee91a25846ac1"&#125;</span></span><br><span class="line"><span class="string">Forwarded</span> <span class="string">URL</span> <span class="string">=</span> <span class="literal">null</span></span><br><span class="line"><span class="string">Redirected</span> <span class="string">URL</span> <span class="string">=</span> <span class="literal">null</span></span><br><span class="line">      <span class="string">Cookies</span> <span class="string">=</span> <span class="string">[]</span></span><br></pre></td></tr></table></figure></div><p>&emsp;&emsp;测试结果限于篇幅，我只贴出了一小部分，在真是测试日志中我们可以看到各种详细的数据，包括返回页面Body体的具体内容也打印了出来。这样的测试代码简单优雅而又霸气十足有木有。</p><h1 id="数据库基本操作"><a href="#数据库基本操作" class="headerlink" title="数据库基本操作"></a>数据库基本操作</h1><h2 id="关于Repository"><a href="#关于Repository" class="headerlink" title="关于Repository"></a>关于Repository</h2><p>&emsp;&emsp;看完了与前端交互的部分，我们来讨论下Spring Boot在数据库操作方面，提供了哪些逆天的功能。<br>&emsp;&emsp;提到持久化，不得不提<code>JPA(Java Persistence API)</code>，jpa是一种规范或者说标准，<code>Hibernate</code>很好的实现了它，而我们使用到的<code>Spring-Data-JPA</code>则是<code>Spring</code>对<code>Hibernate</code>的整合。探讨实例之前，我们先做好如下准备：</p><p>&emsp;&emsp;添加<code>Spring-Data-JPA</code>的依赖，如下，<strong>注意：spring-boot-starter-data-jpa千万不要写错</strong>。</p><div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="false"data-rel="XML"><figure class="iseeu highlight /xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>mysql<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>mysql-connector-java<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-data-jpa<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure></div><p>&emsp;&emsp;做好数据库相关配置，url和用户名密码等。其中<code>ddl-auto: update</code>表示对于表结构，有则更新，无则创建，<code>show-sql: true</code>则表示在控制台打印执行的SQL语句。</p><div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="false"data-rel="YML"><figure class="iseeu highlight /yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">spring:</span></span><br><span class="line"><span class="attr">  datasource:</span></span><br><span class="line"><span class="attr">    driver-class-name:</span> <span class="string">com.mysql.jdbc.Driver</span></span><br><span class="line"><span class="attr">    url:</span> <span class="attr">jdbc:mysql://127.0.0.1:3306/dbgirl</span></span><br><span class="line"><span class="attr">    username:</span> <span class="string">root</span></span><br><span class="line"><span class="attr">    password:</span> <span class="string">root</span></span><br><span class="line"><span class="attr">  jpa:</span></span><br><span class="line"><span class="attr">    hibernate:</span></span><br><span class="line"><span class="attr">      ddl-auto:</span> <span class="string">update</span></span><br><span class="line"><span class="attr">    show-sql:</span> <span class="literal">true</span></span><br></pre></td></tr></table></figure></div><p>&emsp;&emsp;我们最好还是自己提前建好相关数据库和表，SQL语句如下：</p><div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="false"data-rel="SQL"><figure class="iseeu highlight /sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> <span class="string">`tbl_gitchat`</span> (</span><br><span class="line">  <span class="string">`id`</span> <span class="built_in">int</span>(<span class="number">8</span>) <span class="keyword">unsigned</span> <span class="keyword">NOT</span> <span class="literal">NULL</span> AUTO_INCREMENT,</span><br><span class="line">  <span class="string">`author`</span> <span class="built_in">varchar</span>(<span class="number">6</span>) <span class="keyword">DEFAULT</span> <span class="string">''</span>,</span><br><span class="line">  <span class="string">`date`</span> datetime <span class="keyword">DEFAULT</span> <span class="literal">NULL</span> <span class="keyword">ON</span> <span class="keyword">UPDATE</span> <span class="keyword">CURRENT_TIMESTAMP</span>,</span><br><span class="line">  <span class="string">`url`</span> <span class="built_in">varchar</span>(<span class="number">255</span>) <span class="keyword">DEFAULT</span> <span class="string">''</span>,</span><br><span class="line">  PRIMARY <span class="keyword">KEY</span> (<span class="string">`id`</span>)</span><br><span class="line">) <span class="keyword">ENGINE</span>=<span class="keyword">InnoDB</span> <span class="keyword">DEFAULT</span> <span class="keyword">CHARSET</span>=utf8mb4;</span><br></pre></td></tr></table></figure></div><p>&emsp;&emsp;此时，对与前面提到的GitChat实体类，我们又有必要进行一定的改造，看下面这段，其中<code>@Entity</code>注解表示实体类与数据库表的映射关系，<code>@Id</code>标识主键，<code>@GeneratedValue</code>标识生成规则，默认为AUTO，这些都是常见的了。</p><div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="false"data-rel="JAVA"><figure class="iseeu highlight /java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Entity</span>(name = <span class="string">"tbl_gitchat"</span>)</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">GitChat</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Id</span></span><br><span class="line">    <span class="meta">@GeneratedValue</span></span><br><span class="line">    <span class="keyword">private</span> Integer id;</span><br><span class="line">    <span class="keyword">private</span> String author;</span><br><span class="line">    <span class="keyword">private</span> Date date;</span><br><span class="line">    <span class="keyword">private</span> String url;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/***省略NoArgsConstructor AllArgsConstructor***/</span></span><br><span class="line">    <span class="comment">/***省略Getter Setter***/</span></span><br><span class="line">    <span class="comment">/***省略Override toString***/</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div><p>&emsp;&emsp;完成了以上步骤，接下来的重头戏，当然是我们的DAO层代码啦。你没看错，仅仅只是将接口继承自<code>JpaRepository</code>就好了，&lt;1,2&gt;中，1为实体类，2为主键类型。至此，我们便可以进行简单的数据库CURD操作了，简单不简单？粗暴不粗暴？心动不心动？</p><div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="false"data-rel="JAVA"><figure class="iseeu highlight /java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">GitChatRepository</span> <span class="keyword">extends</span> <span class="title">JpaRepository</span>&lt;<span class="title">GitChat</span>, <span class="title">Integer</span>&gt; </span>&#123;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div><h2 id="单元测试-2"><a href="#单元测试-2" class="headerlink" title="单元测试"></a>单元测试</h2><p>&emsp;&emsp;话说回来，还是来测试测试DAO层代码吧。首先我们提前插入几条测试数据到到数据库中备用：</p><div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="false"data-rel="SQL"><figure class="iseeu highlight /sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> <span class="string">`tbl_gitchat`</span> <span class="keyword">VALUES</span> (<span class="string">'1'</span>, <span class="string">'chung'</span>, <span class="string">'2018-01-02 21:07:10'</span>, <span class="string">'http://gitbook.cn/gitchat/activity/5a444c451f6ee91a25846ac1'</span>);</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> <span class="string">`tbl_gitchat`</span> <span class="keyword">VALUES</span> (<span class="string">'2'</span>, <span class="string">'chung'</span>, <span class="string">'2018-01-02 21:07:33'</span>, <span class="string">'http://gitbook.cn/gitchat/activity/5a444c451f6ee91a25846ac1'</span>);</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> <span class="string">`tbl_gitchat`</span> <span class="keyword">VALUES</span> (<span class="string">'3'</span>, <span class="string">'charle'</span>, <span class="string">'2018-01-02 21:07:47'</span>, <span class="string">'http://gitbook.cn/gitchat/activity/5a444c451f6ee91a25846ac1'</span>);</span><br></pre></td></tr></table></figure></div><p>&emsp;&emsp;接着，根据提到过的方法，自动生成测试文件，并编写代码如下，其中<code>findAll()</code>是框架为我们提供的查询所有数据的方法，它会返回一个实体对象的List。</p><div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="false"data-rel="JAVA"><figure class="iseeu highlight /java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@RunWith</span>(SpringRunner.class)</span><br><span class="line"><span class="meta">@SpringBootTest</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">GitChatRepositoryTest</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Resource</span></span><br><span class="line">    <span class="keyword">private</span> GitChatRepository gitChatRepository;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testFindAll</span><span class="params">()</span></span>&#123;</span><br><span class="line">        List&lt;GitChat&gt; all = gitChatRepository.findAll();</span><br><span class="line">        System.out.println(all.toString());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div><p>&emsp;&emsp;我们可以看看测试结果，打印出的内容正是我们所插入的3条记录。</p><div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="false"data-rel="VIM"><figure class="iseeu highlight /vim"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">[GitChat&#123;id=<span class="number">1</span>, author=<span class="string">'chung'</span>, date=<span class="number">2018</span>-<span class="number">01</span>-<span class="number">02</span> <span class="number">21</span>:<span class="number">07</span>:<span class="number">10.0</span>, url=<span class="string">'http://gitbook.cn/gitchat/activity/5a444c451f6ee91a25846ac1'</span>&#125;, </span><br><span class="line">GitChat&#123;id=<span class="number">2</span>, author=<span class="string">'chung'</span>, date=<span class="number">2018</span>-<span class="number">01</span>-<span class="number">02</span> <span class="number">21</span>:<span class="number">07</span>:<span class="number">33.0</span>, url=<span class="string">'http://gitbook.cn/gitchat/activity/5a444c451f6ee91a25846ac1'</span>&#125;, </span><br><span class="line">GitChat&#123;id=<span class="number">3</span>, author=<span class="string">'charle'</span>, date=<span class="number">2018</span>-<span class="number">01</span>-<span class="number">02</span> <span class="number">21</span>:<span class="number">07</span>:<span class="number">47.0</span>, url=<span class="string">'http://gitbook.cn/gitchat/activity/5a444c451f6ee91a25846ac1'</span>&#125;]</span><br></pre></td></tr></table></figure></div><p>&emsp;&emsp;你也许会问，大工程里面，这么复杂的逻辑，仅仅使用框架提供的能够满足特定需求吗。不要怕，忘了告诉你，更逆天的是，JPA也支持自定义的数据库操作甚至自定义SQL语句。举个例子如下，简简单单定义好方法之后，你就可以使用它来根据<code>author</code>查找所有满足条件的<code>GitChat</code>了。<strong>特别要注意的是</strong>，这个类和方法的名字可不是随便起的，它们的名称必须遵循<code>Spring Data JPA</code>的命名规范，而关于这个命名规范，不在本场Chat内容中，大家可以自行查阅资料，就不在此赘述了。</p><div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="false"data-rel="JAVA"><figure class="iseeu highlight /java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">GitChatRepository</span> <span class="keyword">extends</span> <span class="title">JpaRepository</span>&lt;<span class="title">GitChat</span>, <span class="title">Integer</span>&gt; </span>&#123;</span><br><span class="line">    <span class="function">List&lt;GitChat&gt; <span class="title">findGitChatsByAuthor</span><span class="params">(String author)</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div><p>&emsp;&emsp;同样，我们来测试下，这么简单的定义了一个方法之后，是否真的能够如愿满足我们的需求：</p><div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="false"data-rel="JAVA"><figure class="iseeu highlight /java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">findGitChatsByAuthor</span><span class="params">()</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">    List&lt;GitChat&gt; byAuthor = gitChatRepository.findGitChatsByAuthor(<span class="string">"chung"</span>);</span><br><span class="line">    System.out.println(byAuthor.toString());</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div><p>&emsp;&emsp;可以从打印出的内容中很明显的看到，这一次只有两个<code>author</code>值为<code>chung</code>的记录，说明我们的写法是可以完成查询特定条件的内容的。</p><div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="false"data-rel="VIM"><figure class="iseeu highlight /vim"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">[GitChat&#123;id=<span class="number">1</span>, author=<span class="string">'chung'</span>, date=<span class="number">2018</span>-<span class="number">01</span>-<span class="number">02</span> <span class="number">21</span>:<span class="number">07</span>:<span class="number">10.0</span>, url=<span class="string">'http://gitbook.cn/gitchat/activity/5a444c451f6ee91a25846ac1'</span>&#125;, </span><br><span class="line">GitChat&#123;id=<span class="number">2</span>, author=<span class="string">'chung'</span>, date=<span class="number">2018</span>-<span class="number">01</span>-<span class="number">02</span> <span class="number">21</span>:<span class="number">07</span>:<span class="number">33.0</span>, url=<span class="string">'http://gitbook.cn/gitchat/activity/5a444c451f6ee91a25846ac1'</span>&#125;]</span><br></pre></td></tr></table></figure></div><p>&emsp;&emsp;以上我们只是简单地讨论了JPA的使用，其他的CURD操作，大家可以举一反三。实际上JPA的功能远不止如此，我们可以自己写实现类来自定义操作，也可以自己写<code>SQL</code>语句配合<code>@Query</code>来查询，基本上来说，只有你想不到，没有它办不到。是不是霸气侧漏？</p><h1 id="事务管理简介"><a href="#事务管理简介" class="headerlink" title="事务管理简介"></a>事务管理简介</h1><h2 id="关于Service"><a href="#关于Service" class="headerlink" title="关于Service"></a>关于Service</h2><p>&emsp;&emsp;前面我们讨论了和前端打交道的控制器，也讨论了和数据库打交道的持久层，是时候讨论业务层了。与Controller类似，Service类，也有一个自己的注解，叫做<code>@Service</code>，配合我们曾编写过的<code>GitChatRepository</code>，我们可以编写一个简单的Service Demo，其中使用到了GitChatRepository的<code>save()</code>，这个方法也是框架为我们提供的，代码如下：</p><div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="false"data-rel="JAVA"><figure class="iseeu highlight /java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Service</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">GitChatService</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Resource</span></span><br><span class="line">    <span class="keyword">private</span> GitChatRepository gitChatRepository;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">saveGitChat</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        GitChat gitChat1 = <span class="keyword">new</span> GitChat(<span class="keyword">null</span>, <span class="string">"Zhang"</span>, <span class="keyword">new</span> Date(), <span class="string">"http://gitbook.cn/gitchat/activity/5a444c451f6ee91a25846ac1"</span>);</span><br><span class="line">        gitChatRepository.save(gitChat1);</span><br><span class="line">        GitChat gitChat2 = <span class="keyword">new</span> GitChat(<span class="number">1</span>, <span class="string">"ZhangChong"</span>, <span class="keyword">new</span> Date(), <span class="string">"http://gitbook.cn/gitchat/activity/5a444c451f6ee91a25846ac1"</span>);</span><br><span class="line">        gitChatRepository.save(gitChat2);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div><p>&emsp;&emsp;这个时候我们测试<code>GitChatService</code>的<code>saveGitChat()</code>，代码如下：</p><div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="false"data-rel="JAVA"><figure class="iseeu highlight /java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@RunWith</span>(SpringRunner.class)</span><br><span class="line"><span class="meta">@SpringBootTest</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">GitChatServiceTest</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Resource</span></span><br><span class="line">    <span class="keyword">private</span> GitChatService gitChatService;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">saveGitChat</span><span class="params">()</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        gitChatService.saveGitChat();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div><p>&emsp;&emsp;测试完成后可以发现，数据库内只增加了一条记录。没关系，还记得我们前面设计数据库的时候，特意将<code>author</code>字段长度设置为6，这里由于我们插入的第二个实体对象<code>author</code>字段超长不符要求，所以导致第二条数据插入失败了，但是这并不影响我们判断：框架为我们提供的<code>save()</code>确实可用，而且一般情况下，添加异常处理之后，简单的Service层代码这么写，是没有问题的。</p><h2 id="关于事务管理"><a href="#关于事务管理" class="headerlink" title="关于事务管理"></a>关于事务管理</h2><p>&emsp;&emsp;很多时候，我们的业务层逻辑复杂，很多操作都需要在同一事务中进行，这个时候，<code>@Transactional</code>注解就派上了用场。<br>它可以配置事务传播特性，默认是<code>REQUIRED</code>，<code>@Transactional</code>的使用也非常简单，你只需要在你的方法上加上这个注解便可：</p><div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="false"data-rel="JAVA"><figure class="iseeu highlight /java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Service</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">GitChatService</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Resource</span></span><br><span class="line">    <span class="keyword">private</span> GitChatRepository gitChatRepository;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Transactional</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">saveGitChat</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        GitChat gitChat1 = <span class="keyword">new</span> GitChat(<span class="keyword">null</span>, <span class="string">"Zhang"</span>, <span class="keyword">new</span> Date(), <span class="string">"http://gitbook.cn/gitchat/activity/5a444c451f6ee91a25846ac1"</span>);</span><br><span class="line">        gitChatRepository.save(gitChat1);</span><br><span class="line">        GitChat gitChat2 = <span class="keyword">new</span> GitChat(<span class="number">1</span>, <span class="string">"ZhangChong"</span>, <span class="keyword">new</span> Date(), <span class="string">"http://gitbook.cn/gitchat/activity/5a444c451f6ee91a25846ac1"</span>);</span><br><span class="line">        gitChatRepository.save(gitChat2);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div><p>&emsp;&emsp;依旧使用<code>saveGitChat()</code>测试方法，只不过这一次我们测试的方法添加了<code>@Transactional</code>注解。</p><div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="false"data-rel="VIM"><figure class="iseeu highlight /vim"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">Caused by: <span class="keyword">com</span>.mysql.jdbc.MysqlDataTruncation: Data truncation: Data too long <span class="keyword">for</span> column <span class="string">'author'</span> at row <span class="number">1</span></span><br><span class="line">    at <span class="keyword">com</span>.mysql.jdbc.MysqlIO.checkErrorPacket(MysqlIO.jav<span class="variable">a:3971</span>)</span><br><span class="line">    at <span class="keyword">com</span>.mysql.jdbc.MysqlIO.checkErrorPacket(MysqlIO.jav<span class="variable">a:3909</span>)</span><br><span class="line">    at <span class="keyword">com</span>.mysql.jdbc.MysqlIO.sendCommand(MysqlIO.jav<span class="variable">a:2527</span>)</span><br><span class="line">    at <span class="keyword">com</span>.mysql.jdbc.MysqlIO.sqlQueryDirect(MysqlIO.jav<span class="variable">a:2680</span>)</span><br><span class="line">    at <span class="keyword">com</span>.mysql.jdbc.ConnectionImpl.execSQL</span><br><span class="line">    ......</span><br></pre></td></tr></table></figure></div><p>&emsp;&emsp;测试完我们发现，这一次日志中报错了，错误信息为<code>Data too long for column &#39;author&#39; at row 1</code>。我们再去数据库查看，发现并没有任何新增的记录。对比上一次的测试结果可以知道，<code>@Transactional</code>将我们的两次插入操作置于同一事务中，当第二条数据插入失败时，进行了回滚操作，所以数据库不会有新增的记录。</p><h1 id="拓展进阶"><a href="#拓展进阶" class="headerlink" title="拓展进阶"></a>拓展进阶</h1><h2 id="表单验证"><a href="#表单验证" class="headerlink" title="表单验证"></a>表单验证</h2><p>&emsp;&emsp;在接口开发的过程中，我们经常需要对提交的各种表单数据进行验证，这个时候，我们可以借助<code>@Valid</code>注解来轻松达到目的。话不多说，我们直接来看。再次改造GitChat实体类，在<code>author</code>字段上添加<code>@Size(min = 1, max = 6)</code>，他为我们限定了<code>author</code>字段的长度为1-6，在<code>url</code>字段上添加<code>@NotNull(message = &quot;url不能为空&quot;)</code>，它为我们限制了url不能为null，并定义了错误信息。</p><div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="false"data-rel="JAVA"><figure class="iseeu highlight /java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Entity</span>(name = <span class="string">"tbl_gitchat"</span>)</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">GitChat</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Id</span></span><br><span class="line">    <span class="meta">@GeneratedValue</span></span><br><span class="line">    <span class="keyword">private</span> Integer id;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Size</span>(min = <span class="number">1</span>, max = <span class="number">6</span>)</span><br><span class="line">    <span class="keyword">private</span> String author;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> Date date;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@NotNull</span>(message = <span class="string">"url不能为空"</span>)</span><br><span class="line">    <span class="keyword">private</span> String url;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/***省略NoArgsConstructor AllArgsConstructor***/</span></span><br><span class="line">    <span class="comment">/***省略Getter Setter***/</span></span><br><span class="line">    <span class="comment">/***省略Override toString***/</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div><p>&emsp;&emsp;接下来在控制器中，我们这么使用<code>@Valid</code>注解：</p><div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="false"data-rel="JAVA"><figure class="iseeu highlight /java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@RestController</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">DemoController</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Resource</span></span><br><span class="line">    <span class="keyword">private</span> GitChatService gitChatService;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@PostMapping</span>(<span class="string">"/gitChat"</span>)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> Object <span class="title">addGitChat</span><span class="params">(</span></span></span><br><span class="line"><span class="function"><span class="params">        @Valid GitChat gitChat,</span></span></span><br><span class="line"><span class="function"><span class="params">        BindingResult bindingResult</span></span></span><br><span class="line"><span class="function"><span class="params">    )</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (bindingResult.hasErrors()) &#123;</span><br><span class="line">            <span class="keyword">return</span> bindingResult.getFieldError().getDefaultMessage();</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="keyword">return</span> gitChatService.saveGitChat(gitChat);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div><p>&emsp;&emsp;以上<code>@Valid</code>伴随的<code>BindingResult</code>对象中，携带校验的各种信息。我们可以利用这个对象很方便的判定表单是否验证通过。让我们测试测试：</p><div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="false"data-rel="JAVA"><figure class="iseeu highlight /java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@RunWith</span>(SpringRunner.class)</span><br><span class="line"><span class="meta">@SpringBootTest</span></span><br><span class="line"><span class="meta">@AutoConfigureMockMvc</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">DemoControllerTest</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Resource</span></span><br><span class="line">    <span class="keyword">private</span> MockMvc mockMvc;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testAddGitChat</span><span class="params">()</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        mockMvc.perform(</span><br><span class="line">            MockMvcRequestBuilders</span><br><span class="line">                    .post(<span class="string">"/gitChat"</span>)</span><br><span class="line">                    .param(<span class="string">"author"</span>, <span class="string">"ZhangChong"</span>)</span><br><span class="line">                    .param(<span class="string">"date"</span>, String.valueOf(<span class="keyword">new</span> Date()))</span><br><span class="line">                    .param(<span class="string">"url"</span>, <span class="string">"http://gitbook.cn/gitchat/activity/5a444c451f6ee91a25846ac1"</span>)</span><br><span class="line">        )</span><br><span class="line">            .andDo(print())</span><br><span class="line">            .andReturn();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div><p>&emsp;&emsp;从上面的测试代码中看到，我们故意调用接口插入一条不符规则的记录。然后从下面测试日志的<code>Body = size must be between 1 and 6</code>可以看出，提交的参数校验失败了，最后再去看看数据库，发现并没有成功添加记录。这一系列的现象或结果说明一个很简单的道理：<code>@Valid</code>为我们立下了汗马功劳，简化了我们各种判断与校验的工作。</p><div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="false"data-rel="VIM"><figure class="iseeu highlight /vim"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">MockHttpServletResponse:</span><br><span class="line">       Status = <span class="number">200</span></span><br><span class="line">Error message = null</span><br><span class="line">      Headers = &#123;Content-Type=[text/plain;charset=UTF-8], Content-Length=[28]&#125;</span><br><span class="line"> Content type = text/plain;charset=UTF-8</span><br><span class="line">         Body = size must <span class="keyword">be</span> between <span class="number">1</span> <span class="built_in">and</span> <span class="number">6</span></span><br><span class="line">Forwarded URL = null</span><br><span class="line">Redirected URL = null</span><br><span class="line">      Cookies = []</span><br></pre></td></tr></table></figure></div><h1 id="写在后面"><a href="#写在后面" class="headerlink" title="写在后面"></a>写在后面</h1><p>&emsp;&emsp;本博客旨在快速入门Spring Boot，了解相关的基础操作，完整的代码已分享至GitHub<a href="https://github.com/chung567115/springboot" target="_blank" rel="noopener">点击访问</a>，可自行下载。</p><blockquote><p>码字不易，欢迎打赏，啊哈哈~</p></blockquote>]]></content>
      
      
      <categories>
          
          <category> Spring Boot </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Java </tag>
            
            <tag> Spring Boot </tag>
            
            <tag> 微服务 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Spring Boot JPA命名规则</title>
      <link href="/2018/01/12/Spring%20Boot%20JPA%20%E5%91%BD%E5%90%8D%E8%A7%84%E5%88%99/"/>
      <url>/2018/01/12/Spring%20Boot%20JPA%20%E5%91%BD%E5%90%8D%E8%A7%84%E5%88%99/</url>
      
        <content type="html"><![CDATA[<blockquote><p>Spring Boot 中JPA的使用真方便，那么它的命名要遵循哪些规则呢？</p></blockquote><a id="more"></a><p>以下表格摘录自<a href="https://docs.spring.io/spring-data/jpa/docs/1.4.3.RELEASE/reference/html/jpa.repositories.html" target="_blank" rel="noopener">官方文档</a></p><table><thead><tr><th style="text-align:center">Keyword</th><th style="text-align:center">Sample</th><th style="text-align:center">JPQL snippet</th></tr></thead><tbody><tr><td style="text-align:center">And</td><td style="text-align:center">findByLastnameAndFirstname</td><td style="text-align:center">… where x.lastname = ?1 and x.firstname = ?2</td></tr><tr><td style="text-align:center">Or</td><td style="text-align:center">findByLastnameOrFirstname</td><td style="text-align:center">… where x.lastname = ?1 or x.firstname = ?2</td></tr><tr><td style="text-align:center">Between</td><td style="text-align:center">findByStartDateBetween</td><td style="text-align:center">… where x.startDate between 1? and ?2</td></tr><tr><td style="text-align:center">LessThan</td><td style="text-align:center">findByAgeLessThan</td><td style="text-align:center">… where x.age &lt; ?1</td></tr><tr><td style="text-align:center">GreaterThan</td><td style="text-align:center">findByAgeGreaterThan</td><td style="text-align:center">… where x.age &gt; ?1</td></tr><tr><td style="text-align:center">After</td><td style="text-align:center">findByStartDateAfter</td><td style="text-align:center">… where x.startDate &gt; ?1</td></tr><tr><td style="text-align:center">Before</td><td style="text-align:center">findByStartDateBefore</td><td style="text-align:center">… where x.startDate &lt; ?1</td></tr><tr><td style="text-align:center">IsNull</td><td style="text-align:center">findByAgeIsNull</td><td style="text-align:center">… where x.age is null</td></tr><tr><td style="text-align:center">IsNotNull,NotNull</td><td style="text-align:center">findByAge(Is)NotNull</td><td style="text-align:center">… where x.age not null</td></tr><tr><td style="text-align:center">Like</td><td style="text-align:center">findByFirstnameLike</td><td style="text-align:center">… where x.firstname like ?1</td></tr><tr><td style="text-align:center">NotLike</td><td style="text-align:center">findByFirstnameNotLike</td><td style="text-align:center">… where x.firstname not like ?1</td></tr><tr><td style="text-align:center">StartingWith</td><td style="text-align:center">findByFirstnameStartingWith</td><td style="text-align:center">… where x.firstname like ?1 (parameter bound with appended %)</td></tr><tr><td style="text-align:center">EndingWith</td><td style="text-align:center">findByFirstnameEndingWith</td><td style="text-align:center">… where x.firstname like ?1 (parameter bound with prepended %)</td></tr><tr><td style="text-align:center">Containing</td><td style="text-align:center">findByFirstnameContaining</td><td style="text-align:center">… where x.firstname like ?1 (parameter bound wrapped in %)</td></tr><tr><td style="text-align:center">OrderBy</td><td style="text-align:center">findByAgeOrderByLastnameDesc</td><td style="text-align:center">… where x.age = ?1 order by x.lastname desc</td></tr><tr><td style="text-align:center">Not</td><td style="text-align:center">findByLastnameNot</td><td style="text-align:center">… where x.lastname &lt;&gt; ?1</td></tr><tr><td style="text-align:center">In</td><td style="text-align:center">findByAgeIn(Collection<age> ages)</age></td><td style="text-align:center">… where x.age in ?1</td></tr><tr><td style="text-align:center">NotIn</td><td style="text-align:center">findByAgeNotIn(Collection<age> age)</age></td><td style="text-align:center">… where x.age not in ?1</td></tr><tr><td style="text-align:center">True</td><td style="text-align:center">findByActiveTrue()</td><td style="text-align:center">… where x.active = true</td></tr><tr><td style="text-align:center">False</td><td style="text-align:center">findByActiveFalse()</td><td style="text-align:center">… where x.active = false</td></tr></tbody></table>]]></content>
      
      
      <categories>
          
          <category> Spring Boot </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Java </tag>
            
            <tag> Spring Boot </tag>
            
            <tag> 微服务 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>注解@Valid的使用</title>
      <link href="/2018/01/02/%E6%B3%A8%E8%A7%A3@Valid%E7%9A%84%E4%BD%BF%E7%94%A8/"/>
      <url>/2018/01/02/%E6%B3%A8%E8%A7%A3@Valid%E7%9A%84%E4%BD%BF%E7%94%A8/</url>
      
        <content type="html"><![CDATA[<blockquote><p>列出Spring框架中的@Valid到底有哪些用法</p></blockquote><a id="more"></a><table><thead><tr><th style="text-align:center">限制</th><th style="text-align:center">说明</th></tr></thead><tbody><tr><td style="text-align:center">@Null</td><td style="text-align:center">限制只能为null</td></tr><tr><td style="text-align:center">@NotNull</td><td style="text-align:center">限制必须不为null</td></tr><tr><td style="text-align:center">@AssertFalse</td><td style="text-align:center">限制必须为false</td></tr><tr><td style="text-align:center">@AssertTrue</td><td style="text-align:center">限制必须为true</td></tr><tr><td style="text-align:center">@DecimalMax(value)</td><td style="text-align:center">限制必须为一个不大于指定值的数字</td></tr><tr><td style="text-align:center">@DecimalMin(value)</td><td style="text-align:center">限制必须为一个不小于指定值的数字</td></tr><tr><td style="text-align:center">@Digits(integer,fraction)</td><td style="text-align:center">限制必须为一个小数，且整数部分的位数不能超过integer，小数部分的位数不能超过fraction</td></tr><tr><td style="text-align:center">@Future</td><td style="text-align:center">限制必须是一个将来的日期</td></tr><tr><td style="text-align:center">@Max(value)</td><td style="text-align:center">限制必须为一个不大于指定值的数字</td></tr><tr><td style="text-align:center">@Min(value)</td><td style="text-align:center">限制必须为一个不小于指定值的数字</td></tr><tr><td style="text-align:center">@Past</td><td style="text-align:center">限制必须是一个过去的日期</td></tr><tr><td style="text-align:center">@Pattern(value)</td><td style="text-align:center">限制必须符合指定的正则表达式</td></tr><tr><td style="text-align:center">@Size(max,min)</td><td style="text-align:center">限制字符长度必须在min到max之间</td></tr><tr><td style="text-align:center">@Past</td><td style="text-align:center">验证注解的元素值（日期类型）比当前时间早</td></tr><tr><td style="text-align:center">@NotEmpty</td><td style="text-align:center">验证注解的元素值不为null且不为空（字符串长度不为0、集合大小不为0）</td></tr><tr><td style="text-align:center">@NotBlank</td><td style="text-align:center">验证注解的元素值不为空（不为null、去除首位空格后长度为0），不同于@NotEmpty，@NotBlank只应用于字符串且在比较时会去除字符串的空格</td></tr><tr><td style="text-align:center">@Email</td><td style="text-align:center">验证注解的元素值是Email，也可以通过正则表达式和flag指定自定义的email格式</td></tr></tbody></table>]]></content>
      
      
      <categories>
          
          <category> Java </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Java </tag>
            
            <tag> Spring Boot </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>MarkDown支持高亮的语言</title>
      <link href="/2018/01/02/MarkDown%E6%94%AF%E6%8C%81%E9%AB%98%E4%BA%AE%E7%9A%84%E8%AF%AD%E8%A8%80/"/>
      <url>/2018/01/02/MarkDown%E6%94%AF%E6%8C%81%E9%AB%98%E4%BA%AE%E7%9A%84%E8%AF%AD%E8%A8%80/</url>
      
        <content type="html"><![CDATA[<blockquote><p>在MarkDown文件中如果代码能高亮显示，界面会非常美观，那么MarkDown支持哪些语言的高亮显示呢？</p></blockquote><a id="more"></a><p>使用前：<br>public static void main(String[] args){<br>​    System.out.println(“Hello”);<br>}</p><p>使用后：<br><div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="false"data-rel="JAVA"><figure class="iseeu highlight /java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span></span>&#123;</span><br><span class="line">    System.out.println(<span class="string">"Hello"</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div></p><p>其中，使用key和来标记语言时，下面的就会表格就会派上用场了</p><table><thead><tr><th style="text-align:center">language</th><th style="text-align:center">key</th></tr></thead><tbody><tr><td style="text-align:center">1C</td><td style="text-align:center">1c</td></tr><tr><td style="text-align:center">ActionScript</td><td style="text-align:center">actionscript</td></tr><tr><td style="text-align:center">Apache</td><td style="text-align:center">apache</td></tr><tr><td style="text-align:center">AppleScript</td><td style="text-align:center">applescript</td></tr><tr><td style="text-align:center">AsciiDoc</td><td style="text-align:center">asciidoc</td></tr><tr><td style="text-align:center">AspectJ</td><td style="text-align:center">asciidoc</td></tr><tr><td style="text-align:center">AutoHotkey</td><td style="text-align:center">autohotkey</td></tr><tr><td style="text-align:center">AVR Assembler</td><td style="text-align:center">avrasm</td></tr><tr><td style="text-align:center">Axapta</td><td style="text-align:center">axapta</td></tr><tr><td style="text-align:center">Bash</td><td style="text-align:center">bash</td></tr><tr><td style="text-align:center">BrainFuck</td><td style="text-align:center">brainfuck</td></tr><tr><td style="text-align:center">Cap’n Proto</td><td style="text-align:center">capnproto</td></tr><tr><td style="text-align:center">Clojure REPL</td><td style="text-align:center">clojure</td></tr><tr><td style="text-align:center">Clojure</td><td style="text-align:center">clojure</td></tr><tr><td style="text-align:center">CMake</td><td style="text-align:center">cmake</td></tr><tr><td style="text-align:center">CoffeeScript</td><td style="text-align:center">coffeescript</td></tr><tr><td style="text-align:center">C++</td><td style="text-align:center">cpp</td></tr><tr><td style="text-align:center">C#</td><td style="text-align:center">cs</td></tr><tr><td style="text-align:center">CSS</td><td style="text-align:center">css</td></tr><tr><td style="text-align:center">D</td><td style="text-align:center">d</td></tr><tr><td style="text-align:center">Dart</td><td style="text-align:center">d</td></tr><tr><td style="text-align:center">Delphi</td><td style="text-align:center">delphi</td></tr><tr><td style="text-align:center">Diff</td><td style="text-align:center">diff</td></tr><tr><td style="text-align:center">Django</td><td style="text-align:center">django</td></tr><tr><td style="text-align:center">DOS.bat</td><td style="text-align:center">dos</td></tr><tr><td style="text-align:center">Dust</td><td style="text-align:center">dust</td></tr><tr><td style="text-align:center">Elixir</td><td style="text-align:center">elixir</td></tr><tr><td style="text-align:center">ERB(Embedded Ruby)</td><td style="text-align:center">erb</td></tr><tr><td style="text-align:center">Erlang REPL</td><td style="text-align:center">erlang-repl</td></tr><tr><td style="text-align:center">Erlang</td><td style="text-align:center">erlang</td></tr><tr><td style="text-align:center">FIX</td><td style="text-align:center">fix</td></tr><tr><td style="text-align:center">F#</td><td style="text-align:center">fsharp</td></tr><tr><td style="text-align:center">G-code(ISO 6983)</td><td style="text-align:center">gcode</td></tr><tr><td style="text-align:center">Gherkin</td><td style="text-align:center">gherkin</td></tr><tr><td style="text-align:center">GLSL</td><td style="text-align:center">glsl</td></tr><tr><td style="text-align:center">Go</td><td style="text-align:center">go</td></tr><tr><td style="text-align:center">Gradle</td><td style="text-align:center">gradle</td></tr><tr><td style="text-align:center">Groovy</td><td style="text-align:center">groovy</td></tr><tr><td style="text-align:center">Haml</td><td style="text-align:center">haml</td></tr><tr><td style="text-align:center">Handlebars</td><td style="text-align:center">handlebars</td></tr><tr><td style="text-align:center">Haskell</td><td style="text-align:center">haskell</td></tr><tr><td style="text-align:center">Haxe</td><td style="text-align:center">haxe</td></tr><tr><td style="text-align:center">HTML</td><td style="text-align:center">html</td></tr><tr><td style="text-align:center">HTTP</td><td style="text-align:center">http</td></tr><tr><td style="text-align:center">Ini file</td><td style="text-align:center">ini</td></tr><tr><td style="text-align:center">Java</td><td style="text-align:center">java</td></tr><tr><td style="text-align:center">JavaScript</td><td style="text-align:center">javascript</td></tr><tr><td style="text-align:center">JSON</td><td style="text-align:center">json</td></tr><tr><td style="text-align:center">Lasso</td><td style="text-align:center">lasso</td></tr><tr><td style="text-align:center">Less</td><td style="text-align:center">less</td></tr><tr><td style="text-align:center">Lisp</td><td style="text-align:center">lisp</td></tr><tr><td style="text-align:center">LiveCode</td><td style="text-align:center">livecodeserver</td></tr><tr><td style="text-align:center">LiveScript</td><td style="text-align:center">livescript</td></tr><tr><td style="text-align:center">Lua</td><td style="text-align:center">lua</td></tr><tr><td style="text-align:center">Makefile</td><td style="text-align:center">makefile</td></tr><tr><td style="text-align:center">Markdown</td><td style="text-align:center">markdown</td></tr><tr><td style="text-align:center">Mathematica</td><td style="text-align:center">mathematica</td></tr><tr><td style="text-align:center">Matlab</td><td style="text-align:center">matlab</td></tr><tr><td style="text-align:center">MEL (Maya Embedded Language)</td><td style="text-align:center">mel</td></tr><tr><td style="text-align:center">Mercury</td><td style="text-align:center">mercury</td></tr><tr><td style="text-align:center">Mizar</td><td style="text-align:center">mizar</td></tr><tr><td style="text-align:center">Monkey</td><td style="text-align:center">monkey</td></tr><tr><td style="text-align:center">Nginx</td><td style="text-align:center">nginx</td></tr><tr><td style="text-align:center">Nimrod</td><td style="text-align:center">nimrod</td></tr><tr><td style="text-align:center">Nix</td><td style="text-align:center">nix</td></tr><tr><td style="text-align:center">NSIS</td><td style="text-align:center">nsis</td></tr><tr><td style="text-align:center">Objective C</td><td style="text-align:center">objectivec</td></tr><tr><td style="text-align:center">OCaml</td><td style="text-align:center">ocaml</td></tr><tr><td style="text-align:center">Oxygene</td><td style="text-align:center">oxygene</td></tr><tr><td style="text-align:center">Parser 3</td><td style="text-align:center">parser3</td></tr><tr><td style="text-align:center">Perl</td><td style="text-align:center">perl</td></tr><tr><td style="text-align:center">PHP</td><td style="text-align:center">php</td></tr><tr><td style="text-align:center">PowerShell</td><td style="text-align:center">powershell</td></tr><tr><td style="text-align:center">Processing</td><td style="text-align:center">processing</td></tr><tr><td style="text-align:center">Python’s profiler output</td><td style="text-align:center">profile</td></tr><tr><td style="text-align:center">Protocol Buffers</td><td style="text-align:center">protobuf</td></tr><tr><td style="text-align:center">Puppet</td><td style="text-align:center">puppet</td></tr><tr><td style="text-align:center">Python</td><td style="text-align:center">python</td></tr><tr><td style="text-align:center">Q</td><td style="text-align:center">q</td></tr><tr><td style="text-align:center">R</td><td style="text-align:center">r</td></tr><tr><td style="text-align:center">RenderMan RIB</td><td style="text-align:center">rib</td></tr><tr><td style="text-align:center">Roboconf</td><td style="text-align:center">roboconf</td></tr><tr><td style="text-align:center">RenderMan RSL</td><td style="text-align:center">rsl</td></tr><tr><td style="text-align:center">Ruby</td><td style="text-align:center">ruby</td></tr><tr><td style="text-align:center">Oracle Rules Language</td><td style="text-align:center">ruleslanguage</td></tr><tr><td style="text-align:center">Rust</td><td style="text-align:center">rust</td></tr><tr><td style="text-align:center">Scala</td><td style="text-align:center">scala</td></tr><tr><td style="text-align:center">Scheme</td><td style="text-align:center">scheme</td></tr><tr><td style="text-align:center">Scilab</td><td style="text-align:center">scilab</td></tr><tr><td style="text-align:center">SCSS</td><td style="text-align:center">scss</td></tr><tr><td style="text-align:center">Smali</td><td style="text-align:center">smali</td></tr><tr><td style="text-align:center">SmallTalk</td><td style="text-align:center">smalltalk</td></tr><tr><td style="text-align:center">SML</td><td style="text-align:center">sml</td></tr><tr><td style="text-align:center">SQL</td><td style="text-align:center">sql</td></tr><tr><td style="text-align:center">Stata</td><td style="text-align:center">stata</td></tr><tr><td style="text-align:center">STEP Part21(ISO 10303-21)</td><td style="text-align:center">step21</td></tr><tr><td style="text-align:center">Stylus</td><td style="text-align:center">stylus</td></tr><tr><td style="text-align:center">Swift</td><td style="text-align:center">swift</td></tr><tr><td style="text-align:center">Tcl</td><td style="text-align:center">tcl</td></tr><tr><td style="text-align:center">Tex</td><td style="text-align:center">tex</td></tr><tr><td style="text-align:center">text</td><td style="text-align:center">text/plain</td></tr><tr><td style="text-align:center">Thrift</td><td style="text-align:center">thrift</td></tr><tr><td style="text-align:center">Twig</td><td style="text-align:center">twig</td></tr><tr><td style="text-align:center">TypeScript</td><td style="text-align:center">typescript</td></tr><tr><td style="text-align:center">Vala</td><td style="text-align:center">vala</td></tr><tr><td style="text-align:center">VB.NET</td><td style="text-align:center">vbnet</td></tr><tr><td style="text-align:center">VBScript in HTML</td><td style="text-align:center">vbscript-html</td></tr><tr><td style="text-align:center">VBScript</td><td style="text-align:center">vbscript</td></tr><tr><td style="text-align:center">Verilog</td><td style="text-align:center">verilog</td></tr><tr><td style="text-align:center">VHDL</td><td style="text-align:center">vhdl</td></tr><tr><td style="text-align:center">Vim Script</td><td style="text-align:center">vim</td></tr><tr><td style="text-align:center">Intel x86 Assembly</td><td style="text-align:center">x86asm</td></tr><tr><td style="text-align:center">XL</td><td style="text-align:center">xl</td></tr><tr><td style="text-align:center">XML</td><td style="text-align:center">xml</td></tr><tr><td style="text-align:center">YAML</td><td style="text-align:center">yml</td></tr></tbody></table>]]></content>
      
      
      <categories>
          
          <category> 业余知识 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> MarkDown </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>IDEA搭建Web Service项目</title>
      <link href="/2017/12/25/IDEA%E6%90%AD%E5%BB%BAWeb%20Service%E9%A1%B9%E7%9B%AE/"/>
      <url>/2017/12/25/IDEA%E6%90%AD%E5%BB%BAWeb%20Service%E9%A1%B9%E7%9B%AE/</url>
      
        <content type="html"><![CDATA[<blockquote><p>本篇博客，小博将记录IDEA下，简单Web Service项目搭建的详细过程</p></blockquote><a id="more"></a><p>1、新建Web Service服务端项目，见下两图<br><img src="https://raw.githubusercontent.com/chung567115/chung567115.github.io/hexo-blog/blog-img/7-1.png" alt="1"></p><p><img src="https://raw.githubusercontent.com/chung567115/chung567115.github.io/hexo-blog/blog-img/7-2.png" alt="2"></p><p>2、项目建成后，会有如下文件。<br><img src="https://raw.githubusercontent.com/chung567115/chung567115.github.io/hexo-blog/blog-img/7-3.png" alt="3"></p><p>3、在HelloWorld.java上右键–&gt;WebService–&gt;Generate WSDL From Java Code，生成对应的wsdl文件，见下三图。<br><img src="https://raw.githubusercontent.com/chung567115/chung567115.github.io/hexo-blog/blog-img/7-4.png" alt="4"></p><p><img src="https://raw.githubusercontent.com/chung567115/chung567115.github.io/hexo-blog/blog-img/7-5.png" alt="5"></p><p><img src="https://raw.githubusercontent.com/chung567115/chung567115.github.io/hexo-blog/blog-img/7-6.png" alt="6"></p><p>4、配置项目Tomcat，Run–&gt;Edit Configurations–&gt;添加–&gt;Tomcat Server–&gt;Local，如下图。<br><img src="https://raw.githubusercontent.com/chung567115/chung567115.github.io/hexo-blog/blog-img/7-7.png" alt="7"></p><p>5、命名tomcat，选择Deployment页，进行如下几图操作。<br><img src="https://raw.githubusercontent.com/chung567115/chung567115.github.io/hexo-blog/blog-img/7-8.png" alt="8"></p><p><img src="https://raw.githubusercontent.com/chung567115/chung567115.github.io/hexo-blog/blog-img/7-9.png" alt="9"></p><p><img src="https://raw.githubusercontent.com/chung567115/chung567115.github.io/hexo-blog/blog-img/7-10.png" alt="10"></p><p>6、File–&gt;Project Structure，按序进行如下四图操作。<br><img src="https://raw.githubusercontent.com/chung567115/chung567115.github.io/hexo-blog/blog-img/7-11.png" alt="11"></p><p><img src="https://raw.githubusercontent.com/chung567115/chung567115.github.io/hexo-blog/blog-img/7-12.png" alt="12"></p><p><img src="https://raw.githubusercontent.com/chung567115/chung567115.github.io/hexo-blog/blog-img/7-13.png" alt="13"></p><p><img src="https://raw.githubusercontent.com/chung567115/chung567115.github.io/hexo-blog/blog-img/7-14.png" alt="14"></p><p>7、上述步骤完成后，启动Tomcat，访问 <a href="http://localhost:8080/services" target="_blank" rel="noopener">http://localhost:8080/services</a> 若出现如下界面，则部署成功。<br><img src="https://raw.githubusercontent.com/chung567115/chung567115.github.io/hexo-blog/blog-img/7-15.png" alt="15"></p><p>8、下面进行Web Service项目客户端的代码生成。新建WebService Client项目，如下两图。<br><img src="https://raw.githubusercontent.com/chung567115/chung567115.github.io/hexo-blog/blog-img/7-16.png" alt="16"></p><p><img src="https://raw.githubusercontent.com/chung567115/chung567115.github.io/hexo-blog/blog-img/7-17.png" alt="17"></p><p>9、Web service wsdl url选项框中，选择前面搭好的Web Service服务端HelloWorld.wsdl文件。如下图。<br><img src="https://raw.githubusercontent.com/chung567115/chung567115.github.io/hexo-blog/blog-img/7-18.png" alt="18"></p><p>新建成功后，目录结构以及生成的文件如下图。<br><img src="https://raw.githubusercontent.com/chung567115/chung567115.github.io/hexo-blog/blog-img/7-19.png" alt="19"></p><p>10、File–&gt;Project Structure，按序进行如下两图操作。<br><img src="https://raw.githubusercontent.com/chung567115/chung567115.github.io/hexo-blog/blog-img/7-20.png" alt="20"></p><p><img src="https://raw.githubusercontent.com/chung567115/chung567115.github.io/hexo-blog/blog-img/7-21.png" alt="21"></p><p>11、编写测试文件TestHelloWorld.java，如下图所示。<br><img src="https://raw.githubusercontent.com/chung567115/chung567115.github.io/hexo-blog/blog-img/7-22.png" alt="22"></p><p>其中代码为<br><div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="false"data-rel="JAVA"><figure class="iseeu highlight /java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TestHelloWorld</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        HelloWorld_PortType helloWorld_portType = <span class="keyword">new</span> HelloWorldServiceLocator().getHelloWorld();</span><br><span class="line">        String result = helloWorld_portType.sayHelloWorldFrom(<span class="string">"Charles"</span>);</span><br><span class="line">        System.out.println(result);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div></p><p>运行TestHelloWorld，可见控制台打印：Hello, world, from Charles。<br>至此，IDEA下简单Web Service项目的搭建就完成了。 </p>]]></content>
      
      
      <categories>
          
          <category> Java </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Java </tag>
            
            <tag> Web Service </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Myeclipse搭建Web Service项目</title>
      <link href="/2017/12/25/MyEclipse%E6%90%AD%E5%BB%BAWeb%20Service%E9%A1%B9%E7%9B%AE/"/>
      <url>/2017/12/25/MyEclipse%E6%90%AD%E5%BB%BAWeb%20Service%E9%A1%B9%E7%9B%AE/</url>
      
        <content type="html"><![CDATA[<blockquote><p>本篇博客，小博将记录MyEclipse下，简单Web Service项目搭建的详细过程</p></blockquote><a id="more"></a><blockquote><p><a href="http://download.csdn.net/download/u012102104/10172395" target="_blank" rel="noopener">点击下载完整代码</a></p></blockquote><p>① 创建Web Service Project。<br><img src="https://raw.githubusercontent.com/chung567115/chung567115.github.io/hexo-blog/blog-img/6-1.png" alt="1"></p><p>② 新建类Hello<br><img src="https://raw.githubusercontent.com/chung567115/chung567115.github.io/hexo-blog/blog-img/6-2.png" alt="6"></p><p>目录结构如下图<br><img src="https://raw.githubusercontent.com/chung567115/chung567115.github.io/hexo-blog/blog-img/6-3.png" alt="2"></p><p>代码如下</p><div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="false"data-rel="JAVA"><figure class="iseeu highlight /java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@WebService</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Hello</span> </span>&#123;</span><br><span class="line"><span class="function"><span class="keyword">public</span> String <span class="title">sayHello</span><span class="params">(String name)</span> </span>&#123;</span><br><span class="line">System.out.println(<span class="string">"Method sayHello execute"</span>);</span><br><span class="line"><span class="keyword">return</span> <span class="string">"Hello "</span> + name;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">String address = <span class="string">"http://localhost:8080/Demo/Hello"</span>;</span><br><span class="line">Hello hello = <span class="keyword">new</span> Hello();</span><br><span class="line">Endpoint.publish(address, hello);</span><br><span class="line">System.out.println(<span class="string">"Web Service publish success"</span>);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div><p>③运行Hello.java(Run As Java Application)，可以看到控制台输出：Web Service publish success，可见启动成功。浏览器访问<a href="http://localhost:8080/Demo/Hello?wsdl" target="_blank" rel="noopener">http://localhost:8080/Demo/Hello?wsdl</a>，可以看到如下界面。<br><img src="https://raw.githubusercontent.com/chung567115/chung567115.github.io/hexo-blog/blog-img/6-4.png" alt="3"></p><p>④新建另一个Web Service Project，选中项目，点击工具栏按钮–&gt;New Web Service Client<br><img src="https://raw.githubusercontent.com/chung567115/chung567115.github.io/hexo-blog/blog-img/6-5.png" alt="7"></p><p>⑤选择JAX-WS，Next<br><img src="https://raw.githubusercontent.com/chung567115/chung567115.github.io/hexo-blog/blog-img/6-6.png" alt="5"></p><p>⑥填写WSDL文件URL(即前面服务端测试的url)，Next<br><img src="https://raw.githubusercontent.com/chung567115/chung567115.github.io/hexo-blog/blog-img/6-7.png" alt="4"></p><p>⑦进度条加载完后，点击Finish。<br><img src="https://raw.githubusercontent.com/chung567115/chung567115.github.io/hexo-blog/blog-img/6-8.png" alt="8"></p><p>⑧这时候可以看到，目录下自动创建了如下一些文件<br><img src="https://raw.githubusercontent.com/chung567115/chung567115.github.io/hexo-blog/blog-img/6-9.png" alt="9"></p><p>⑨新建TestHello.java文件调用服务端内容，代码如下</p><div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="false"data-rel="JAVA"><figure class="iseeu highlight /java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TestHello</span> </span>&#123;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">Hello hello = <span class="keyword">new</span> HelloService().getHelloPort();</span><br><span class="line">String result = hello.sayHello(<span class="string">"Charles"</span>);</span><br><span class="line">System.out.println(result);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div><p>⑩运行TestHello.java，可以看到控制台输出：Hello Charles。可见调用成功。</p><p>至此，简单的Web Service工程的服务端和客户端就搭建完成了。</p>]]></content>
      
      
      <categories>
          
          <category> Java </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Java </tag>
            
            <tag> Web Service </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Spring Boot项目搭建极简教程</title>
      <link href="/2017/12/24/Spring%20Boot%E9%A1%B9%E7%9B%AE%E6%90%AD%E5%BB%BA%E6%9E%81%E7%AE%80%E6%95%99%E7%A8%8B/"/>
      <url>/2017/12/24/Spring%20Boot%E9%A1%B9%E7%9B%AE%E6%90%AD%E5%BB%BA%E6%9E%81%E7%AE%80%E6%95%99%E7%A8%8B/</url>
      
        <content type="html"><![CDATA[<blockquote><p>从今天开始，小博将撰写Spring Boot系列博客</p></blockquote><a id="more"></a><p>使用的开发环境是：</p><ul><li>IDEA 2017.2</li><li>JDK 1.8</li><li>Spring Boot 1.5.9</li></ul><p>将涉及到的技术栈有：</p><ul><li>JPA</li><li>MyBatis</li><li>Thymeleaf</li><li>Druid</li><li>Redis</li><li>RabbitMQ</li><li>MongoDB</li><li>Quartz</li></ul><p>第一篇主题为项目搭建及简单开发与测试，<a href="http://download.csdn.net/download/u012102104/10172445" target="_blank" rel="noopener">点击下载完整代码</a></p><p>①新建项目<br><img src="https://raw.githubusercontent.com/chung567115/chung567115.github.io/hexo-blog/blog-img/5-1.png" alt="1"></p><p>②选择Spring Initializr<br><img src="https://raw.githubusercontent.com/chung567115/chung567115.github.io/hexo-blog/blog-img/5-2.png" alt="2"></p><p>③填写项目相关信息（本系列博客以Maven为例）<br><img src="https://raw.githubusercontent.com/chung567115/chung567115.github.io/hexo-blog/blog-img/5-3.png" alt="3"></p><p>④选择依赖的核心组件DevTools<br><img src="https://raw.githubusercontent.com/chung567115/chung567115.github.io/hexo-blog/blog-img/5-4.png" alt="4"></p><p>⑤选择依赖的Web组件Web<br><img src="https://raw.githubusercontent.com/chung567115/chung567115.github.io/hexo-blog/blog-img/5-5.png" alt="5"></p><p>⑥填写项目名并创建新项目<br><img src="https://raw.githubusercontent.com/chung567115/chung567115.github.io/hexo-blog/blog-img/5-6.png" alt="6"></p><p>⑦src/main/java为源码文件包，src/mian/resources为配置文件包，src/test/java为测试程序包<br><img src="https://raw.githubusercontent.com/chung567115/chung567115.github.io/hexo-blog/blog-img/5-7.png" alt="7"></p><p>⑧一般来说，Spring Boot项目主要包括如下几个包和文件（图中可见的Java文件和properties文件均自动生成）<br>com.chung.springbootdemo包下：</p><ul><li>comm包：公共类，工具类等</li><li>controller包：控制器</li><li>entity包：实体类</li><li>repository包：数据库访问</li><li>service：业务</li><li>ServletInitializer.java文件：Servlet容器初始化</li><li>SpringbootdemoApplication.java文件：项目的启动类</li></ul><p>resources包下：</p><ul><li>static包：静态资源如JS、CSS、图片等</li><li>templates包：页面模板</li><li>application.properties文件：项目配置信息</li></ul><p>最外层的pom.xml文件用于配置项目依赖包及其他配置<br><img src="https://raw.githubusercontent.com/chung567115/chung567115.github.io/hexo-blog/blog-img/5-8.png" alt="8"></p><p> 至此，一个Spring Boot项目搭建好了。下面进项简单的Web开发及测试。</p><p> 1 简单Web开发：HelloWorldController内容如下，其中@RestController意为Controller内的方法都以json格式输出，如果为@Controller则代表输出为页面。因此不用再另外配置Jackson。写完HelloWorldController后，运行主程序（本例中为SpringbootdemoApplication.java），打开浏览器访问<a href="http://localhost:8080/hello?name=charles，即可看到内容：Hello" target="_blank" rel="noopener">http://localhost:8080/hello?name=charles，即可看到内容：Hello</a> World! charles。</p><p> 注：如果遇到Process finished with exit code 0，可以将pom.xml文件中这段注释<br><div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="false"data-rel="XML"><figure class="iseeu highlight /xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-tomcat<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">scope</span>&gt;</span>provided<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure></div></p><div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="false"data-rel="JAVA"><figure class="iseeu highlight /java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@RestController</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">HelloWorldController</span> </span>&#123;</span><br><span class="line">    <span class="meta">@RequestMapping</span>(value = <span class="string">"/hello"</span>)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">helloWorld</span><span class="params">(String name)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">"Hello World! "</span> + name;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div><hr><p>2 单元测试：在Spring Boot中，可使用MockMvc进行web测试，MockMvc内置了很多工具类和方法，可以模拟get以及post请求，并且打印返回的内容。其中在类上加@SpringBootTest，系统会自动加载SpringBoot容器，在平时我们就可以注入bean来做局部业务测试。MockMvcRequestBuilders可以进行get或post请求，使用print()方法会将请求及相应的过程都打印出来（见以下第二段代码块内容），其中 Body = Hello World! XXX ，可见请求成功。</p><div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="false"data-rel="JAVA"><figure class="iseeu highlight /java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@SpringBootTest</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TestHello</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> MockMvc mockMvc;</span><br><span class="line">    <span class="meta">@Before</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setUp</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        mockMvc = MockMvcBuilders.standaloneSetup(<span class="keyword">new</span> HelloWorldController()).build();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testHello</span><span class="params">()</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        MockHttpServletRequestBuilder accept = MockMvcRequestBuilders</span><br><span class="line">        .post(<span class="string">"/hello?name=XXX"</span>).accept(MediaType.APPLICATION_JSON_UTF8);</span><br><span class="line">        mockMvc.perform(accept).andDo(print());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div><div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="false"data-rel="PLAIN"><figure class="iseeu highlight /plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line">MockHttpServletRequest:</span><br><span class="line">      HTTP Method = POST</span><br><span class="line">      Request URI = /hello</span><br><span class="line">       Parameters = &#123;name=[XXX]&#125;</span><br><span class="line">          Headers = &#123;Accept=[application/json;charset=UTF-8]&#125;</span><br><span class="line">Handler:</span><br><span class="line">             Type = com.chung.springbootdemo.controller.HelloWorldController</span><br><span class="line">           Method = public java.lang.String com.chung.springbootdemo.controller</span><br><span class="line">           .HelloWorldController.helloWorld(java.lang.String)</span><br><span class="line">Async:</span><br><span class="line">    Async started = false</span><br><span class="line">     Async result = null</span><br><span class="line">Resolved Exception:</span><br><span class="line">             Type = null</span><br><span class="line">ModelAndView:</span><br><span class="line">        View name = null</span><br><span class="line">             View = null</span><br><span class="line">            Model = null</span><br><span class="line">FlashMap:</span><br><span class="line">       Attributes = null</span><br><span class="line">MockHttpServletResponse:</span><br><span class="line">           Status = 200</span><br><span class="line">    Error message = null</span><br><span class="line">          Headers = &#123;Content-Type=[application/json;charset=UTF-8], Content-Length=[16]&#125;</span><br><span class="line">     Content type = application/json;charset=UTF-8</span><br><span class="line">             Body = Hello World! XXX</span><br><span class="line">    Forwarded URL = null</span><br><span class="line">   Redirected URL = null</span><br><span class="line">          Cookies = []</span><br><span class="line">Process finished with exit code 0</span><br></pre></td></tr></table></figure></div><hr><p> 3 热部署：可能有时候一丁点改动都需要重启项目，这个时候，我们可以使用SpringBoot的热部署特性（需要依赖主键Devtools）。主要有以下四个步骤，①在dependency中加入optional属性，并设为true。②在plugin中配置另外一个属性fork，并设为true。③在IDEA中勾选Build project automatically，如下第一张图。④按快捷键ctrl+shift+a输入Registry，勾选选项compile.automake.allow.when.app.running，如下第一张和第二章图。<br>至此，已经开启了SpringBoot热部署，可以尝试修改代码，发现刷新页面即可，再也不需要重新部署代码了。</p><div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="false"data-rel="XML"><figure class="iseeu highlight /xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-devtools<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">optional</span>&gt;</span>true<span class="tag">&lt;/<span class="name">optional</span>&gt;</span><span class="comment">&lt;!--加入这行--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">scope</span>&gt;</span>runtime<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure></div><div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="false"data-rel="XML"><figure class="iseeu highlight /xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">build</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">plugins</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">plugin</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-maven-plugin<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!--加入以下三行--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">configuration</span>&gt;</span></span><br><span class="line">                   <span class="tag">&lt;<span class="name">fork</span>&gt;</span>true<span class="tag">&lt;/<span class="name">fork</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">configuration</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">plugin</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">plugins</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">build</span>&gt;</span></span><br></pre></td></tr></table></figure></div><p> <img src="https://raw.githubusercontent.com/chung567115/chung567115.github.io/hexo-blog/blog-img/5-9.png" alt="9"></p><p> <img src="https://raw.githubusercontent.com/chung567115/chung567115.github.io/hexo-blog/blog-img/5-10.png" alt="10"></p><p> <img src="https://raw.githubusercontent.com/chung567115/chung567115.github.io/hexo-blog/blog-img/5-11.png" alt="11"></p><p>&emsp;&emsp;至此，就完成了Spring Boot项目的搭建和简单Web开发与测试、以及设置IDEA的热部署。可以看出，使用Spring Boot可以非常方便快速的搭建项目，而不用关心框架之间的兼容性、版本适用性等各种问题。想使用任何东西，仅仅添加一个配置就可以，所以Spring Boot非常适合构建微服务。</p>]]></content>
      
      
      <categories>
          
          <category> Spring Boot </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Java </tag>
            
            <tag> Spring Boot </tag>
            
            <tag> 微服务 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>IDEA创建Spring SpringMVC MyBatis整合Maven项目，并提交至Github</title>
      <link href="/2017/12/10/IDEA%E5%88%9B%E5%BB%BASpring%20SpringMVC%20MyBatis%E6%95%B4%E5%90%88Maven%E9%A1%B9%E7%9B%AE%EF%BC%8C%E5%B9%B6%E6%8F%90%E4%BA%A4%E8%87%B3Github/"/>
      <url>/2017/12/10/IDEA%E5%88%9B%E5%BB%BASpring%20SpringMVC%20MyBatis%E6%95%B4%E5%90%88Maven%E9%A1%B9%E7%9B%AE%EF%BC%8C%E5%B9%B6%E6%8F%90%E4%BA%A4%E8%87%B3Github/</url>
      
        <content type="html"><![CDATA[<blockquote><p>本文小博将写一篇IDEA创建SSM+Maven整合项目，并提交至Github的教程</p></blockquote><a id="more"></a><p>①新建Maven项目，如下图顺序。第三张图片中，添加一个参数archetypeCatalog=internal，表示仅使用内部元数据，不用这个参数创建Maven项目会很慢哦。其他起名字什么的大家大家随意，就不一一解释了。<br><img src="https://raw.githubusercontent.com/chung567115/chung567115.github.io/hexo-blog/blog-img/4-1.png" alt="1"><br><img src="https://raw.githubusercontent.com/chung567115/chung567115.github.io/hexo-blog/blog-img/4-2.png" alt="2"><br><img src="https://raw.githubusercontent.com/chung567115/chung567115.github.io/hexo-blog/blog-img/4-3.png" alt="3"><br><img src="https://raw.githubusercontent.com/chung567115/chung567115.github.io/hexo-blog/blog-img/4-4.png" alt="4"></p><p>②将Java文件夹标记为源码目录，然后创建各种MVC模式对应的包<br><img src="https://raw.githubusercontent.com/chung567115/chung567115.github.io/hexo-blog/blog-img/4-5.png" alt="5"></p><p>③如下图，创建配置文件，然后进行各种配置文件的编写。后面贴出我的代码，篇幅太大就不逐一解释了，以后有时间再详细拉出来写写。<br><img src="https://raw.githubusercontent.com/chung567115/chung567115.github.io/hexo-blog/blog-img/4-6.png" alt="7"></p><ul><li><p>pom.xml文件</p><div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="false"data-rel="XML"><figure class="iseeu highlight /xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">project</span> <span class="attr">xmlns</span>=<span class="string">"http://maven.apache.org/POM/4.0.0"</span> </span></span><br><span class="line"><span class="tag"><span class="attr">xmlns:xsi</span>=<span class="string">"http://www.w3.org/2001/XMLSchema-instance"</span></span></span><br><span class="line"><span class="tag"><span class="attr">xsi:schemaLocation</span>=<span class="string">"http://maven.apache.org/POM/4.0.0 </span></span></span><br><span class="line"><span class="tag"><span class="string">http://maven.apache.org/maven-v4_0_0.xsd"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">modelVersion</span>&gt;</span>4.0.0<span class="tag">&lt;/<span class="name">modelVersion</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>xin.chung<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>undergraduate<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">packaging</span>&gt;</span>war<span class="tag">&lt;/<span class="name">packaging</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.0-SNAPSHOT<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">name</span>&gt;</span>undergraduate<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">url</span>&gt;</span>http://maven.apache.org<span class="tag">&lt;/<span class="name">url</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">properties</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">project.build.sourceEncoding</span>&gt;</span>UTF-8<span class="tag">&lt;/<span class="name">project.build.sourceEncoding</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">project.reporting.outputEncoding</span>&gt;</span>UTF-8<span class="tag">&lt;/<span class="name">project.reporting.outputEncoding</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- JDK版本号 --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">maven.compiler.source</span>&gt;</span>1.8<span class="tag">&lt;/<span class="name">maven.compiler.source</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">maven.compiler.target</span>&gt;</span>1.8<span class="tag">&lt;/<span class="name">maven.compiler.target</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- spring版本号 --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">spring.version</span>&gt;</span>4.2.5.RELEASE<span class="tag">&lt;/<span class="name">spring.version</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- mybatis版本号 --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">mybatis.version</span>&gt;</span>3.2.8<span class="tag">&lt;/<span class="name">mybatis.version</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- mysql驱动版本号 --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">mysql-driver.version</span>&gt;</span>5.1.29<span class="tag">&lt;/<span class="name">mysql-driver.version</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- log4j日志包版本号 --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">slf4j.version</span>&gt;</span>1.7.18<span class="tag">&lt;/<span class="name">slf4j.version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">log4j.version</span>&gt;</span>1.2.17<span class="tag">&lt;/<span class="name">log4j.version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">properties</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- 添加jstl依赖 --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>jstl<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>jstl<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.2<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>javax<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>javaee-api<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">version</span>&gt;</span>7.0<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- 添加junit4依赖 --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>junit<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>junit<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">version</span>&gt;</span>4.11<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">            <span class="comment">&lt;!-- 指定范围，在测试时才会加载 --&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">scope</span>&gt;</span>test<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- 添加spring核心依赖 --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-core<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">version</span>&gt;</span>$&#123;spring.version&#125;<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-web<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">version</span>&gt;</span>$&#123;spring.version&#125;<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-oxm<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">version</span>&gt;</span>$&#123;spring.version&#125;<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-tx<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">version</span>&gt;</span>$&#123;spring.version&#125;<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-jdbc<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">version</span>&gt;</span>$&#123;spring.version&#125;<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-webmvc<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">version</span>&gt;</span>$&#123;spring.version&#125;<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-context<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">version</span>&gt;</span>$&#123;spring.version&#125;<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-context-support<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">version</span>&gt;</span>$&#123;spring.version&#125;<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-aop<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">version</span>&gt;</span>$&#123;spring.version&#125;<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-test<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">version</span>&gt;</span>$&#123;spring.version&#125;<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- 添加mybatis依赖 --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.mybatis<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>mybatis<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">version</span>&gt;</span>$&#123;mybatis.version&#125;<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- 添加mybatis/spring整合包依赖 --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.mybatis<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>mybatis-spring<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.2.2<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- 添加mysql驱动依赖 --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>mysql<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>mysql-connector-java<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">version</span>&gt;</span>$&#123;mysql-driver.version&#125;<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- 添加数据库连接池依赖 --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>commons-dbcp<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>commons-dbcp<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.2.2<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- 添加fastjson --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.alibaba<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>fastjson<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.1.41<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- 添加日志相关jar包 --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>log4j<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>log4j<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">version</span>&gt;</span>$&#123;log4j.version&#125;<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.slf4j<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>slf4j-api<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">version</span>&gt;</span>$&#123;slf4j.version&#125;<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.slf4j<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>slf4j-log4j12<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">version</span>&gt;</span>$&#123;slf4j.version&#125;<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- log end --&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- 映入JSON --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.codehaus.jackson<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>jackson-mapper-asl<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.9.13<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.fasterxml.jackson.core<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>jackson-core<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.8.0<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.fasterxml.jackson.core<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>jackson-databind<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.8.0<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>commons-fileupload<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>commons-fileupload<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.3.1<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>commons-io<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>commons-io<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.4<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>commons-codec<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>commons-codec<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.9<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">build</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">finalName</span>&gt;</span>undergraduate<span class="tag">&lt;/<span class="name">finalName</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">build</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">project</span>&gt;</span></span><br></pre></td></tr></table></figure></div></li><li><p>web.xml文件</p><div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="false"data-rel="XML"><figure class="iseeu highlight /xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE web-app PUBLIC</span></span><br><span class="line"><span class="meta">        "-//Sun Microsystems, Inc.//DTD Web Application 2.3//EN"</span></span><br><span class="line"><span class="meta">        "http://java.sun.com/dtd/web-app_2_3.dtd" &gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">web-app</span> <span class="attr">xmlns</span>=<span class="string">"http://java.sun.com/xml/ns/javaee"</span></span></span><br><span class="line"><span class="tag">         <span class="attr">xmlns:xsi</span>=<span class="string">"http://www.w3.org/2001/XMLSchema-instance"</span></span></span><br><span class="line"><span class="tag">         <span class="attr">xsi:schemaLocation</span>=<span class="string">"http://java.sun.com/xml/ns/javaee</span></span></span><br><span class="line"><span class="tag"><span class="string">              http://java.sun.com/xml/ns/javaee/web-app_3_0.xsd"</span></span></span><br><span class="line"><span class="tag">         <span class="attr">version</span>=<span class="string">"3.0"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">display-name</span>&gt;</span>undergraduate<span class="tag">&lt;/<span class="name">display-name</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">context-param</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">param-name</span>&gt;</span>contextConfigLocation<span class="tag">&lt;/<span class="name">param-name</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">param-value</span>&gt;</span>classpath:spring-mybatis.xml<span class="tag">&lt;/<span class="name">param-value</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">context-param</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">context-param</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">param-name</span>&gt;</span>log4jConfigLocation<span class="tag">&lt;/<span class="name">param-name</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">param-value</span>&gt;</span>classpath:log4j.properties<span class="tag">&lt;/<span class="name">param-value</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">context-param</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!-- 编码过滤器 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">filter</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">filter-name</span>&gt;</span>encodingFilter<span class="tag">&lt;/<span class="name">filter-name</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">filter-class</span>&gt;</span>org.springframework.web.filter.CharacterEncodingFilter<span class="tag">&lt;/<span class="name">filter-class</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">init-param</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">param-name</span>&gt;</span>encoding<span class="tag">&lt;/<span class="name">param-name</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">param-value</span>&gt;</span>UTF-8<span class="tag">&lt;/<span class="name">param-value</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">init-param</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">init-param</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">param-name</span>&gt;</span>forceEncoding<span class="tag">&lt;/<span class="name">param-name</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">param-value</span>&gt;</span>true<span class="tag">&lt;/<span class="name">param-value</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">init-param</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">filter</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">filter-mapping</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">filter-name</span>&gt;</span>encodingFilter<span class="tag">&lt;/<span class="name">filter-name</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">url-pattern</span>&gt;</span>/*<span class="tag">&lt;/<span class="name">url-pattern</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">filter-mapping</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!-- spring监听器 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">listener</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">listener-class</span>&gt;</span></span><br><span class="line">        org.springframework.web.context.ContextLoaderListener</span><br><span class="line">        <span class="tag">&lt;/<span class="name">listener-class</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">listener</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!-- 防止spring内存溢出监听器，比如quartz --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">listener</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">listener-class</span>&gt;</span></span><br><span class="line">        org.springframework.web.util.IntrospectorCleanupListener</span><br><span class="line">        <span class="tag">&lt;/<span class="name">listener-class</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">listener</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!-- spring mvc servlet--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">servlet</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">servlet-name</span>&gt;</span>SpringMVC<span class="tag">&lt;/<span class="name">servlet-name</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">servlet-class</span>&gt;</span></span><br><span class="line">        org.springframework.web.servlet.DispatcherServlet</span><br><span class="line">        <span class="tag">&lt;/<span class="name">servlet-class</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">init-param</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">param-name</span>&gt;</span>contextConfigLocation<span class="tag">&lt;/<span class="name">param-name</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">param-value</span>&gt;</span>classpath:spring-mvc.xml<span class="tag">&lt;/<span class="name">param-value</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">init-param</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">load-on-startup</span>&gt;</span>1<span class="tag">&lt;/<span class="name">load-on-startup</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">async-supported</span>&gt;</span>true<span class="tag">&lt;/<span class="name">async-supported</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">servlet</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">servlet-mapping</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">servlet-name</span>&gt;</span>SpringMVC<span class="tag">&lt;/<span class="name">servlet-name</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- 此处也可以配置成 *.do 形式 --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">url-pattern</span>&gt;</span>*.action<span class="tag">&lt;/<span class="name">url-pattern</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">servlet-mapping</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">welcome-file-list</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">welcome-file</span>&gt;</span>login.jsp<span class="tag">&lt;/<span class="name">welcome-file</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">welcome-file-list</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!-- session配置 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">session-config</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">session-timeout</span>&gt;</span>20<span class="tag">&lt;/<span class="name">session-timeout</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">session-config</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">web-app</span>&gt;</span></span><br></pre></td></tr></table></figure></div></li><li><p>jdbc.properties文件</p><div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="false"data-rel="PLAIN"><figure class="iseeu highlight /plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">driverClass=com.mysql.jdbc.Driver</span><br><span class="line">#以下三行根据自己的数据库来设置</span><br><span class="line">jdbcUrl=jdbc:mysql://localhost:3306/graduate?useUnicode=true&amp;characterEncoding=utf-8</span><br><span class="line">username=root</span><br><span class="line">password=root</span><br><span class="line">#定义初始连接数</span><br><span class="line">initialSize=0</span><br><span class="line">#定义最大连接数</span><br><span class="line">maxActive=20</span><br><span class="line">#定义最大空闲</span><br><span class="line">maxIdle=20</span><br><span class="line">#定义最小空闲</span><br><span class="line">minIdle=1</span><br><span class="line">#定义最长等待时间</span><br><span class="line">maxWait=3600</span><br></pre></td></tr></table></figure></div></li><li><p>log4j.properties文件，这个根据自己个人情况来哦</p><div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="false"data-rel="PLAIN"><figure class="iseeu highlight /plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">log4j.rootLogger=INFO,Console,File</span><br><span class="line">#控制台日志</span><br><span class="line">log4j.appender.Console=org.apache.log4j.ConsoleAppender</span><br><span class="line">log4j.appender.Console.Target=System.out</span><br><span class="line">log4j.appender.Console.layout=org.apache.log4j.PatternLayout</span><br><span class="line">log4j.appender.Console.layout.ConversionPattern=</span><br><span class="line">[%p][%t][%d&#123;yyyy-MM-dd HH\:mm\:ss&#125;][%C] - %m%n</span><br><span class="line">#普通文件日志</span><br><span class="line">log4j.appender.File=org.apache.log4j.RollingFileAppender</span><br><span class="line">log4j.appender.File.File=logs/ssm.log</span><br><span class="line">log4j.appender.File.MaxFileSize=10MB</span><br><span class="line">#输出日志，如果换成DEBUG表示输出DEBUG以上级别日志</span><br><span class="line">log4j.appender.File.Threshold=ALL</span><br><span class="line">log4j.appender.File.layout=org.apache.log4j.PatternLayout</span><br><span class="line">log4j.appender.File.layout.ConversionPattern=</span><br><span class="line">[%p][%t][%d&#123;yyyy-MM-dd HH\:mm\:ss&#125;][%C] - %m%n</span><br><span class="line">#设置输出日志文件编码</span><br><span class="line">log4j.appender.File.Encoding=UTF-8</span><br></pre></td></tr></table></figure></div></li><li><p>spring-mvc.xml文件，注意自己建立的包和我教程里包的不同</p><div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="false"data-rel="XML"><figure class="iseeu highlight /xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version="1.0" encoding="UTF-8"?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">beans</span> <span class="attr">xmlns</span>=<span class="string">"http://www.springframework.org/schema/beans"</span> </span></span><br><span class="line"><span class="tag"><span class="attr">xmlns:xsi</span>=<span class="string">"http://www.w3.org/2001/XMLSchema-instance"</span></span></span><br><span class="line"><span class="tag"><span class="attr">xmlns:context</span>=<span class="string">"http://www.springframework.org/schema/context"</span></span></span><br><span class="line"><span class="tag"><span class="attr">xsi:schemaLocation</span>=<span class="string">"http://www.springframework.org/schema/beans</span></span></span><br><span class="line"><span class="tag"><span class="string">http://www.springframework.org/schema/beans/spring-beans-4.0.xsd</span></span></span><br><span class="line"><span class="tag"><span class="string">http://www.springframework.org/schema/context</span></span></span><br><span class="line"><span class="tag"><span class="string">http://www.springframework.org/schema/context/spring-context-4.0.xsd"</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!-- 自动扫描  @Controller--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">context:component-scan</span> <span class="attr">base-package</span>=<span class="string">"xin.chung.undergraduate.controller"</span>/&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!--避免IE执行AJAX时，返回JSON出现下载文件 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"mappingJacksonHttpMessageConverter"</span> </span></span><br><span class="line"><span class="tag"><span class="attr">.MappingJackson2HttpMessageConverter</span>"&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"supportedMediaTypes"</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">list</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">value</span>&gt;</span>application/json;charset=UTF-8<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">list</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 启动SpringMVC的注解功能，完成请求和注解POJO的映射 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">class</span>=<span class="string">"org.springframework.web.servlet.mvc.annotation</span></span></span><br><span class="line"><span class="tag"><span class="string">    .AnnotationMethodHandlerAdapter"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"messageConverters"</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">list</span>&gt;</span></span><br><span class="line">                <span class="comment">&lt;!-- JSON转换器 --&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">ref</span> <span class="attr">bean</span>=<span class="string">"mappingJacksonHttpMessageConverter"</span>/&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">list</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!--定义跳转的文件的前后缀 ，视图模式配置--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">class</span>=<span class="string">"org.springframework.web.servlet.view</span></span></span><br><span class="line"><span class="tag"><span class="string">    .InternalResourceViewResolver"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"prefix"</span> <span class="attr">value</span>=<span class="string">"/WEB-INF/view/"</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"suffix"</span> <span class="attr">value</span>=<span class="string">".jsp"</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">beans</span>&gt;</span></span><br></pre></td></tr></table></figure></div></li><li><p>spring-mybatis.xml文件，同样注意自己建立的包和我教程里包的不同</p><div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="false"data-rel="XML"><figure class="iseeu highlight /xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version="1.0" encoding="UTF-8"?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">beans</span> <span class="attr">xmlns</span>=<span class="string">"http://www.springframework.org/schema/beans"</span></span></span><br><span class="line"><span class="tag"><span class="attr">xmlns:xsi</span>=<span class="string">"http://www.w3.org/2001/XMLSchema-instance"</span></span></span><br><span class="line"><span class="tag"><span class="attr">xmlns:context</span>=<span class="string">"http://www.springframework.org/schema/context"</span> </span></span><br><span class="line"><span class="tag"><span class="attr">xmlns:tx</span>=<span class="string">"http://www.springframework.org/schema/tx"</span></span></span><br><span class="line"><span class="tag"><span class="attr">xsi:schemaLocation</span>=<span class="string">"http://www.springframework.org/schema/beans</span></span></span><br><span class="line"><span class="tag"><span class="string">http://www.springframework.org/schema/beans/spring-beans-3.1.xsd</span></span></span><br><span class="line"><span class="tag"><span class="string">http://www.springframework.org/schema/context</span></span></span><br><span class="line"><span class="tag"><span class="string">http://www.springframework.org/schema/context/spring-context-3.1.xsd</span></span></span><br><span class="line"><span class="tag"><span class="string">http://www.springframework.org/schema/tx</span></span></span><br><span class="line"><span class="tag"><span class="string">http://www.springframework.org/schema/tx/spring-tx.xsd"</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!-- 自动扫描 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">context:component-scan</span> <span class="attr">base-package</span>=<span class="string">"xin.chung.undergraduate"</span>/&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!-- 第一种方式：加载一个properties文件 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"propertyConfigurer"</span></span></span><br><span class="line"><span class="tag"> <span class="attr">class</span>=<span class="string">"org.springframework.beans.factory.config.PropertyPlaceholderConfigurer"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"location"</span> <span class="attr">value</span>=<span class="string">"classpath:jdbc.properties"</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 第二种方式：加载多个properties文件</span></span><br><span class="line"><span class="comment">    &lt;bean id="configProperties"     </span></span><br><span class="line"><span class="comment">    class="org.springframework.beans.factory.config.PropertiesFactoryBean"&gt;</span></span><br><span class="line"><span class="comment">        &lt;property name="locations"&gt;</span></span><br><span class="line"><span class="comment">            &lt;list&gt;</span></span><br><span class="line"><span class="comment">                &lt;value&gt;classpath:jdbc.properties&lt;/value&gt;</span></span><br><span class="line"><span class="comment">                &lt;value&gt;classpath:common.properties&lt;/value&gt;</span></span><br><span class="line"><span class="comment">            &lt;/list&gt;</span></span><br><span class="line"><span class="comment">        &lt;/property&gt;</span></span><br><span class="line"><span class="comment">        &lt;property name="fileEncoding" value="UTF-8"/&gt;</span></span><br><span class="line"><span class="comment">    &lt;/bean&gt;</span></span><br><span class="line"><span class="comment">    &lt;bean id="propertyConfigurer" </span></span><br><span class="line"><span class="comment">    class="org.springframework.beans.factory.config.PreferencesPlaceholderConfigurer"&gt;</span></span><br><span class="line"><span class="comment">        &lt;property name="properties" ref="configProperties"/&gt;</span></span><br><span class="line"><span class="comment">    &lt;/bean&gt;</span></span><br><span class="line"><span class="comment">    --&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!-- 配置数据源 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"dataSource"</span> <span class="attr">class</span>=<span class="string">"org.apache.commons.dbcp.BasicDataSource"</span></span></span><br><span class="line"><span class="tag">          <span class="attr">destroy-method</span>=<span class="string">"close"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"driverClassName"</span> <span class="attr">value</span>=<span class="string">"$&#123;driverClass&#125;"</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"url"</span> <span class="attr">value</span>=<span class="string">"$&#123;jdbcUrl&#125;"</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"username"</span> <span class="attr">value</span>=<span class="string">"$&#123;username&#125;"</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"password"</span> <span class="attr">value</span>=<span class="string">"$&#123;password&#125;"</span>/&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- 初始化连接大小 --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"initialSize"</span> <span class="attr">value</span>=<span class="string">"$&#123;initialSize&#125;"</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- 连接池最大数量 --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"maxActive"</span> <span class="attr">value</span>=<span class="string">"$&#123;maxActive&#125;"</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- 连接池最大空闲 --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"maxIdle"</span> <span class="attr">value</span>=<span class="string">"$&#123;maxIdle&#125;"</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- 连接池最小空闲 --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"minIdle"</span> <span class="attr">value</span>=<span class="string">"$&#123;minIdle&#125;"</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- 获取连接最大等待时间 --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"maxWait"</span> <span class="attr">value</span>=<span class="string">"$&#123;maxWait&#125;"</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!-- mybatis和spring完美整合，不需要mybatis的配置映射文件 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"sqlSessionFactory"</span> <span class="attr">class</span>=<span class="string">"org.mybatis.spring.SqlSessionFactoryBean"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"dataSource"</span> <span class="attr">ref</span>=<span class="string">"dataSource"</span>/&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- 自动扫描mapping.xml文件 --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"mapperLocations"</span> <span class="attr">value</span>=<span class="string">"classpath:mapper/*.xml"</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!-- DAO接口所在包名，Spring会自动查找其下的类 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">class</span>=<span class="string">"org.mybatis.spring.mapper.MapperScannerConfigurer"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"basePackage"</span> <span class="attr">value</span>=<span class="string">"xin.chung.undergraduate.dao"</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"sqlSessionFactoryBeanName"</span> <span class="attr">value</span>=<span class="string">"sqlSessionFactory"</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!-- (事务管理)transactionManager, use JtaTransactionManager for global tx --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"transactionManager"</span> </span></span><br><span class="line"><span class="tag"> <span class="attr">class</span>=<span class="string">"org.springframework.jdbc.datasource.DataSourceTransactionManager"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"dataSource"</span> <span class="attr">ref</span>=<span class="string">"dataSource"</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!-- (事务管理)transaction manager, use JtaTransactionManager for global tx --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">tx:annotation-driven</span> <span class="attr">transaction-manager</span>=<span class="string">"transactionManager"</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">beans</span>&gt;</span></span><br></pre></td></tr></table></figure></div></li></ul><p>④发布到Tomcat，开启服务器并运行调试，步骤如下图，其中各种命名具体情况具体对待。<br><img src="https://raw.githubusercontent.com/chung567115/chung567115.github.io/hexo-blog/blog-img/4-7.png" alt="8"><br><img src="https://raw.githubusercontent.com/chung567115/chung567115.github.io/hexo-blog/blog-img/4-8.png" alt="9"><br><img src="https://raw.githubusercontent.com/chung567115/chung567115.github.io/hexo-blog/blog-img/4-9.png" alt="10"></p><p>⑤编写下列文件，并开启Tomcat测试运行项目。</p><ul><li><p>resources\mapper\TestMapper.xml</p><div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="false"data-rel="XML"><figure class="iseeu highlight /xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version="1.0" encoding="UTF-8"?&gt;</span></span><br><span class="line"><span class="meta">&lt;!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"</span></span><br><span class="line"><span class="meta"> "http://mybatis.org/dtd/mybatis-3-mapper.dtd" &gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">mapper</span> <span class="attr">namespace</span>=<span class="string">"xin.chung.undergraduate.dao.ITestDao"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">resultMap</span> <span class="attr">id</span>=<span class="string">"TestCMap"</span> <span class="attr">type</span>=<span class="string">"xin.chung.undergraduate.model.po.TestC"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">id</span> <span class="attr">column</span>=<span class="string">"id"</span> <span class="attr">property</span>=<span class="string">"id"</span> <span class="attr">jdbcType</span>=<span class="string">"BIGINT"</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">result</span> <span class="attr">column</span>=<span class="string">"username"</span> <span class="attr">property</span>=<span class="string">"username"</span> <span class="attr">jdbcType</span>=<span class="string">"VARCHAR"</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">result</span> <span class="attr">column</span>=<span class="string">"password"</span> <span class="attr">property</span>=<span class="string">"password"</span> <span class="attr">jdbcType</span>=<span class="string">"VARCHAR"</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">result</span> <span class="attr">column</span>=<span class="string">"phone"</span> <span class="attr">property</span>=<span class="string">"phone"</span> <span class="attr">jdbcType</span>=<span class="string">"VARCHAR"</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">result</span> <span class="attr">column</span>=<span class="string">"email"</span> <span class="attr">property</span>=<span class="string">"email"</span> <span class="attr">jdbcType</span>=<span class="string">"VARCHAR"</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">result</span> <span class="attr">column</span>=<span class="string">"create_time"</span> <span class="attr">property</span>=<span class="string">"createTime"</span> <span class="attr">jdbcType</span>=<span class="string">"DATE"</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">resultMap</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- &lt;insert id="CreateUser" parameterType="java.util.Map"&gt;</span></span><br><span class="line"><span class="comment">         INSERT INTO t_testc</span></span><br><span class="line"><span class="comment">     &lt;/insert&gt;--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">"ReadUserByID"</span> <span class="attr">parameterType</span>=<span class="string">"java.lang.Long"</span> <span class="attr">resultMap</span>=<span class="string">"TestCMap"</span>&gt;</span></span><br><span class="line">        SELECT * FROM t_testc</span><br><span class="line">        WHERE id = #&#123;userID&#125;</span><br><span class="line">    <span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">mapper</span>&gt;</span></span><br></pre></td></tr></table></figure></div></li><li><p>java\xin\chung\undergraduate\dao\ITestDao.java</p><div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="false"data-rel="JAVA"><figure class="iseeu highlight /java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Created by Charle Chung on 2017/10/13.</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Repository</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">ITestDao</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">boolean</span> <span class="title">CreateUser</span><span class="params">(TestC testC)</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">boolean</span> <span class="title">UpdateUser</span><span class="params">(TestC testC)</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="function">TestC <span class="title">ReadUserByID</span><span class="params">(@Param(<span class="string">"userID"</span>)</span> Long userID)</span>;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">boolean</span> <span class="title">DeleteUserByID</span><span class="params">(@Param(<span class="string">"userID"</span>)</span> Long userID)</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div></li><li><p>java\xin\chung\undergraduate\service\ITestService.java</p><div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="false"data-rel="JAVA"><figure class="iseeu highlight /java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Created by Charle Chung on 2017/10/13.</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">ITestService</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">boolean</span> <span class="title">CreateUser</span><span class="params">()</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">boolean</span> <span class="title">UpdateUser</span><span class="params">()</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="function">TestC <span class="title">ReadUserByID</span><span class="params">(Long userID)</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">boolean</span> <span class="title">DeleteUserByID</span><span class="params">(Long userID)</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div></li><li><p>java\xin\chung\undergraduate\service\impl\TestService.java</p><div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="false"data-rel="JAVA"><figure class="iseeu highlight /java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Created by Charle Chung on 2017/10/13.</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Service</span></span><br><span class="line"><span class="meta">@Transactional</span>(rollbackFor = Exception.class)</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TestService</span> <span class="keyword">implements</span> <span class="title">ITestService</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Resource</span></span><br><span class="line">    <span class="keyword">private</span> ITestDao iTestDao;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">CreateUser</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">UpdateUser</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> TestC <span class="title">ReadUserByID</span><span class="params">(Long userID)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> iTestDao.ReadUserByID(userID);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">DeleteUserByID</span><span class="params">(Long userID)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div></li><li><p>java\xin\chung\undergraduate\controller\TestController.java</p><div class="highlight-wrap"autocomplete="off" autocorrect="off" autocapitalize="off" spellcheck="false" contenteditable="false"data-rel="JAVA"><figure class="iseeu highlight /java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Created by Charle Chung on 2017/10/13.</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Controller</span></span><br><span class="line"><span class="meta">@RequestMapping</span>(value = <span class="string">"/test"</span>)</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TestController</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Resource</span></span><br><span class="line">    <span class="keyword">private</span> ITestService iTestService;</span><br><span class="line">    <span class="meta">@ResponseBody</span></span><br><span class="line">    <span class="meta">@RequestMapping</span>(value = <span class="string">"/test.action"</span>, method = RequestMethod.GET)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> TestC <span class="title">testC</span><span class="params">(TestDTO testDTO)</span> </span>&#123;</span><br><span class="line">        TestC testC = iTestService.ReadUserByID(testDTO.getUid());</span><br><span class="line">        <span class="keyword">return</span> testC;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line"><span class="comment">//    Map&lt;String, Object&gt; data = new HashMap&lt;String, Object&gt;();</span></span><br><span class="line"><span class="comment">//</span></span><br><span class="line"><span class="comment">//    public void setData(String key, Object value) &#123;</span></span><br><span class="line"><span class="comment">//        data.clear();</span></span><br><span class="line"><span class="comment">//        data.put(key, value);</span></span><br><span class="line"><span class="comment">//    &#125;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//    @RequestMapping(value = "/test.action", method = RequestMethod.POST)</span></span><br><span class="line"><span class="comment">//    public ModelAndView testC(TestDTO testDTO) &#123;</span></span><br><span class="line"><span class="comment">//        System.out.println("test");</span></span><br><span class="line"><span class="comment">//        TestC testC = iTestService.ReadUserByID(testDTO.getUid());</span></span><br><span class="line"><span class="comment">//        if (testC != null) &#123;</span></span><br><span class="line"><span class="comment">//            setData("json", JSONArray.toJSON(testC));</span></span><br><span class="line"><span class="comment">//        &#125; else &#123;</span></span><br><span class="line"><span class="comment">//            setData("json", "null");</span></span><br><span class="line"><span class="comment">//        &#125;</span></span><br><span class="line"><span class="comment">//        return new ModelAndView("result", data);</span></span><br><span class="line"><span class="comment">//    &#125;</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div></li><li><p>graduate数据库表t_testc结构及数据如下图<br><img src="https://raw.githubusercontent.com/chung567115/chung567115.github.io/hexo-blog/blog-img/4-10.png" alt="16"></p></li></ul><p>⑥处理好以上内容后，开启Tomcat，浏览器访问<a href="http://localhost:8080/graduate/test/test.action?uid=1，如若项目配置正确，应出现如下JSON。" target="_blank" rel="noopener">http://localhost:8080/graduate/test/test.action?uid=1，如若项目配置正确，应出现如下JSON。</a><br><img src="https://raw.githubusercontent.com/chung567115/chung567115.github.io/hexo-blog/blog-img/4-11.png" alt="15"></p><p>⑦分享项目到Github<br><img src="https://raw.githubusercontent.com/chung567115/chung567115.github.io/hexo-blog/blog-img/4-12.png" alt="11"><br><img src="https://raw.githubusercontent.com/chung567115/chung567115.github.io/hexo-blog/blog-img/4-13.png" alt="12"><br><img src="https://raw.githubusercontent.com/chung567115/chung567115.github.io/hexo-blog/blog-img/4-14.png" alt="13"><br><img src="https://raw.githubusercontent.com/chung567115/chung567115.github.io/hexo-blog/blog-img/4-15.png" alt="14"></p><hr>]]></content>
      
      
      <categories>
          
          <category> Java </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Java </tag>
            
            <tag> SpringMVC </tag>
            
            <tag> MyBatis </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Adobe Photoshop CC 2017 破解激活教程</title>
      <link href="/2017/08/23/Adobe%20Photoshop%20CC%202017%20%E7%A0%B4%E8%A7%A3%E6%BF%80%E6%B4%BB%E6%95%99%E7%A8%8B/"/>
      <url>/2017/08/23/Adobe%20Photoshop%20CC%202017%20%E7%A0%B4%E8%A7%A3%E6%BF%80%E6%B4%BB%E6%95%99%E7%A8%8B/</url>
      
        <content type="html"><![CDATA[<blockquote><p>今天小博带来Adobe Photoshop CC 2017的激活教程，老规矩，不废话</p></blockquote><a id="more"></a><p>1.以试用模式安装Adobe Photoshop CC 2017</p><p>2.下载破解工具(这个工具适用于绝大多数Adobe软件)<a href="http://download.csdn.net/download/u012102104/10025247" target="_blank" rel="noopener"> [点击下载]</a></p><p>3.<strong><em>断开网络连接、断开网络连接、断开网络连接</em></strong></p><p>4.以管理员身份运行amtemu.v0.9.2-painter.exe</p><p>5.见下图按步骤操作</p><ul><li>选择对应的软件版本，今天的主题是Adobe Photoshop CC 2017</li><li>点击[Install]运行安装（如果软件未默认安装到C盘，在弹出的窗口中手动找到软件安装目录里面的amtlib.dll文件）</li><li>可选操作，点击[Advanced]，勾选上[Force lang for apps]即可修改软件语言，zh_CN当然就是中文了啦</li></ul><p><img src="https://raw.githubusercontent.com/chung567115/chung567115.github.io/hexo-blog/blog-img/3-1.png" alt="1"></p><p><img src="https://raw.githubusercontent.com/chung567115/chung567115.github.io/hexo-blog/blog-img/3-2.png" alt="2"></p><blockquote><p>到此为此，破解就结束啦，打开软件，验证一下激活状态，你会发现由下图一变成了下图二，再也不显示短短的7天了，Enjoy Your Adobe Photoshop CC 2017</p></blockquote><p><img src="https://raw.githubusercontent.com/chung567115/chung567115.github.io/hexo-blog/blog-img/3-3.png" alt="3"></p><p><img src="https://raw.githubusercontent.com/chung567115/chung567115.github.io/hexo-blog/blog-img/3-4.png" alt="4"></p>]]></content>
      
      
      <categories>
          
          <category> 开发工具 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Photoshop </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>MyEclipse 2017 CI7 破解激活</title>
      <link href="/2017/08/02/MyEclipse%202017%20CI7%20%E7%A0%B4%E8%A7%A3%E6%BF%80%E6%B4%BB/"/>
      <url>/2017/08/02/MyEclipse%202017%20CI7%20%E7%A0%B4%E8%A7%A3%E6%BF%80%E6%B4%BB/</url>
      
        <content type="html"><![CDATA[<blockquote><p>本文小博教你一步步破解激活，打造一款专属于自己的MyEclipse 2017 CI7</p></blockquote><a id="more"></a><blockquote><p>(根据评论反馈特此加注：<strong>注意教程细节步骤以及MyEclipse<a href="https://pan.baidu.com/s/1c3n9Y1q" target="_blank" rel="noopener">点击下载(密码0k8q)</a>版本号2017 CI7 BuildID 15.0.1-20170704，以免破解失败</strong>)，废话不多说，看招</p></blockquote><h1 id="激活步骤如下："><a href="#激活步骤如下：" class="headerlink" title="激活步骤如下："></a>激活步骤如下：</h1><ul><li>下载上述MyEclipse2017 CI7离线版安装包</li><li>安装MyEclipse CI7，注意最后完成时，<strong>去掉勾，点击Finish，千万别点打开程序</strong></li></ul><p><img src="https://raw.githubusercontent.com/chung567115/chung567115.github.io/hexo-blog/blog-img/2-1.png" alt="去掉勾，点击Finish"></p><ul><li>下载破解文件（以前的资源由于下载量太大，系统自动改成10分了，重新发了个最低分2分的链接，小博不差这些分，不想有人来骂骗分）<a href="http://download.csdn.net/download/u012102104/9926086" target="_blank" rel="noopener"> [<strong>点击下载</strong>]</a></li><li>将patch文件夹中内容覆盖到 &lt;你的MyEclipse安装目录&gt;\plugins 文件夹中</li></ul><p><img src="https://raw.githubusercontent.com/chung567115/chung567115.github.io/hexo-blog/blog-img/2-2.png" alt="目录"></p><p><img src="https://raw.githubusercontent.com/chung567115/chung567115.github.io/hexo-blog/blog-img/2-3.png" alt="patch覆盖"></p><ul><li>打开tools文件夹中的cracker2017.jar文件，如下图所示<ol><li>输入你的用户名，是的，随便输，怎么高兴怎么来</li><li>下拉框选择BLUE</li><li>点击SystemId按钮，你会发现点击第一次没效果，没关系，进行第4步</li><li>再点一次SystemId按钮，这时你会发现有一串key自动填进来了</li><li>发现SystemId框有一串字符之后，点击Active按钮激活</li><li>最后也是最关键的一步，点击Tools–&gt;SaveProperities，会自动保存生成的myeclipse.properties文件</li></ol></li></ul><p><img src="https://raw.githubusercontent.com/chung567115/chung567115.github.io/hexo-blog/blog-img/2-4.png" alt="破解步骤"></p><ul><li>最后打开你的MyEclipse 2017 CI7</li><li>选择Help–&gt;Subscrption Information 查看激活状态，如下图，你会发现注册ID是你自己填的用户名，而使用时限也不再是30Days，而是可以用到2020年，Enjoy Your MyEclipse2017</li></ul><p><img src="https://raw.githubusercontent.com/chung567115/chung567115.github.io/hexo-blog/blog-img/2-5.png" alt="激活状态"></p><blockquote><p><strong><em>特作说明，有极小部分人一直破解失败的，请注意MyEclipse版本是否和文章提到得到一致，以及是否有按照严格教程步骤进行。（一旦安装时打开了IDE，很有可能需要卸载并清理注册表再重装破解）</em></strong></p></blockquote><hr><h1 id="写在后面"><a href="#写在后面" class="headerlink" title="写在后面"></a>写在后面</h1><blockquote><p>对于MyEclipse 2017 CI7的 Darkest Dark 主题，小博吐血推荐！时隔多年，MyEclipse终于出了一款自带的炫酷主题，扁平化的图标与按钮，炫彩的字体颜色风格，酷到不行！有图有证据。设置方法：Window–&gt;Preference–&gt;General–&gt;Appearance   Theme下拉框中选择Darkest Dark - It’s a Total Eclipse即可</p></blockquote><p><img src="https://raw.githubusercontent.com/chung567115/chung567115.github.io/hexo-blog/blog-img/2-6.png" alt="Darkest Dark主题"></p>]]></content>
      
      
      <categories>
          
          <category> 开发工具 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Java </tag>
            
            <tag> MyEclipse </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>IDEA免费注册激活</title>
      <link href="/2017/08/01/IDEA%E6%B3%A8%E5%86%8C%E6%BF%80%E6%B4%BB/"/>
      <url>/2017/08/01/IDEA%E6%B3%A8%E5%86%8C%E6%BF%80%E6%B4%BB/</url>
      
        <content type="html"><![CDATA[<blockquote><p>本文小博教你一步步破解激活最好用的开发工具：IntelliJ IDEA</p></blockquote><a id="more"></a><blockquote><p>不废话，Help–&gt;Register进入如下图一界面，然后选择License server输入下面任意一个注册服务器地址之一，点击Activate按钮激活IDEA。验证激活状态的方式为Help–&gt;About进入图二界面，若显示Licensed to xxxxxx 则为已激活状态。</p></blockquote><h1 id="注册服务器地址"><a href="#注册服务器地址" class="headerlink" title="注册服务器地址"></a>注册服务器地址</h1><p>​    &gt; <a href="http://idea.lanyus.com(优先使用这个)" target="_blank" rel="noopener">http://idea.lanyus.com(优先使用这个)</a><br>​    &gt; <a href="http://idea.iteblog.com/key.php" target="_blank" rel="noopener">http://idea.iteblog.com/key.php</a><br>​    &gt; <a href="http://idea.liyang.io" target="_blank" rel="noopener">http://idea.liyang.io</a></p><p><img src="https://raw.githubusercontent.com/chung567115/chung567115.github.io/hexo-blog/blog-img/1-1.png" alt="激活界面"></p><hr><p><img src="https://raw.githubusercontent.com/chung567115/chung567115.github.io/hexo-blog/blog-img/1-2.png" alt="状态界面"></p><hr><p>&emsp;&emsp;同是码农，如果有条件的话，还是请支持正版，<a href="https://www.jetbrains.com/idea/buy" target="_blank" rel="noopener">购买地址</a>. Enjoy your IDEA.</p>]]></content>
      
      
      <categories>
          
          <category> 开发工具 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Java </tag>
            
            <tag> IDEA </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
